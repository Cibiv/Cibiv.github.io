%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: MASAMB-logo-2017-v3.pdf
%%Creator: (Adobe Acrobat 11.0.17)
%%For: Olga
%%CreationDate: 28/03/17, 15:23
%%BoundingBox: 0 0 564 200
%%HiResBoundingBox: 0 0 564 200
%%CropBox: 0 0 564 200
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 787 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2017-03-27T12:42:51Z"
   xmp:ModifyDate="2017-03-27T14:43:42+02:00"
   xmp:MetadataDate="2017-03-27T14:43:42+02:00"
   pdf:Producer="Mac OS X 10.10.2 Quartz PDFContext"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:6204a67c-f154-7140-bab9-de2703d70324"
   xmpMM:InstanceID="uuid:9d4c0e93-3767-a94b-9c71-173a1953071e"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 200 li
564 200 li
564 0 li
cp
clp
582 200 mo
-216 200 li
-216 -18 li
582 -18 li
582 200 li
506.656 120.838 mo
506.656 120.838 li
509.694 120.838 li
509.85 120.838 510.003 120.825 510.113 120.802 cv
510.224 120.779 510.287 120.748 510.287 120.716 cv
510.287 120.716 li
510.287 120.716 li
510.287 120.683 510.224 120.652 510.113 120.629 cv
510.003 120.607 509.85 120.594 509.694 120.594 cv
506.656 120.594 li
506.656 120.594 li
503.618 120.594 li
503.618 120.594 li
500.581 120.594 li
500.581 120.594 li
497.543 120.594 li
497.543 120.594 li
494.505 120.594 li
494.505 120.594 li
491.467 120.594 li
491.467 120.594 li
488.43 120.594 li
488.43 120.594 li
485.392 120.594 li
485.392 120.594 li
482.354 120.594 li
482.354 120.594 li
479.316 120.594 li
479.316 120.594 li
476.279 120.594 li
476.279 120.594 li
473.241 120.594 li
473.241 120.594 li
470.7 120.594 li
470.678 120.586 470.652 120.58 470.623 120.574 cv
470.512 120.551 470.359 120.538 470.203 120.538 cv
467.166 120.538 li
467.009 120.538 466.857 120.551 466.746 120.574 cv
466.717 120.58 466.691 120.586 466.669 120.594 cv
464.625 120.594 li
464.602 120.586 464.576 120.58 464.547 120.574 cv
464.437 120.551 464.284 120.538 464.128 120.538 cv
461.09 120.538 li
460.934 120.538 460.781 120.551 460.671 120.574 cv
460.642 120.58 460.616 120.586 460.594 120.594 cv
458.549 120.594 li
458.527 120.586 458.501 120.58 458.472 120.574 cv
458.362 120.551 458.209 120.538 458.052 120.538 cv
455.015 120.538 li
454.858 120.538 454.706 120.551 454.595 120.574 cv
454.566 120.58 454.54 120.586 454.518 120.594 cv
451.977 120.594 li
451.977 120.594 li
449.436 120.594 li
449.414 120.586 449.388 120.58 449.359 120.574 cv
449.248 120.551 449.095 120.538 448.939 120.538 cv
445.901 120.538 li
445.745 120.538 445.592 120.551 445.482 120.574 cv
445.453 120.58 445.427 120.586 445.405 120.594 cv
442.864 120.594 li
442.864 120.594 li
440.419 120.594 li
440.419 120.494 li
440.419 120.462 440.356 120.431 440.246 120.408 cv
440.135 120.385 439.982 120.372 439.826 120.372 cv
436.788 120.372 li
436.632 120.372 436.479 120.385 436.369 120.408 cv
436.34 120.414 436.314 120.42 436.292 120.427 cv
433.751 120.427 li
433.594 120.427 433.442 120.44 433.331 120.463 cv
433.302 120.469 433.276 120.476 433.254 120.483 cv
431.209 120.483 li
431.187 120.476 431.162 120.469 431.133 120.463 cv
431.022 120.44 430.869 120.427 430.713 120.427 cv
427.675 120.427 li
427.675 120.427 li
425.231 120.427 li
425.231 120.383 li
425.231 120.351 425.167 120.32 425.057 120.297 cv
424.947 120.274 424.794 120.261 424.638 120.261 cv
422.192 120.261 li
422.182 120.232 422.121 120.204 422.019 120.183 cv
421.909 120.16 421.756 120.147 421.6 120.147 cv
418.562 120.147 li
418.406 120.147 418.253 120.16 418.143 120.183 cv
418.032 120.206 417.969 120.237 417.969 120.269 cv
417.969 120.372 li
416.118 120.372 li
416.118 120.328 li
416.118 120.296 416.055 120.264 415.944 120.242 cv
415.834 120.219 415.681 120.206 415.525 120.206 cv
412.994 120.206 li
412.969 120.198 412.94 120.19 412.906 120.183 cv
412.796 120.16 412.643 120.147 412.487 120.147 cv
409.945 120.147 li
409.923 120.14 409.897 120.134 409.868 120.128 cv
409.758 120.105 409.605 120.092 409.449 120.092 cv
406.411 120.092 li
406.255 120.092 406.102 120.105 405.992 120.128 cv
405.881 120.15 405.818 120.182 405.818 120.214 cv
405.818 120.261 li
403.967 120.261 li
403.967 120.214 li
403.967 120.182 403.904 120.15 403.793 120.128 cv
403.683 120.105 403.53 120.092 403.373 120.092 cv
400.929 120.092 li
400.929 119.993 li
400.929 119.96 400.866 119.929 400.755 119.906 cv
400.645 119.884 400.492 119.87 400.336 119.87 cv
397.298 119.87 li
397.298 119.87 li
394.854 119.87 li
394.854 119.605 li
394.854 119.573 394.791 119.541 394.68 119.519 cv
394.57 119.496 394.417 119.483 394.26 119.483 cv
391.719 119.483 li
391.697 119.476 391.671 119.469 391.642 119.463 cv
391.532 119.44 391.379 119.427 391.223 119.427 cv
388.682 119.427 li
388.659 119.42 388.634 119.414 388.605 119.408 cv
388.494 119.385 388.341 119.372 388.185 119.372 cv
385.74 119.372 li
385.74 119.048 li
385.74 119.016 385.677 118.984 385.567 118.962 cv
385.456 118.939 385.304 118.926 385.147 118.926 cv
382.109 118.926 li
381.953 118.926 381.801 118.939 381.69 118.962 cv
381.58 118.984 381.516 119.016 381.516 119.048 cv
381.516 119.092 li
379.665 119.092 li
379.665 118.436 li
379.665 118.404 379.602 118.372 379.491 118.349 cv
379.381 118.327 379.228 118.314 379.072 118.314 cv
376.034 118.314 li
375.878 118.314 375.725 118.327 375.615 118.349 cv
375.514 118.37 375.452 118.398 375.442 118.428 cv
373.503 118.428 li
373.479 118.419 373.45 118.412 373.416 118.405 cv
373.306 118.382 373.153 118.369 372.996 118.369 cv
370.552 118.369 li
370.552 118.048 li
370.552 118.016 370.489 117.985 370.378 117.962 cv
370.268 117.939 370.115 117.926 369.959 117.926 cv
367.514 117.926 li
367.514 117.547 li
367.514 117.514 367.451 117.483 367.341 117.46 cv
367.23 117.438 367.077 117.424 366.921 117.424 cv
364.476 117.424 li
364.476 117.104 li
364.476 117.071 364.413 117.04 364.303 117.017 cv
364.192 116.994 364.039 116.981 363.883 116.981 cv
361.439 116.981 li
361.439 116.215 li
361.439 116.182 361.376 116.151 361.265 116.128 cv
361.155 116.105 361.002 116.092 360.846 116.092 cv
358.401 116.092 li
358.401 115.879 li
358.401 115.847 358.338 115.815 358.227 115.793 cv
358.117 115.77 357.964 115.757 357.808 115.757 cv
355.363 115.757 li
355.363 114.436 li
355.363 114.404 355.3 114.372 355.19 114.35 cv
355.079 114.327 354.926 114.314 354.77 114.314 cv
352.326 114.314 li
352.326 114.101 li
352.326 114.069 352.262 114.037 352.152 114.014 cv
352.042 113.992 351.888 113.979 351.732 113.979 cv
349.288 113.979 li
349.288 113.935 li
349.288 113.902 349.225 113.871 349.114 113.848 cv
349.004 113.826 348.851 113.813 348.695 113.813 cv
346.25 113.813 li
346.25 112.769 li
346.25 112.737 346.187 112.705 346.076 112.682 cv
345.966 112.659 345.813 112.646 345.657 112.646 cv
343.212 112.646 li
343.212 110.99 li
343.212 110.958 343.149 110.927 343.039 110.904 cv
342.928 110.881 342.775 110.868 342.619 110.868 cv
340.175 110.868 li
340.175 110.378 li
340.175 110.346 340.112 110.314 340.001 110.292 cv
339.891 110.269 339.738 110.256 339.582 110.256 cv
337.137 110.256 li
337.137 109.101 li
337.137 109.069 337.074 109.038 336.963 109.015 cv
336.853 108.992 336.7 108.979 336.544 108.979 cv
334.099 108.979 li
334.099 108.323 li
334.099 108.291 334.036 108.259 333.926 108.237 cv
333.815 108.214 333.662 108.201 333.506 108.201 cv
331.062 108.201 li
331.062 105.434 li
331.062 105.402 330.998 105.37 330.888 105.348 cv
330.778 105.325 330.625 105.312 330.468 105.312 cv
328.024 105.312 li
328.024 103.766 li
328.024 103.734 327.961 103.703 327.85 103.68 cv
327.74 103.657 327.587 103.644 327.431 103.644 cv
324.986 103.644 li
324.986 103.099 li
324.986 103.066 324.923 103.035 324.813 103.012 cv
324.702 102.99 324.549 102.977 324.393 102.977 cv
321.948 102.977 li
321.948 102.542 li
321.948 102.509 321.885 102.478 321.775 102.455 cv
321.664 102.433 321.512 102.42 321.355 102.42 cv
318.911 102.42 li
318.911 98.2066 li
318.911 98.1744 318.848 98.1431 318.737 98.1203 cv
318.627 98.0975 318.474 98.0845 318.317 98.0845 cv
315.28 98.0845 li
315.123 98.0845 314.971 98.0975 314.86 98.1203 cv
314.75 98.1431 314.686 98.1744 314.686 98.2066 cv
314.686 99.8076 li
312.835 99.8076 li
312.835 93.318 li
312.835 93.2858 312.772 93.2543 312.662 93.2317 cv
312.551 93.2089 312.398 93.1959 312.242 93.1959 cv
309.204 93.1959 li
309.048 93.1959 308.895 93.2089 308.785 93.2317 cv
308.674 93.2543 308.611 93.2858 308.611 93.318 cv
308.611 93.8602 li
306.76 93.8602 li
306.76 89.3705 li
306.76 89.3384 306.697 89.307 306.586 89.2842 cv
306.476 89.2615 306.323 89.2485 306.167 89.2485 cv
303.722 89.2485 li
303.722 87.3708 li
303.722 87.3387 303.659 87.3071 303.549 87.2843 cv
303.438 87.2617 303.285 87.2486 303.129 87.2486 cv
300.684 87.2486 li
300.684 84.2017 li
300.684 84.1695 300.621 84.1381 300.511 84.1154 cv
300.4 84.0926 300.247 84.0796 300.091 84.0796 cv
297.647 84.0796 li
297.647 82.9805 li
297.647 82.9483 297.584 82.9167 297.473 82.894 cv
297.363 82.8712 297.21 82.8582 297.054 82.8582 cv
294.609 82.8582 li
294.609 80.4236 li
294.609 80.3914 294.546 80.3601 294.435 80.3373 cv
294.325 80.3145 294.172 80.3015 294.016 80.3015 cv
291.571 80.3015 li
291.571 77.59 li
291.571 77.5579 291.508 77.5265 291.398 77.5037 cv
291.287 77.481 291.134 77.468 290.978 77.468 cv
288.534 77.468 li
288.534 73.1997 li
288.534 73.1675 288.47 73.1361 288.36 73.1134 cv
288.249 73.0906 288.097 73.0776 287.94 73.0776 cv
285.496 73.0776 li
285.496 69.5878 li
285.496 69.5556 285.433 69.5241 285.322 69.5013 cv
285.212 69.4785 285.059 69.4656 284.903 69.4656 cv
281.865 69.4656 li
281.709 69.4656 281.556 69.4785 281.445 69.5013 cv
281.335 69.5241 281.272 69.5556 281.272 69.5878 cv
281.272 70.1853 li
279.42 70.1853 li
279.42 65.751 li
279.42 65.7188 279.357 65.6875 279.247 65.6647 cv
279.136 65.6419 278.983 65.629 278.827 65.629 cv
276.383 65.629 li
276.383 59.5823 li
276.383 59.5501 276.32 59.5188 276.209 59.496 cv
276.099 59.4732 275.946 59.4602 275.79 59.4602 cv
273.345 59.4602 li
273.345 56.6381 li
273.345 56.6059 273.282 56.5743 273.171 56.5518 cv
273.061 56.529 272.908 56.5158 272.752 56.5158 cv
269.714 56.5158 li
269.558 56.5158 269.405 56.529 269.295 56.5516 cv
269.184 56.5743 269.121 56.6059 269.121 56.6381 cv
269.121 58.5157 li
267.27 58.5157 li
267.27 51.7461 li
267.27 51.7139 267.206 51.6823 267.096 51.6598 cv
266.985 51.637 266.833 51.624 266.676 51.624 cv
264.232 51.624 li
264.232 47.7465 li
264.232 47.7143 264.169 47.6829 264.058 47.6602 cv
263.948 47.6374 263.795 47.6244 263.639 47.6244 cv
261.194 47.6244 li
261.194 40.6885 li
261.194 40.6564 261.131 40.625 261.02 40.6022 cv
260.91 40.5795 260.757 40.5665 260.601 40.5665 cv
257.563 40.5665 li
257.407 40.5665 257.254 40.5795 257.144 40.6022 cv
257.033 40.625 256.97 40.6564 256.97 40.6885 cv
256.97 45.846 li
255.119 45.846 li
255.119 38.1319 li
255.119 38.0997 255.056 38.0684 254.945 38.0456 cv
254.835 38.0228 254.682 38.0098 254.526 38.0098 cv
252.081 38.0098 li
252.081 36.129 li
252.081 36.0968 252.018 36.0653 251.907 36.0425 cv
251.797 36.0197 251.644 36.0067 251.488 36.0067 cv
249.043 36.0067 li
249.043 30.0709 li
249.043 30.0388 248.98 30.0074 248.87 29.9846 cv
248.759 29.9618 248.606 29.9489 248.45 29.9489 cv
245.412 29.9489 li
245.256 29.9489 245.103 29.9618 244.993 29.9846 cv
244.882 30.0074 244.819 30.0388 244.819 30.0709 cv
244.819 32.6749 li
242.968 32.6749 li
242.968 27.4589 li
242.968 27.4268 242.905 27.3952 242.794 27.3724 cv
242.684 27.3496 242.531 27.3367 242.375 27.3367 cv
239.93 27.3367 li
239.93 22.5701 li
239.93 22.538 239.867 22.5066 239.756 22.4838 cv
239.646 22.461 239.493 22.4481 239.337 22.4481 cv
236.893 22.4481 li
236.893 21.4041 li
236.893 21.3719 236.829 21.3405 236.719 21.3178 cv
236.608 21.295 236.455 21.282 236.299 21.282 cv
233.855 21.282 li
233.855 15.4569 li
233.855 15.4247 233.792 15.3934 233.681 15.3706 cv
233.571 15.3478 233.418 15.3348 233.262 15.3348 cv
230.224 15.3348 li
230.068 15.3348 229.915 15.3478 229.804 15.3706 cv
229.694 15.3934 229.63 15.4247 229.63 15.4569 cv
229.63 17.2792 li
227.779 17.2792 li
227.779 13.3984 li
227.779 13.3663 227.716 13.3349 227.606 13.3121 cv
227.495 13.2894 227.342 13.2764 227.186 13.2764 cv
224.742 13.2764 li
224.742 12.3432 li
224.742 12.3111 224.678 12.2797 224.568 12.2569 cv
224.457 12.2342 224.305 12.2212 224.148 12.2212 cv
221.111 12.2212 li
220.954 12.2212 220.802 12.2342 220.691 12.2569 cv
220.581 12.2797 220.517 12.3111 220.517 12.3432 cv
220.517 15.1101 li
218.666 15.1101 li
218.666 12.0664 li
218.666 12.0342 218.603 12.0028 218.492 11.9801 cv
218.382 11.9573 218.229 11.9443 218.073 11.9443 cv
215.628 11.9443 li
215.628 10.0113 li
215.628 9.97916 215.565 9.94759 215.455 9.92482 cv
215.344 9.90205 215.191 9.88906 215.035 9.88906 cv
212.591 9.88906 li
212.591 8.95273 li
212.591 8.92057 212.527 8.88921 212.417 8.86643 cv
212.307 8.84366 212.154 8.83068 211.997 8.83068 cv
208.96 8.83068 li
208.804 8.83068 208.651 8.84366 208.54 8.86643 cv
208.43 8.88921 208.366 8.92057 208.366 8.95273 cv
208.366 10.1106 li
205.922 10.1106 li
205.766 10.1106 205.613 10.1236 205.503 10.1464 cv
205.392 10.1691 205.329 10.2005 205.329 10.2327 cv
205.329 11.3873 li
203.477 11.3873 li
203.477 8.67585 li
203.477 8.64369 203.414 8.61233 203.304 8.58955 cv
203.193 8.56678 203.041 8.55379 202.884 8.55379 cv
199.847 8.55379 li
199.69 8.55379 199.538 8.56678 199.427 8.58955 cv
199.317 8.61233 199.253 8.64369 199.253 8.67585 cv
199.253 13.3317 li
197.402 13.3317 li
197.402 12.7895 li
197.402 12.7574 197.339 12.7258 197.228 12.703 cv
197.118 12.6803 196.965 12.6673 196.809 12.6673 cv
194.365 12.6673 li
194.365 10.1773 li
194.365 10.1452 194.301 10.1138 194.191 10.091 cv
194.08 10.0683 193.927 10.0553 193.771 10.0553 cv
190.733 10.0553 li
190.577 10.0553 190.424 10.0683 190.314 10.091 cv
190.203 10.1138 190.14 10.1452 190.14 10.1773 cv
190.14 18.2237 li
188.289 18.2237 li
188.289 18.1798 li
188.289 18.1476 188.226 18.116 188.115 18.0935 cv
188.005 18.0707 187.852 18.0577 187.696 18.0577 cv
185.251 18.0577 li
185.251 17.4012 li
185.251 17.3691 185.188 17.3377 185.078 17.3149 cv
184.967 17.2922 184.814 17.2792 184.658 17.2792 cv
181.62 17.2792 li
181.464 17.2792 181.311 17.2922 181.201 17.3149 cv
181.09 17.3377 181.027 17.3691 181.027 17.4012 cv
181.027 18.7253 li
178.583 18.7253 li
178.426 18.7253 178.274 18.7383 178.163 18.7611 cv
178.053 18.7839 177.989 18.8152 177.989 18.8474 cv
177.989 23.3372 li
176.138 23.3372 li
176.138 21.1795 li
176.138 21.1474 176.075 21.1158 175.964 21.093 cv
175.854 21.0702 175.701 21.0573 175.545 21.0573 cv
172.507 21.0573 li
172.351 21.0573 172.198 21.0702 172.088 21.093 cv
171.977 21.1158 171.914 21.1474 171.914 21.1795 cv
171.914 24.9494 li
169.469 24.9494 li
169.313 24.9494 169.16 24.9624 169.05 24.9852 cv
168.939 25.0079 168.876 25.0393 168.876 25.0715 cv
168.876 29.2291 li
166.432 29.2291 li
166.276 29.2291 166.123 29.2421 166.012 29.2648 cv
165.902 29.2874 165.838 29.319 165.838 29.3511 cv
165.838 34.1177 li
163.394 34.1177 li
163.238 34.1177 163.085 34.1307 162.974 34.1534 cv
162.864 34.1762 162.801 34.2078 162.801 34.2399 cv
162.801 35.2869 li
160.356 35.2869 li
160.2 35.2869 160.047 35.2999 159.937 35.3227 cv
159.826 35.3455 159.763 35.3768 159.763 35.409 cv
159.763 39.3419 li
157.319 39.3419 li
157.162 39.3419 157.01 39.3549 156.899 39.3777 cv
156.789 39.4004 156.725 39.4318 156.725 39.464 cv
156.725 41.8986 li
154.281 41.8986 li
154.125 41.8986 153.972 41.9115 153.861 41.9343 cv
153.751 41.9571 153.688 41.9887 153.688 42.0208 cv
153.688 49.6241 li
151.836 49.6241 li
151.836 45.522 li
151.836 45.4898 151.773 45.4583 151.663 45.4357 cv
151.552 45.4129 151.399 45.3999 151.243 45.3999 cv
148.205 45.3999 li
148.049 45.3999 147.896 45.4129 147.786 45.4357 cv
147.675 45.4583 147.612 45.4898 147.612 45.522 cv
147.612 55.9035 li
145.168 55.9035 li
145.012 55.9035 144.859 55.9167 144.748 55.9393 cv
144.638 55.962 144.574 55.9936 144.574 56.0258 cv
144.574 57.0142 li
142.13 57.0142 li
141.974 57.0142 141.821 57.0272 141.71 57.05 cv
141.6 57.0728 141.537 57.1041 141.537 57.1363 cv
141.537 58.7371 li
139.092 58.7371 li
138.936 58.7371 138.783 58.7502 138.673 58.7728 cv
138.562 58.7956 138.499 58.8272 138.499 58.8593 cv
138.499 63.1276 li
136.055 63.1276 li
135.898 63.1276 135.746 63.1406 135.635 63.1634 cv
135.525 63.186 135.461 63.2175 135.461 63.2497 cv
135.461 65.0752 li
133.017 65.0752 li
132.861 65.0752 132.708 65.0882 132.597 65.1109 cv
132.487 65.1337 132.424 65.1651 132.424 65.1973 cv
132.424 71.3546 li
129.979 71.3546 li
129.823 71.3546 129.67 71.3676 129.56 71.3904 cv
129.449 71.4131 129.386 71.4447 129.386 71.4769 cv
129.386 71.9084 li
126.941 71.9084 li
126.785 71.9084 126.632 71.9213 126.522 71.9441 cv
126.411 71.9669 126.348 71.9983 126.348 72.0304 cv
126.348 74.5204 li
123.904 74.5204 li
123.747 74.5204 123.595 74.5333 123.484 74.5561 cv
123.374 74.5789 123.31 74.6105 123.31 74.6426 cv
123.31 76.4681 li
120.866 76.4681 li
120.71 76.4681 120.557 76.4811 120.446 76.5039 cv
120.336 76.5267 120.273 76.558 120.273 76.5902 cv
120.273 79.7999 li
117.828 79.7999 li
117.672 79.7999 117.519 79.8129 117.409 79.8357 cv
117.298 79.8584 117.235 79.89 117.235 79.9222 cv
117.235 82.3012 li
114.791 82.3012 li
114.634 82.3012 114.482 82.3144 114.371 82.337 cv
114.261 82.3598 114.197 82.3913 114.197 82.4235 cv
114.197 85.1935 li
111.753 85.1935 li
111.597 85.1935 111.444 85.2065 111.333 85.2293 cv
111.223 85.2521 111.16 85.2834 111.16 85.3156 cv
111.16 89.9714 li
108.715 89.9714 li
108.559 89.9714 108.406 89.9844 108.296 90.0072 cv
108.267 90.0132 108.241 90.0198 108.219 90.0268 cv
105.677 90.0268 li
105.521 90.0268 105.368 90.0398 105.258 90.0625 cv
105.147 90.0853 105.084 90.1169 105.084 90.149 cv
105.084 92.1959 li
102.64 92.1959 li
102.483 92.1959 102.331 92.2091 102.22 92.2317 cv
102.11 92.2544 102.046 92.286 102.046 92.3182 cv
102.046 96.0848 li
99.602 96.0848 li
99.4457 96.0848 99.2929 96.0978 99.1824 96.1206 cv
99.072 96.1434 99.0086 96.1747 99.0086 96.2069 cv
99.0086 97.9185 li
96.5642 97.9185 li
96.408 97.9185 96.2552 97.9315 96.1447 97.9543 cv
96.0342 97.9769 95.9709 98.0084 95.9709 98.0406 cv
95.9709 98.8075 li
93.5265 98.8075 li
93.3703 98.8075 93.2175 98.8207 93.107 98.8435 cv
92.9965 98.8661 92.9332 98.8976 92.9332 98.9298 cv
92.9332 101.198 li
90.4888 101.198 li
90.3326 101.198 90.1797 101.211 90.0693 101.234 cv
89.9588 101.257 89.8955 101.288 89.8955 101.32 cv
89.8955 102.641 li
87.4511 102.641 li
87.2949 102.641 87.142 102.654 87.0316 102.677 cv
86.9211 102.7 86.8578 102.731 86.8578 102.763 cv
86.8578 104.589 li
84.4134 104.589 li
84.2571 104.589 84.1043 104.602 83.9938 104.624 cv
83.8834 104.647 83.82 104.679 83.82 104.711 cv
83.82 106.422 li
81.9663 106.422 li
81.9533 106.394 81.8925 106.368 81.7952 106.347 cv
81.6847 106.325 81.5319 106.312 81.3756 106.312 cv
78.3379 106.312 li
78.1817 106.312 78.0289 106.325 77.9184 106.347 cv
77.808 106.37 77.7446 106.402 77.7446 106.434 cv
77.7446 108.533 li
75.3002 108.533 li
75.144 108.533 74.9912 108.546 74.8807 108.569 cv
74.7702 108.591 74.7069 108.623 74.7069 108.655 cv
74.7069 110.477 li
72.2625 110.477 li
72.1063 110.477 71.9535 110.49 71.843 110.513 cv
71.7325 110.536 71.6692 110.567 71.6692 110.599 cv
71.6692 111.48 li
69.2248 111.48 li
69.0686 111.48 68.9157 111.494 68.8053 111.516 cv
68.6948 111.539 68.6315 111.57 68.6315 111.603 cv
68.6315 112.979 li
66.1871 112.979 li
66.0309 112.979 65.878 112.992 65.7675 113.014 cv
65.6571 113.037 65.5938 113.069 65.5938 113.101 cv
65.5938 113.314 li
63.1494 113.314 li
62.9931 113.314 62.8403 113.327 62.7298 113.35 cv
62.6194 113.373 62.556 113.404 62.556 113.436 cv
62.556 113.702 li
60.1116 113.702 li
59.9554 113.702 59.8026 113.715 59.6921 113.738 cv
59.5816 113.76 59.5183 113.792 59.5183 113.824 cv
59.5183 114.646 li
57.0739 114.646 li
56.9177 114.646 56.7649 114.659 56.6544 114.682 cv
56.5439 114.705 56.4806 114.736 56.4806 114.768 cv
56.4806 115.757 li
54.0362 115.757 li
53.88 115.757 53.7271 115.77 53.6167 115.793 cv
53.5062 115.815 53.4429 115.847 53.4429 115.879 cv
53.4429 116.646 li
51.5918 116.646 li
51.5918 116.159 li
51.5918 116.127 51.5285 116.095 51.418 116.073 cv
51.3075 116.05 51.1547 116.037 50.9985 116.037 cv
47.9608 116.037 li
47.8045 116.037 47.6517 116.05 47.5412 116.073 cv
47.4308 116.095 47.3674 116.127 47.3674 116.159 cv
47.3674 116.203 li
44.923 116.203 li
44.7668 116.203 44.614 116.216 44.5035 116.239 cv
44.393 116.262 44.3297 116.293 44.3297 116.325 cv
44.3297 117.148 li
41.8853 117.148 li
41.7291 117.148 41.5763 117.161 41.4658 117.183 cv
41.3553 117.206 41.292 117.238 41.292 117.27 cv
41.292 117.48 li
38.8476 117.48 li
38.6914 117.48 38.5386 117.493 38.4281 117.516 cv
38.3176 117.538 38.2543 117.57 38.2543 117.602 cv
38.2543 118.705 li
36.4032 118.705 li
36.4032 118.048 li
36.4032 118.016 36.3399 117.985 36.2294 117.962 cv
36.1189 117.939 35.9661 117.926 35.8099 117.926 cv
32.7722 117.926 li
32.616 117.926 32.4631 117.939 32.3527 117.962 cv
32.2422 117.985 32.1791 118.016 32.1791 118.048 cv
32.1791 118.483 li
29.7345 118.483 li
29.5782 118.483 29.4254 118.496 29.3149 118.519 cv
29.2045 118.541 29.1411 118.573 29.1411 118.605 cv
29.1411 119.037 li
26.6967 119.037 li
26.5405 119.037 26.3877 119.05 26.2772 119.072 cv
26.1667 119.095 26.1034 119.127 26.1034 119.159 cv
26.1034 119.427 li
24.1555 119.427 li
24.1333 119.42 24.1076 119.414 24.0786 119.408 cv
23.9681 119.385 23.8152 119.372 23.659 119.372 cv
20.6213 119.372 li
20.4651 119.372 20.3123 119.385 20.2018 119.408 cv
20.0913 119.431 20.028 119.462 20.028 119.494 cv
20.028 119.981 li
18.1769 119.981 li
18.1769 119.325 li
18.1769 119.293 18.1136 119.261 18.0031 119.238 cv
17.8926 119.216 17.7398 119.203 17.5836 119.203 cv
14.5459 119.203 li
14.3896 119.203 14.2368 119.216 14.1264 119.238 cv
14.0159 119.261 13.9526 119.293 13.9526 119.325 cv
13.9526 119.76 li
11.5082 119.76 li
11.3519 119.76 11.1991 119.773 11.0886 119.795 cv
10.9782 119.818 10.915 119.85 10.915 119.882 cv
10.915 120.092 li
8.47044 120.092 li
8.47044 120.092 li
5.43272 120.092 li
5.2765 120.092 5.12367 120.105 5.0132 120.128 cv
4.9119 120.149 4.85025 120.177 4.84071 120.206 cv
2.395 120.206 li
2.395 120.206 li
-.642715 120.206 li
-.798935 120.206 -.951752 120.219 -1.06223 120.242 cv
-1.1727 120.264 -1.23604 120.296 -1.23604 120.328 cv
-1.23604 120.538 li
-3.08711 120.538 li
-3.08711 120.494 li
-3.08711 120.462 -3.15044 120.431 -3.26091 120.408 cv
-3.37138 120.385 -3.5242 120.372 -3.68044 120.372 cv
-6.71814 120.372 li
-6.87437 120.372 -7.02719 120.385 -7.13766 120.408 cv
-7.23505 120.428 -7.29564 120.455 -7.30862 120.483 cv
-9.75586 120.483 li
-9.75586 120.483 li
-12.7936 120.483 li
-12.9498 120.483 -13.1026 120.496 -13.2131 120.518 cv
-13.3105 120.538 -13.3712 120.565 -13.3842 120.594 cv
-15.8313 120.594 li
-15.8313 120.594 li
-18.3722 120.594 li
-18.3944 120.586 -18.4203 120.58 -18.4495 120.574 cv
-18.56 120.551 -18.7128 120.538 -18.869 120.538 cv
-21.9067 120.538 li
-22.063 120.538 -22.2156 120.551 -22.3262 120.574 cv
-22.3554 120.58 -22.3812 120.586 -22.4035 120.594 cv
-24.3538 120.594 li
-24.3668 120.565 -24.4275 120.538 -24.5249 120.518 cv
-24.6354 120.496 -24.7882 120.483 -24.9444 120.483 cv
-27.9822 120.483 li
-28.1384 120.483 -28.2912 120.496 -28.4017 120.518 cv
-28.4306 120.524 -28.4564 120.531 -28.4785 120.538 cv
-31.0199 120.538 li
-31.0199 120.538 li
-34.0576 120.538 li
-34.2138 120.538 -34.3667 120.551 -34.4771 120.574 cv
-34.5063 120.58 -34.5321 120.586 -34.5543 120.594 cv
-37.0951 120.594 li
-37.0952 120.594 -37.0952 120.594 -37.0952 120.594 cv
-37.0952 120.594 -37.0953 120.594 -37.0953 120.594 cv
-39.6361 120.594 li
-39.6584 120.586 -39.6842 120.58 -39.7133 120.574 cv
-39.8238 120.551 -39.9766 120.538 -40.133 120.538 cv
-42.6743 120.538 li
-42.6965 120.531 -42.7222 120.524 -42.7512 120.518 cv
-42.8615 120.496 -43.0143 120.483 -43.1705 120.483 cv
-46.2085 120.483 li
-46.3647 120.483 -46.5175 120.496 -46.628 120.518 cv
-46.657 120.524 -46.6827 120.531 -46.7048 120.538 cv
-49.246 120.538 li
-49.4024 120.538 -49.555 120.551 -49.6657 120.574 cv
-49.6948 120.58 -49.7207 120.586 -49.7429 120.594 cv
-51.787 120.594 li
-51.8093 120.586 -51.8352 120.58 -51.8644 120.574 cv
-51.9749 120.551 -52.1277 120.538 -52.2839 120.538 cv
-55.3214 120.538 li
-55.4778 120.538 -55.6305 120.551 -55.7411 120.574 cv
-55.7703 120.58 -55.7961 120.586 -55.8184 120.594 cv
-58.3591 120.594 li
-58.3592 120.594 -58.3592 120.594 -58.3592 120.594 cv
-58.3593 120.594 -58.3593 120.594 -58.3593 120.594 cv
-61.3969 120.594 li
-61.3969 120.594 li
-64.4346 120.594 li
-64.4346 120.594 li
-67.4723 120.594 li
-67.4723 120.594 li
-70.51 120.594 li
-70.51 120.594 -70.5101 120.594 -70.5101 120.594 cv
-70.5101 120.594 -70.5102 120.594 -70.5102 120.594 cv
-73.5479 120.594 li
-73.5479 120.594 li
-76.5854 120.594 li
-76.5854 120.594 li
-79.6234 120.594 li
-79.6234 120.594 li
-82.6609 120.594 li
-82.6609 120.594 li
-85.6986 120.594 li
-85.6986 120.594 li
-88.7363 120.594 li
-88.7363 120.594 li
-91.774 120.594 li
-91.774 120.594 li
-94.8117 120.594 li
-94.8117 120.594 li
-97.8495 120.594 li
-98.0057 120.594 -98.1585 120.607 -98.269 120.629 cv
-98.3795 120.652 -98.4428 120.683 -98.4428 120.716 cv
-98.4428 120.716 li
-98.4428 120.716 li
-98.4428 120.748 -98.3795 120.779 -98.269 120.802 cv
-98.1585 120.825 -98.0057 120.838 -97.8495 120.838 cv
-94.8117 120.838 li
-94.8117 120.838 li
-91.774 120.838 li
-91.774 120.838 li
-88.7363 120.838 li
-88.7363 120.838 li
-85.6986 120.838 li
-85.6986 120.838 li
-82.6609 120.838 li
-82.6609 120.838 li
-79.6234 120.838 li
-79.6234 120.838 li
-76.5854 120.838 li
-76.5854 120.838 li
-73.5479 120.838 li
-73.5479 120.838 li
-70.5102 120.838 li
-70.5102 120.838 -70.5101 120.838 -70.5101 120.838 cv
-70.5101 120.838 -70.51 120.838 -70.51 120.838 cv
-67.4723 120.838 li
-67.4723 120.838 li
-64.4346 120.838 li
-64.4346 120.838 li
-61.3971 120.838 li
-61.3971 120.838 li
-58.3593 120.838 li
-58.3593 120.838 -58.3593 120.838 -58.3592 120.838 cv
-58.3592 120.838 -58.3592 120.838 -58.3591 120.838 cv
-55.3214 120.838 li
-55.3214 120.838 li
-52.2839 120.838 li
-52.2839 120.838 li
-49.246 120.838 li
-49.246 120.838 li
-46.2085 120.838 li
-46.2085 120.838 li
-43.1705 120.838 li
-43.1705 120.838 li
-40.133 120.838 li
-40.133 120.838 li
-37.0953 120.838 li
-37.0953 120.838 -37.0952 120.838 -37.0952 120.838 cv
-37.0952 120.838 -37.0952 120.838 -37.0951 120.838 cv
-34.0576 120.838 li
-34.0576 120.838 li
-31.0199 120.838 li
-31.0199 120.838 li
-27.9822 120.838 li
-27.9822 120.838 li
-24.9444 120.838 li
-24.9444 120.838 li
-21.9067 120.838 li
-21.9067 120.838 li
-18.869 120.838 li
-18.869 120.838 li
-15.8313 120.838 li
-15.8313 120.838 li
-12.7936 120.838 li
-12.7936 120.838 li
-9.75586 120.838 li
-9.75586 120.838 li
-6.71814 120.838 li
-6.71814 120.838 li
-3.68044 120.838 li
-3.68044 120.838 li
-.642715 120.838 li
-.642715 120.838 li
2.395 120.838 li
2.395 120.838 li
5.43272 120.838 li
5.43272 120.838 li
8.47044 120.838 li
8.47044 120.838 li
11.5082 120.838 li
11.5082 120.838 li
14.5459 120.838 li
14.5459 120.838 li
17.5836 120.838 li
17.5836 120.838 li
20.6213 120.838 li
20.6213 120.838 li
23.659 120.838 li
23.659 120.838 li
26.6967 120.838 li
26.6967 120.838 li
29.7345 120.838 li
29.7345 120.838 li
32.7722 120.838 li
32.7722 120.838 li
35.8099 120.838 li
35.8099 120.838 li
38.8476 120.838 li
38.8476 120.838 li
41.8853 120.838 li
41.8853 120.838 li
44.923 120.838 li
44.923 120.838 li
47.9608 120.838 li
47.9608 120.838 li
50.9985 120.838 li
50.9985 120.838 li
54.0362 120.838 li
54.0362 120.838 li
57.0739 120.838 li
57.0739 120.838 li
60.1116 120.838 li
60.1116 120.838 li
63.1494 120.838 li
63.1494 120.838 li
66.1871 120.838 li
66.1871 120.838 li
69.2248 120.838 li
69.2248 120.838 li
72.2625 120.838 li
72.2625 120.838 li
75.3002 120.838 li
75.3002 120.838 li
78.3379 120.838 li
78.3379 120.838 li
81.3756 120.838 li
81.3756 120.838 li
84.4134 120.838 li
84.4134 120.838 li
87.4511 120.838 li
87.4511 120.838 li
90.4888 120.838 li
90.4888 120.838 li
93.5265 120.838 li
93.5265 120.838 li
96.5642 120.838 li
96.5642 120.838 li
99.602 120.838 li
99.602 120.838 li
102.64 120.838 li
102.64 120.838 li
105.677 120.838 li
105.677 120.838 li
108.715 120.838 li
108.715 120.838 li
111.753 120.838 li
111.753 120.838 li
114.791 120.838 li
114.791 120.838 li
117.828 120.838 li
117.828 120.838 li
120.866 120.838 li
120.866 120.838 li
123.904 120.838 li
123.904 120.838 li
126.941 120.838 li
126.941 120.838 li
129.979 120.838 li
129.979 120.838 li
133.017 120.838 li
133.017 120.838 li
136.055 120.838 li
136.055 120.838 li
139.092 120.838 li
139.092 120.838 li
142.13 120.838 li
142.13 120.838 li
145.168 120.838 li
145.168 120.838 li
148.205 120.838 li
148.205 120.838 li
151.243 120.838 li
151.243 120.838 li
154.281 120.838 li
154.281 120.838 li
157.319 120.838 li
157.319 120.838 li
160.356 120.838 li
160.356 120.838 li
163.394 120.838 li
163.394 120.838 li
166.432 120.838 li
166.432 120.838 li
169.469 120.838 li
169.469 120.838 li
172.507 120.838 li
172.507 120.838 li
175.545 120.838 li
175.545 120.838 li
178.583 120.838 li
178.583 120.838 li
181.62 120.838 li
181.62 120.838 li
184.658 120.838 li
184.658 120.838 li
187.696 120.838 li
187.696 120.838 li
190.733 120.838 li
190.733 120.838 li
193.771 120.838 li
193.771 120.838 li
196.809 120.838 li
196.809 120.838 li
199.847 120.838 li
199.847 120.838 li
202.884 120.838 li
202.884 120.838 li
205.922 120.838 li
205.922 120.838 li
208.96 120.838 li
208.96 120.838 li
211.997 120.838 li
211.997 120.838 li
215.035 120.838 li
215.035 120.838 li
218.073 120.838 li
218.073 120.838 li
221.111 120.838 li
221.111 120.838 li
224.148 120.838 li
224.148 120.838 li
227.186 120.838 li
227.186 120.838 li
230.224 120.838 li
230.224 120.838 li
233.262 120.838 li
233.262 120.838 li
236.299 120.838 li
236.299 120.838 li
239.337 120.838 li
239.337 120.838 li
242.375 120.838 li
242.375 120.838 li
245.412 120.838 li
245.412 120.838 li
248.45 120.838 li
248.45 120.838 li
251.488 120.838 li
251.488 120.838 li
254.526 120.838 li
254.526 120.838 li
257.563 120.838 li
257.563 120.838 li
260.601 120.838 li
260.601 120.838 li
263.639 120.838 li
263.639 120.838 li
266.676 120.838 li
266.676 120.838 li
269.714 120.838 li
269.714 120.838 li
272.752 120.838 li
272.752 120.838 li
275.79 120.838 li
275.79 120.838 li
278.827 120.838 li
278.827 120.838 li
281.865 120.838 li
281.865 120.838 li
284.903 120.838 li
284.903 120.838 li
287.94 120.838 li
287.94 120.838 li
290.978 120.838 li
290.978 120.838 li
294.016 120.838 li
294.016 120.838 li
297.054 120.838 li
297.054 120.838 li
300.091 120.838 li
300.091 120.838 li
303.129 120.838 li
303.129 120.838 li
306.167 120.838 li
306.167 120.838 li
309.204 120.838 li
309.204 120.838 li
312.242 120.838 li
312.242 120.838 li
315.28 120.838 li
315.28 120.838 li
318.317 120.838 li
318.317 120.838 li
321.355 120.838 li
321.355 120.838 li
324.393 120.838 li
324.393 120.838 li
327.431 120.838 li
327.431 120.838 li
330.468 120.838 li
330.468 120.838 li
333.506 120.838 li
333.506 120.838 li
336.544 120.838 li
336.544 120.838 li
339.582 120.838 li
339.582 120.838 li
342.619 120.838 li
342.619 120.838 li
345.657 120.838 li
345.657 120.838 li
348.695 120.838 li
348.695 120.838 li
351.732 120.838 li
351.732 120.838 li
354.77 120.838 li
354.77 120.838 li
357.808 120.838 li
357.808 120.838 li
360.846 120.838 li
360.846 120.838 li
363.883 120.838 li
363.883 120.838 li
366.921 120.838 li
366.921 120.838 li
369.959 120.838 li
369.959 120.838 li
372.996 120.838 li
372.996 120.838 li
376.034 120.838 li
376.034 120.838 li
379.072 120.838 li
379.072 120.838 li
382.109 120.838 li
382.109 120.838 li
385.147 120.838 li
385.147 120.838 li
388.185 120.838 li
388.185 120.838 li
391.223 120.838 li
391.223 120.838 li
394.26 120.838 li
394.26 120.838 li
397.298 120.838 li
397.298 120.838 li
400.336 120.838 li
400.336 120.838 li
403.373 120.838 li
403.373 120.838 li
406.411 120.838 li
406.411 120.838 li
409.449 120.838 li
409.449 120.838 li
412.487 120.838 li
412.487 120.838 li
415.525 120.838 li
415.525 120.838 li
418.562 120.838 li
418.562 120.838 li
421.6 120.838 li
421.6 120.838 li
424.638 120.838 li
424.638 120.838 li
427.675 120.838 li
427.675 120.838 li
430.713 120.838 li
430.713 120.838 li
433.751 120.838 li
433.751 120.838 li
436.788 120.838 li
436.788 120.838 li
439.826 120.838 li
439.826 120.838 li
442.864 120.838 li
442.864 120.838 li
445.901 120.838 li
445.901 120.838 li
448.939 120.838 li
448.939 120.838 li
451.977 120.838 li
451.977 120.838 li
455.015 120.838 li
455.015 120.838 li
458.052 120.838 li
458.052 120.838 li
461.09 120.838 li
461.09 120.838 li
464.128 120.838 li
464.128 120.838 li
467.166 120.838 li
467.166 120.838 li
470.203 120.838 li
470.203 120.838 li
473.241 120.838 li
473.241 120.838 li
476.279 120.838 li
476.279 120.838 li
479.316 120.838 li
479.316 120.838 li
482.354 120.838 li
482.354 120.838 li
485.392 120.838 li
485.392 120.838 li
488.43 120.838 li
488.43 120.838 li
491.467 120.838 li
491.467 120.838 li
494.505 120.838 li
494.505 120.838 li
497.543 120.838 li
497.543 120.838 li
500.581 120.838 li
500.581 120.838 li
503.618 120.838 li
503.618 120.838 li
506.656 120.838 li
false sop
0 0 0 0 cmyk
f
gsave
-100 121 mo
511 121 li
511 8.00003 li
-100 8.00003 li
-100 121 li
clp
gsave
-100.065 121.106 mo
512.225 121.106 li
512.225 8.41535 li
-100.065 8.41535 li
-100.065 121.106 li
clp
-94.8117 120.838 mo
-97.8495 120.838 li
-98.0057 120.838 -98.1585 120.825 -98.269 120.802 cv
-98.3795 120.779 -98.4428 120.748 -98.4428 120.716 cv
-98.4428 120.716 li
-98.4428 120.716 li
-98.4428 120.683 -98.3795 120.652 -98.269 120.629 cv
-98.1585 120.607 -98.0057 120.594 -97.8495 120.594 cv
-97.8495 120.594 li
-94.8117 120.594 li
-94.8117 120.594 li
-94.968 120.594 -95.1208 120.607 -95.2313 120.629 cv
-95.3417 120.652 -95.4051 120.683 -95.4051 120.716 cv
-95.4051 120.716 li
-95.4051 120.716 li
-95.4051 120.748 -95.3417 120.779 -95.2313 120.802 cv
-95.1208 120.825 -94.968 120.838 -94.8117 120.838 cv
f
-91.774 120.838 mo
-94.8117 120.838 li
-94.8117 120.838 li
-94.968 120.838 -95.1208 120.825 -95.2313 120.802 cv
-95.3417 120.779 -95.4051 120.748 -95.4051 120.716 cv
-95.4051 120.716 li
-95.4051 120.716 li
-95.4051 120.683 -95.3417 120.652 -95.2313 120.629 cv
-95.1208 120.607 -94.968 120.594 -94.8117 120.594 cv
-94.8117 120.594 li
-91.774 120.594 li
-91.774 120.594 li
-91.9302 120.594 -92.0831 120.607 -92.1935 120.629 cv
-92.304 120.652 -92.3673 120.683 -92.3673 120.716 cv
-92.3673 120.716 li
-92.3673 120.716 li
-92.3673 120.748 -92.304 120.779 -92.1935 120.802 cv
-92.0831 120.825 -91.9302 120.838 -91.774 120.838 cv
f
-88.7363 120.838 mo
-91.774 120.838 li
-91.774 120.838 li
-91.9302 120.838 -92.0831 120.825 -92.1935 120.802 cv
-92.304 120.779 -92.3673 120.748 -92.3673 120.716 cv
-92.3673 120.716 li
-92.3673 120.716 li
-92.3673 120.683 -92.304 120.652 -92.1935 120.629 cv
-92.0831 120.607 -91.9302 120.594 -91.774 120.594 cv
-91.774 120.594 li
-88.7363 120.594 li
-88.7363 120.594 li
-88.8925 120.594 -89.0454 120.607 -89.1558 120.629 cv
-89.2663 120.652 -89.3296 120.683 -89.3296 120.716 cv
-89.3296 120.716 li
-89.3296 120.716 li
-89.3296 120.748 -89.2663 120.779 -89.1558 120.802 cv
-89.0454 120.825 -88.8925 120.838 -88.7363 120.838 cv
f
-85.6986 120.838 mo
-88.7363 120.838 li
-88.7363 120.838 li
-88.8925 120.838 -89.0454 120.825 -89.1558 120.802 cv
-89.2663 120.779 -89.3296 120.748 -89.3296 120.716 cv
-89.3296 120.716 li
-89.3296 120.716 li
-89.3296 120.683 -89.2663 120.652 -89.1558 120.629 cv
-89.0454 120.607 -88.8925 120.594 -88.7363 120.594 cv
-88.7363 120.594 li
-85.6986 120.594 li
-85.6986 120.594 li
-85.855 120.594 -86.0076 120.607 -86.1183 120.629 cv
-86.2286 120.652 -86.2919 120.683 -86.2919 120.716 cv
-86.2919 120.716 li
-86.2919 120.716 li
-86.2919 120.748 -86.2288 120.779 -86.1183 120.802 cv
-86.0078 120.825 -85.855 120.838 -85.6986 120.838 cv
f
-82.6609 120.838 mo
-85.6986 120.838 li
-85.6986 120.838 li
-85.855 120.838 -86.0078 120.825 -86.1183 120.802 cv
-86.2288 120.779 -86.2919 120.748 -86.2919 120.716 cv
-86.2919 120.716 li
-86.2919 120.716 li
-86.2919 120.683 -86.2286 120.652 -86.1183 120.629 cv
-86.0076 120.607 -85.855 120.594 -85.6986 120.594 cv
-85.6986 120.594 li
-82.6609 120.594 li
-82.6609 120.594 li
-82.8173 120.594 -82.9699 120.607 -83.0804 120.629 cv
-83.1911 120.652 -83.2542 120.683 -83.2542 120.716 cv
-83.2542 120.716 li
-83.2542 120.716 li
-83.2542 120.748 -83.1911 120.779 -83.0804 120.802 cv
-82.9699 120.825 -82.8173 120.838 -82.6609 120.838 cv
f
-79.6234 120.838 mo
-82.6609 120.838 li
-82.6609 120.838 li
-82.8173 120.838 -82.9699 120.825 -83.0804 120.802 cv
-83.1911 120.779 -83.2542 120.748 -83.2542 120.716 cv
-83.2542 120.716 li
-83.2542 120.716 li
-83.2542 120.683 -83.1911 120.652 -83.0804 120.629 cv
-82.9699 120.607 -82.8173 120.594 -82.6609 120.594 cv
-82.6609 120.594 li
-79.6234 120.594 li
-79.6234 120.594 li
-79.7796 120.594 -79.9322 120.607 -80.0429 120.629 cv
-80.1534 120.652 -80.2165 120.683 -80.2165 120.716 cv
-80.2165 120.716 li
-80.2165 120.716 li
-80.2165 120.748 -80.1534 120.779 -80.0429 120.802 cv
-79.9324 120.825 -79.7796 120.838 -79.6234 120.838 cv
f
-76.5854 120.838 mo
-79.6234 120.838 li
-79.6234 120.838 li
-79.7796 120.838 -79.9324 120.825 -80.0429 120.802 cv
-80.1534 120.779 -80.2165 120.748 -80.2165 120.716 cv
-80.2165 120.716 li
-80.2165 120.716 li
-80.2165 120.683 -80.1534 120.652 -80.0429 120.629 cv
-79.9322 120.607 -79.7796 120.594 -79.6234 120.594 cv
-79.6234 120.594 li
-76.5854 120.594 li
-76.5854 120.594 li
-76.7419 120.594 -76.8945 120.607 -77.0052 120.629 cv
-77.1156 120.652 -77.1788 120.683 -77.1788 120.716 cv
-77.1788 120.716 li
-77.1788 120.716 li
-77.1788 120.748 -77.1156 120.779 -77.0052 120.802 cv
-76.8947 120.825 -76.7419 120.838 -76.5854 120.838 cv
f
-73.5479 120.838 mo
-76.5854 120.838 li
-76.5854 120.838 li
-76.7419 120.838 -76.8947 120.825 -77.0052 120.802 cv
-77.1156 120.779 -77.1788 120.748 -77.1788 120.716 cv
-77.1788 120.716 li
-77.1788 120.716 li
-77.1788 120.683 -77.1156 120.652 -77.0052 120.629 cv
-76.8945 120.607 -76.7419 120.594 -76.5854 120.594 cv
-76.5854 120.594 li
-73.5479 120.594 li
-73.5479 120.594 li
-73.7041 120.594 -73.857 120.607 -73.9675 120.629 cv
-74.0779 120.652 -74.1411 120.683 -74.1411 120.716 cv
-74.1411 120.716 li
-74.1411 120.716 li
-74.1411 120.748 -74.0779 120.779 -73.9675 120.802 cv
-73.857 120.825 -73.7041 120.838 -73.5479 120.838 cv
f
-70.5102 120.838 mo
-73.5479 120.838 li
-73.5479 120.838 li
-73.7041 120.838 -73.857 120.825 -73.9675 120.802 cv
-74.0779 120.779 -74.1411 120.748 -74.1411 120.716 cv
-74.1411 120.716 li
-74.1411 120.716 li
-74.1411 120.683 -74.0779 120.652 -73.9675 120.629 cv
-73.857 120.607 -73.7041 120.594 -73.5479 120.594 cv
-73.5479 120.594 li
-70.5102 120.594 li
-70.5102 120.594 -70.5101 120.594 -70.5101 120.594 cv
-70.6665 120.594 -70.8191 120.607 -70.9297 120.629 cv
-71.0402 120.652 -71.1033 120.683 -71.1033 120.716 cv
-71.1033 120.716 li
-71.1033 120.716 li
-71.1033 120.748 -71.0402 120.779 -70.9297 120.802 cv
-70.8193 120.825 -70.6665 120.838 -70.5101 120.838 cv
-70.5101 120.838 -70.5102 120.838 -70.5102 120.838 cv
f
-67.4723 120.838 mo
-70.51 120.838 li
-70.51 120.838 -70.5101 120.838 -70.5101 120.838 cv
-70.6665 120.838 -70.8193 120.825 -70.9297 120.802 cv
-71.0402 120.779 -71.1033 120.748 -71.1033 120.716 cv
-71.1033 120.716 li
-71.1033 120.716 li
-71.1033 120.683 -71.0402 120.652 -70.9297 120.629 cv
-70.8191 120.607 -70.6665 120.594 -70.5101 120.594 cv
-70.5101 120.594 -70.51 120.594 -70.51 120.594 cv
-70.51 120.594 li
-67.4723 120.594 li
-67.4723 120.594 li
-67.6287 120.594 -67.7815 120.607 -67.892 120.629 cv
-68.0025 120.652 -68.0656 120.683 -68.0656 120.716 cv
-68.0656 120.716 li
-68.0656 120.716 li
-68.0656 120.748 -68.0025 120.779 -67.892 120.802 cv
-67.7815 120.825 -67.6287 120.838 -67.4723 120.838 cv
f
-64.4346 120.838 mo
-67.4723 120.838 li
-67.4723 120.838 li
-67.6287 120.838 -67.7815 120.825 -67.892 120.802 cv
-68.0025 120.779 -68.0656 120.748 -68.0656 120.716 cv
-68.0656 120.716 li
-68.0656 120.716 li
-68.0656 120.683 -68.0025 120.652 -67.892 120.629 cv
-67.7815 120.607 -67.6287 120.594 -67.4723 120.594 cv
-67.4723 120.594 li
-64.4346 120.594 li
-64.4346 120.594 li
-64.591 120.594 -64.7438 120.607 -64.8543 120.629 cv
-64.9648 120.652 -65.0279 120.683 -65.0279 120.716 cv
-65.0279 120.716 li
-65.0279 120.716 li
-65.0279 120.748 -64.9648 120.779 -64.8543 120.802 cv
-64.7438 120.825 -64.591 120.838 -64.4346 120.838 cv
f
-61.3971 120.838 mo
-64.4346 120.838 li
-64.4346 120.838 li
-64.591 120.838 -64.7438 120.825 -64.8543 120.802 cv
-64.9648 120.779 -65.0279 120.748 -65.0279 120.716 cv
-65.0279 120.716 li
-65.0279 120.716 li
-65.0279 120.683 -64.9648 120.652 -64.8543 120.629 cv
-64.7438 120.607 -64.591 120.594 -64.4346 120.594 cv
-64.4346 120.594 li
-61.3969 120.594 li
-61.3969 120.594 li
-61.3971 120.594 li
-61.5533 120.594 -61.7061 120.607 -61.8166 120.629 cv
-61.927 120.652 -61.9902 120.683 -61.9902 120.716 cv
-61.9902 120.716 li
-61.9902 120.716 li
-61.9902 120.748 -61.927 120.779 -61.8166 120.802 cv
-61.7061 120.825 -61.5533 120.838 -61.3971 120.838 cv
f
-58.3593 120.838 mo
-61.3971 120.838 li
-61.3971 120.838 li
-61.5533 120.838 -61.7061 120.825 -61.8166 120.802 cv
-61.927 120.779 -61.9902 120.748 -61.9902 120.716 cv
-61.9902 120.716 li
-61.9902 120.716 li
-61.9902 120.683 -61.927 120.652 -61.8166 120.629 cv
-61.7061 120.607 -61.5533 120.594 -61.3971 120.594 cv
-61.3971 120.594 li
-61.3969 120.594 li
-58.3593 120.594 li
-58.3593 120.594 -58.3593 120.594 -58.3592 120.594 cv
-58.5156 120.594 -58.6682 120.607 -58.7789 120.629 cv
-58.8891 120.652 -58.9525 120.683 -58.9525 120.716 cv
-58.9525 120.716 li
-58.9525 120.716 li
-58.9525 120.748 -58.8893 120.779 -58.7789 120.802 cv
-58.6684 120.825 -58.5156 120.838 -58.3592 120.838 cv
-58.3593 120.838 -58.3593 120.838 -58.3593 120.838 cv
f
-55.3214 120.838 mo
-58.3591 120.838 li
-58.3592 120.838 -58.3592 120.838 -58.3592 120.838 cv
-58.5156 120.838 -58.6684 120.825 -58.7789 120.802 cv
-58.8893 120.779 -58.9525 120.748 -58.9525 120.716 cv
-58.9525 120.716 li
-58.9525 120.716 li
-58.9525 120.683 -58.8891 120.652 -58.7789 120.629 cv
-58.6682 120.607 -58.5156 120.594 -58.3592 120.594 cv
-58.3592 120.594 -58.3592 120.594 -58.3591 120.594 cv
-58.3591 120.594 li
-55.8184 120.594 li
-55.8805 120.613 -55.9147 120.637 -55.9147 120.66 cv
-55.9147 120.716 li
-55.3214 120.716 li
-55.9147 120.716 li
-55.9147 120.748 -55.8516 120.779 -55.7411 120.802 cv
-55.6307 120.825 -55.4778 120.838 -55.3214 120.838 cv
f
-52.2839 120.838 mo
-55.3214 120.838 li
-55.3214 120.838 li
-55.4778 120.838 -55.6307 120.825 -55.7411 120.802 cv
-55.8516 120.779 -55.9147 120.748 -55.9147 120.716 cv
-55.3214 120.716 li
-55.9147 120.716 li
-55.9147 120.66 li
-55.9147 120.637 -55.8805 120.613 -55.8184 120.594 cv
-55.7961 120.586 -55.7703 120.58 -55.7411 120.574 cv
-55.6305 120.551 -55.4778 120.538 -55.3214 120.538 cv
-52.2839 120.538 li
-52.1277 120.538 -51.9749 120.551 -51.8644 120.574 cv
-51.8352 120.58 -51.8093 120.586 -51.787 120.594 cv
-52.2839 120.594 li
-52.4401 120.594 -52.593 120.607 -52.7034 120.629 cv
-52.8139 120.652 -52.877 120.683 -52.877 120.716 cv
-52.877 120.716 li
-52.877 120.716 li
-52.877 120.748 -52.8139 120.779 -52.7034 120.802 cv
-52.593 120.825 -52.4401 120.838 -52.2839 120.838 cv
f
-49.246 120.838 mo
-52.2839 120.838 li
-52.2839 120.838 li
-52.4401 120.838 -52.593 120.825 -52.7034 120.802 cv
-52.8139 120.779 -52.877 120.748 -52.877 120.716 cv
-52.877 120.716 li
-52.877 120.716 li
-52.877 120.683 -52.8139 120.652 -52.7034 120.629 cv
-52.593 120.607 -52.4401 120.594 -52.2839 120.594 cv
-52.2839 120.594 li
-51.787 120.594 li
-49.7429 120.594 li
-49.8051 120.613 -49.8393 120.637 -49.8393 120.66 cv
-49.8393 120.716 li
-49.246 120.716 li
-49.8393 120.716 li
-49.8393 120.748 -49.7762 120.779 -49.6657 120.802 cv
-49.5552 120.825 -49.4024 120.838 -49.246 120.838 cv
f
-46.2085 120.838 mo
-49.246 120.838 li
-49.246 120.838 li
-49.4024 120.838 -49.5552 120.825 -49.6657 120.802 cv
-49.7762 120.779 -49.8393 120.748 -49.8393 120.716 cv
-49.246 120.716 li
-49.8393 120.716 li
-49.8393 120.66 li
-49.8393 120.637 -49.8051 120.613 -49.7429 120.594 cv
-49.7207 120.586 -49.6948 120.58 -49.6657 120.574 cv
-49.555 120.551 -49.4024 120.538 -49.246 120.538 cv
-46.7048 120.538 li
-46.7672 120.558 -46.8016 120.581 -46.8016 120.605 cv
-46.8016 120.716 li
-46.2085 120.716 li
-46.8016 120.716 li
-46.8016 120.748 -46.7385 120.779 -46.628 120.802 cv
-46.5175 120.825 -46.3647 120.838 -46.2085 120.838 cv
f
-43.1705 120.838 mo
-46.2085 120.838 li
-46.2085 120.838 li
-46.3647 120.838 -46.5175 120.825 -46.628 120.802 cv
-46.7385 120.779 -46.8016 120.748 -46.8016 120.716 cv
-46.2085 120.716 li
-46.8016 120.716 li
-46.8016 120.605 li
-46.8016 120.581 -46.7672 120.558 -46.7048 120.538 cv
-46.6827 120.531 -46.657 120.524 -46.628 120.518 cv
-46.5175 120.496 -46.3647 120.483 -46.2085 120.483 cv
-43.1705 120.483 li
-43.0143 120.483 -42.8615 120.496 -42.7512 120.518 cv
-42.7222 120.524 -42.6965 120.531 -42.6743 120.538 cv
-43.1705 120.538 li
-43.327 120.538 -43.4796 120.551 -43.5903 120.574 cv
-43.7007 120.597 -43.7639 120.628 -43.7639 120.66 cv
-43.7639 120.716 li
-43.1705 120.716 li
-43.7639 120.716 li
-43.7639 120.748 -43.7007 120.779 -43.5903 120.802 cv
-43.4798 120.825 -43.327 120.838 -43.1705 120.838 cv
f
-40.133 120.838 mo
-43.1705 120.838 li
-43.1705 120.838 li
-43.327 120.838 -43.4798 120.825 -43.5903 120.802 cv
-43.7007 120.779 -43.7639 120.748 -43.7639 120.716 cv
-43.1705 120.716 li
-43.7639 120.716 li
-43.7639 120.66 li
-43.7639 120.628 -43.7007 120.597 -43.5903 120.574 cv
-43.4796 120.551 -43.327 120.538 -43.1705 120.538 cv
-42.6743 120.538 li
-40.133 120.538 li
-39.9766 120.538 -39.8238 120.551 -39.7133 120.574 cv
-39.6842 120.58 -39.6584 120.586 -39.6361 120.594 cv
-40.133 120.594 li
-40.2893 120.594 -40.4421 120.607 -40.5526 120.629 cv
-40.663 120.652 -40.7262 120.683 -40.7262 120.716 cv
-40.7262 120.716 li
-40.7262 120.716 li
-40.7262 120.748 -40.663 120.779 -40.5526 120.802 cv
-40.4421 120.825 -40.2893 120.838 -40.133 120.838 cv
f
-37.0953 120.838 mo
-40.133 120.838 li
-40.133 120.838 li
-40.2893 120.838 -40.4421 120.825 -40.5526 120.802 cv
-40.663 120.779 -40.7262 120.748 -40.7262 120.716 cv
-40.7262 120.716 li
-40.7262 120.716 li
-40.7262 120.683 -40.663 120.652 -40.5526 120.629 cv
-40.4421 120.607 -40.2893 120.594 -40.133 120.594 cv
-40.133 120.594 li
-39.6361 120.594 li
-37.0953 120.594 li
-37.0953 120.594 -37.0952 120.594 -37.0952 120.594 cv
-37.2516 120.594 -37.4042 120.607 -37.5148 120.629 cv
-37.6253 120.652 -37.6884 120.683 -37.6884 120.716 cv
-37.6884 120.716 li
-37.6884 120.716 li
-37.6884 120.748 -37.6253 120.779 -37.5148 120.802 cv
-37.4044 120.825 -37.2516 120.838 -37.0952 120.838 cv
-37.0952 120.838 -37.0953 120.838 -37.0953 120.838 cv
f
-34.0576 120.838 mo
-37.0951 120.838 li
-37.0952 120.838 -37.0952 120.838 -37.0952 120.838 cv
-37.2516 120.838 -37.4044 120.825 -37.5148 120.802 cv
-37.6253 120.779 -37.6884 120.748 -37.6884 120.716 cv
-37.6884 120.716 li
-37.6884 120.716 li
-37.6884 120.683 -37.6253 120.652 -37.5148 120.629 cv
-37.4042 120.607 -37.2516 120.594 -37.0952 120.594 cv
-37.0952 120.594 -37.0952 120.594 -37.0951 120.594 cv
-37.0951 120.594 li
-34.5543 120.594 li
-34.6165 120.613 -34.6507 120.637 -34.6507 120.66 cv
-34.6507 120.716 li
-34.0576 120.716 li
-34.6507 120.716 li
-34.6507 120.748 -34.5876 120.779 -34.4771 120.802 cv
-34.3667 120.825 -34.2138 120.838 -34.0576 120.838 cv
f
-31.0199 120.838 mo
-34.0576 120.838 li
-34.0576 120.838 li
-34.2138 120.838 -34.3667 120.825 -34.4771 120.802 cv
-34.5876 120.779 -34.6507 120.748 -34.6507 120.716 cv
-34.0576 120.716 li
-34.6507 120.716 li
-34.6507 120.66 li
-34.6507 120.637 -34.6165 120.613 -34.5543 120.594 cv
-34.5321 120.586 -34.5063 120.58 -34.4771 120.574 cv
-34.3667 120.551 -34.2138 120.538 -34.0576 120.538 cv
-31.0199 120.538 li
-31.0199 120.538 li
-31.1761 120.538 -31.3289 120.551 -31.4394 120.574 cv
-31.5499 120.597 -31.6132 120.628 -31.6132 120.66 cv
-31.6132 120.716 li
-31.0199 120.716 li
-31.6132 120.716 li
-31.6132 120.748 -31.5499 120.779 -31.4394 120.802 cv
-31.3289 120.825 -31.1761 120.838 -31.0199 120.838 cv
f
-27.9822 120.838 mo
-31.0199 120.838 li
-31.0199 120.838 li
-31.1761 120.838 -31.3289 120.825 -31.4394 120.802 cv
-31.5499 120.779 -31.6132 120.748 -31.6132 120.716 cv
-31.0199 120.716 li
-31.6132 120.716 li
-31.6132 120.66 li
-31.6132 120.628 -31.5499 120.597 -31.4394 120.574 cv
-31.3289 120.551 -31.1761 120.538 -31.0199 120.538 cv
-31.0199 120.538 li
-28.4785 120.538 li
-28.5409 120.558 -28.5753 120.581 -28.5753 120.605 cv
-28.5753 120.716 li
-27.9822 120.716 li
-28.5753 120.716 li
-28.5753 120.748 -28.5122 120.779 -28.4017 120.802 cv
-28.2912 120.825 -28.1384 120.838 -27.9822 120.838 cv
f
-24.9444 120.838 mo
-27.9822 120.838 li
-27.9822 120.838 li
-28.1384 120.838 -28.2912 120.825 -28.4017 120.802 cv
-28.5122 120.779 -28.5753 120.748 -28.5753 120.716 cv
-27.9822 120.716 li
-28.5753 120.716 li
-28.5753 120.605 li
-28.5753 120.581 -28.5409 120.558 -28.4785 120.538 cv
-28.4564 120.531 -28.4306 120.524 -28.4017 120.518 cv
-28.2912 120.496 -28.1384 120.483 -27.9822 120.483 cv
-24.9444 120.483 li
-24.7882 120.483 -24.6354 120.496 -24.5249 120.518 cv
-24.4275 120.538 -24.3668 120.565 -24.3538 120.594 cv
-24.9444 120.594 li
-25.1007 120.594 -25.2535 120.607 -25.364 120.629 cv
-25.4744 120.652 -25.5376 120.683 -25.5376 120.716 cv
-25.5376 120.716 li
-25.5376 120.716 li
-25.5376 120.748 -25.4744 120.779 -25.364 120.802 cv
-25.2535 120.825 -25.1007 120.838 -24.9444 120.838 cv
f
-21.9067 120.838 mo
-24.9444 120.838 li
-24.9444 120.838 li
-25.1007 120.838 -25.2535 120.825 -25.364 120.802 cv
-25.4744 120.779 -25.5376 120.748 -25.5376 120.716 cv
-25.5376 120.716 li
-25.5376 120.716 li
-25.5376 120.683 -25.4744 120.652 -25.364 120.629 cv
-25.2535 120.607 -25.1007 120.594 -24.9444 120.594 cv
-24.9444 120.594 li
-24.3538 120.594 li
-22.4035 120.594 li
-22.4656 120.613 -22.4998 120.637 -22.4998 120.66 cv
-22.4998 120.716 li
-21.9067 120.716 li
-22.4998 120.716 li
-22.4998 120.748 -22.4367 120.779 -22.3262 120.802 cv
-22.2158 120.825 -22.063 120.838 -21.9067 120.838 cv
f
-18.869 120.838 mo
-21.9067 120.838 li
-21.9067 120.838 li
-22.063 120.838 -22.2158 120.825 -22.3262 120.802 cv
-22.4367 120.779 -22.4998 120.748 -22.4998 120.716 cv
-21.9067 120.716 li
-22.4998 120.716 li
-22.4998 120.66 li
-22.4998 120.637 -22.4656 120.613 -22.4035 120.594 cv
-22.3812 120.586 -22.3554 120.58 -22.3262 120.574 cv
-22.2156 120.551 -22.063 120.538 -21.9067 120.538 cv
-18.869 120.538 li
-18.7128 120.538 -18.56 120.551 -18.4495 120.574 cv
-18.4203 120.58 -18.3944 120.586 -18.3722 120.594 cv
-18.869 120.594 li
-19.0252 120.594 -19.1781 120.607 -19.2885 120.629 cv
-19.399 120.652 -19.4621 120.683 -19.4621 120.716 cv
-19.4621 120.716 li
-19.4621 120.716 li
-19.4621 120.748 -19.399 120.779 -19.2885 120.802 cv
-19.1781 120.825 -19.0252 120.838 -18.869 120.838 cv
f
-15.8313 120.838 mo
-18.869 120.838 li
-18.869 120.838 li
-19.0252 120.838 -19.1781 120.825 -19.2885 120.802 cv
-19.399 120.779 -19.4621 120.748 -19.4621 120.716 cv
-19.4621 120.716 li
-19.4621 120.716 li
-19.4621 120.683 -19.399 120.652 -19.2885 120.629 cv
-19.1781 120.607 -19.0252 120.594 -18.869 120.594 cv
-18.869 120.594 li
-18.3722 120.594 li
-15.8313 120.594 li
-15.8313 120.594 li
-15.9875 120.594 -16.1404 120.607 -16.2508 120.629 cv
-16.3613 120.652 -16.4244 120.683 -16.4244 120.716 cv
-16.4244 120.716 li
-16.4244 120.716 li
-16.4244 120.748 -16.3613 120.779 -16.2508 120.802 cv
-16.1404 120.825 -15.9875 120.838 -15.8313 120.838 cv
f
-12.7936 120.838 mo
-15.8313 120.838 li
-15.8313 120.838 li
-15.9875 120.838 -16.1404 120.825 -16.2508 120.802 cv
-16.3613 120.779 -16.4244 120.748 -16.4244 120.716 cv
-16.4244 120.716 li
-16.4244 120.716 li
-16.4244 120.683 -16.3613 120.652 -16.2508 120.629 cv
-16.1404 120.607 -15.9875 120.594 -15.8313 120.594 cv
-15.8313 120.594 li
-13.3842 120.594 li
-13.386 120.597 -13.3869 120.601 -13.3869 120.605 cv
-13.3869 120.716 li
-12.7936 120.716 li
-13.3869 120.716 li
-13.3869 120.748 -13.3236 120.779 -13.2131 120.802 cv
-13.1026 120.825 -12.9498 120.838 -12.7936 120.838 cv
f
-9.75586 120.838 mo
-12.7936 120.838 li
-12.7936 120.838 li
-12.9498 120.838 -13.1026 120.825 -13.2131 120.802 cv
-13.3236 120.779 -13.3869 120.748 -13.3869 120.716 cv
-12.7936 120.716 li
-13.3869 120.716 li
-13.3869 120.605 li
-13.3869 120.601 -13.386 120.597 -13.3842 120.594 cv
-13.3712 120.565 -13.3105 120.538 -13.2131 120.518 cv
-13.1026 120.496 -12.9498 120.483 -12.7936 120.483 cv
-9.75586 120.483 li
-9.75586 120.483 li
-9.91208 120.483 -10.0649 120.496 -10.1754 120.518 cv
-10.2859 120.541 -10.349 120.573 -10.349 120.605 cv
-10.349 120.716 li
-9.75586 120.716 li
-10.349 120.716 li
-10.349 120.748 -10.2859 120.779 -10.1754 120.802 cv
-10.0649 120.825 -9.91208 120.838 -9.75586 120.838 cv
f
-6.71814 120.838 mo
-9.75586 120.838 li
-9.75586 120.838 li
-9.91208 120.838 -10.0649 120.825 -10.1754 120.802 cv
-10.2859 120.779 -10.349 120.748 -10.349 120.716 cv
-9.75586 120.716 li
-10.349 120.716 li
-10.349 120.605 li
-10.349 120.573 -10.2859 120.541 -10.1754 120.518 cv
-10.0649 120.496 -9.91208 120.483 -9.75586 120.483 cv
-9.75586 120.483 li
-7.30862 120.483 li
-7.31036 120.486 -7.31126 120.49 -7.31126 120.494 cv
-7.31126 120.716 li
-6.71814 120.716 li
-7.31126 120.716 li
-7.31126 120.748 -7.24814 120.779 -7.13766 120.802 cv
-7.02719 120.825 -6.87437 120.838 -6.71814 120.838 cv
f
-3.68044 120.838 mo
-6.71814 120.838 li
-6.71814 120.838 li
-6.87437 120.838 -7.02719 120.825 -7.13766 120.802 cv
-7.24814 120.779 -7.31126 120.748 -7.31126 120.716 cv
-6.71814 120.716 li
-7.31126 120.716 li
-7.31126 120.494 li
-7.31126 120.49 -7.31036 120.486 -7.30862 120.483 cv
-7.29564 120.455 -7.23505 120.428 -7.13766 120.408 cv
-7.02719 120.385 -6.87437 120.372 -6.71814 120.372 cv
-3.68044 120.372 li
-3.5242 120.372 -3.37138 120.385 -3.26091 120.408 cv
-3.15044 120.431 -3.08711 120.462 -3.08711 120.494 cv
-3.08711 120.538 li
-3.68044 120.538 li
-3.83665 120.538 -3.98947 120.551 -4.09995 120.574 cv
-4.21042 120.597 -4.27374 120.628 -4.27374 120.66 cv
-4.27374 120.716 li
-3.68044 120.716 li
-4.27374 120.716 li
-4.27374 120.748 -4.21042 120.779 -4.09995 120.802 cv
-3.98947 120.825 -3.83665 120.838 -3.68044 120.838 cv
f
-.642715 120.838 mo
-3.68044 120.838 li
-3.68044 120.838 li
-3.83665 120.838 -3.98947 120.825 -4.09995 120.802 cv
-4.21042 120.779 -4.27374 120.748 -4.27374 120.716 cv
-3.68044 120.716 li
-4.27374 120.716 li
-4.27374 120.66 li
-4.27374 120.628 -4.21042 120.597 -4.09995 120.574 cv
-3.98947 120.551 -3.83665 120.538 -3.68044 120.538 cv
-3.08711 120.538 li
-1.23604 120.538 li
-1.23604 120.716 li
-.642715 120.716 li
-1.23604 120.716 li
-1.23604 120.748 -1.1727 120.779 -1.06223 120.802 cv
-.951752 120.825 -.798935 120.838 -.642715 120.838 cv
f
1.80168 120.594 mo
-.0493927 120.594 li
-.0493927 120.45 li
1.80168 120.45 li
1.80168 120.594 li
.155894 .125721 .129073 0 cmyk
f
2.395 120.838 mo
-.642715 120.838 li
-.642715 120.838 li
-.798935 120.838 -.951752 120.825 -1.06223 120.802 cv
-1.1727 120.779 -1.23604 120.748 -1.23604 120.716 cv
-.642715 120.716 li
-1.23604 120.716 li
-1.23604 120.538 li
-1.23604 120.328 li
-1.23604 120.296 -1.1727 120.264 -1.06223 120.242 cv
-.951752 120.219 -.798935 120.206 -.642715 120.206 cv
2.395 120.206 li
2.395 120.206 li
2.23878 120.206 2.08595 120.219 1.97549 120.242 cv
1.86502 120.264 1.80168 120.296 1.80168 120.328 cv
1.80168 120.716 li
2.395 120.716 li
1.80168 120.716 li
1.80168 120.748 1.86502 120.779 1.97549 120.802 cv
2.08595 120.825 2.23878 120.838 2.395 120.838 cv
-.0493927 120.594 mo
1.80168 120.594 li
1.80168 120.45 li
-.0493927 120.45 li
-.0493927 120.594 li
0 0 0 0 cmyk
f
4.8394 120.594 mo
2.98833 120.594 li
2.98833 120.45 li
4.8394 120.45 li
4.8394 120.594 li
.155894 .125721 .129073 0 cmyk
f
5.43272 120.838 mo
2.395 120.838 li
2.395 120.838 li
2.23878 120.838 2.08595 120.825 1.97549 120.802 cv
1.86502 120.779 1.80168 120.748 1.80168 120.716 cv
2.395 120.716 li
1.80168 120.716 li
1.80168 120.328 li
1.80168 120.296 1.86502 120.264 1.97549 120.242 cv
2.08595 120.219 2.23878 120.206 2.395 120.206 cv
2.395 120.206 li
4.84071 120.206 li
4.83984 120.209 4.8394 120.211 4.8394 120.214 cv
4.8394 120.716 li
5.43272 120.716 li
4.8394 120.716 li
4.8394 120.748 4.90273 120.779 5.0132 120.802 cv
5.12367 120.825 5.2765 120.838 5.43272 120.838 cv
2.98833 120.594 mo
4.8394 120.594 li
4.8394 120.45 li
2.98833 120.45 li
2.98833 120.594 li
0 0 0 0 cmyk
f
7.87712 120.594 mo
6.02605 120.594 li
6.02605 120.336 li
7.87712 120.336 li
7.87712 120.594 li
.155894 .125721 .129073 0 cmyk
f
8.47044 120.838 mo
5.43272 120.838 li
5.43272 120.838 li
5.2765 120.838 5.12367 120.825 5.0132 120.802 cv
4.90273 120.779 4.8394 120.748 4.8394 120.716 cv
5.43272 120.716 li
4.8394 120.716 li
4.8394 120.214 li
4.8394 120.211 4.83984 120.209 4.84071 120.206 cv
4.85025 120.177 4.9119 120.149 5.0132 120.128 cv
5.12367 120.105 5.2765 120.092 5.43272 120.092 cv
8.47044 120.092 li
8.47044 120.092 li
8.31422 120.092 8.16139 120.105 8.05092 120.128 cv
7.94044 120.15 7.87712 120.182 7.87712 120.214 cv
7.87712 120.716 li
8.47044 120.716 li
7.87712 120.716 li
7.87712 120.748 7.94044 120.779 8.05092 120.802 cv
8.16139 120.825 8.31422 120.838 8.47044 120.838 cv
6.02605 120.594 mo
7.87712 120.594 li
7.87712 120.336 li
6.02605 120.336 li
6.02605 120.594 li
0 0 0 0 cmyk
f
10.915 120.594 mo
9.06377 120.594 li
9.06377 120.336 li
10.915 120.336 li
10.915 120.594 li
.155894 .125721 .129073 0 cmyk
f
11.5082 120.838 mo
8.47044 120.838 li
8.47044 120.838 li
8.31422 120.838 8.16139 120.825 8.05092 120.802 cv
7.94044 120.779 7.87712 120.748 7.87712 120.716 cv
8.47044 120.716 li
7.87712 120.716 li
7.87712 120.214 li
7.87712 120.182 7.94044 120.15 8.05092 120.128 cv
8.16139 120.105 8.31422 120.092 8.47044 120.092 cv
8.47044 120.092 li
10.915 120.092 li
10.915 120.716 li
11.5082 120.716 li
10.915 120.716 li
10.915 120.748 10.9782 120.779 11.0886 120.802 cv
11.1991 120.825 11.3519 120.838 11.5082 120.838 cv
9.06377 120.594 mo
10.915 120.594 li
10.915 120.336 li
9.06377 120.336 li
9.06377 120.594 li
0 0 0 0 cmyk
f
13.9526 120.594 mo
12.1015 120.594 li
12.1015 120.004 li
13.9526 120.004 li
13.9526 120.594 li
.155894 .125721 .129073 0 cmyk
f
14.5459 120.838 mo
11.5082 120.838 li
11.5082 120.838 li
11.3519 120.838 11.1991 120.825 11.0886 120.802 cv
10.9782 120.779 10.915 120.748 10.915 120.716 cv
11.5082 120.716 li
10.915 120.716 li
10.915 120.092 li
10.915 119.882 li
10.915 119.85 10.9782 119.818 11.0886 119.795 cv
11.1991 119.773 11.3519 119.76 11.5082 119.76 cv
13.9526 119.76 li
13.9526 120.716 li
14.5459 120.716 li
13.9526 120.716 li
13.9526 120.748 14.0159 120.779 14.1264 120.802 cv
14.2368 120.825 14.3896 120.838 14.5459 120.838 cv
12.1015 120.594 mo
13.9526 120.594 li
13.9526 120.004 li
12.1015 120.004 li
12.1015 120.594 li
0 0 0 0 cmyk
f
16.9903 120.594 mo
15.1392 120.594 li
15.1392 119.447 li
16.9903 119.447 li
16.9903 120.594 li
.155894 .125721 .129073 0 cmyk
f
17.5836 120.838 mo
14.5459 120.838 li
14.5459 120.838 li
14.3896 120.838 14.2368 120.825 14.1264 120.802 cv
14.0159 120.779 13.9526 120.748 13.9526 120.716 cv
14.5459 120.716 li
13.9526 120.716 li
13.9526 119.76 li
13.9526 119.325 li
13.9526 119.293 14.0159 119.261 14.1264 119.238 cv
14.2368 119.216 14.3896 119.203 14.5459 119.203 cv
17.5836 119.203 li
17.7398 119.203 17.8926 119.216 18.0031 119.238 cv
18.1136 119.261 18.1769 119.293 18.1769 119.325 cv
18.1769 119.981 li
17.5836 119.981 li
17.4274 119.981 17.2746 119.994 17.1641 120.017 cv
17.0536 120.04 16.9903 120.071 16.9903 120.103 cv
16.9903 120.716 li
17.5836 120.716 li
16.9903 120.716 li
16.9903 120.748 17.0536 120.779 17.1641 120.802 cv
17.2746 120.825 17.4274 120.838 17.5836 120.838 cv
15.1392 120.594 mo
16.9903 120.594 li
16.9903 119.447 li
15.1392 119.447 li
15.1392 120.594 li
0 0 0 0 cmyk
f
20.028 120.594 mo
18.1769 120.594 li
18.1769 120.225 li
20.028 120.225 li
20.028 120.594 li
.155894 .125721 .129073 0 cmyk
f
20.6213 120.838 mo
17.5836 120.838 li
17.5836 120.838 li
17.4274 120.838 17.2746 120.825 17.1641 120.802 cv
17.0536 120.779 16.9903 120.748 16.9903 120.716 cv
17.5836 120.716 li
16.9903 120.716 li
16.9903 120.103 li
16.9903 120.071 17.0536 120.04 17.1641 120.017 cv
17.2746 119.994 17.4274 119.981 17.5836 119.981 cv
18.1769 119.981 li
20.028 119.981 li
20.028 120.716 li
20.6213 120.716 li
20.028 120.716 li
20.028 120.748 20.0913 120.779 20.2018 120.802 cv
20.3123 120.825 20.4651 120.838 20.6213 120.838 cv
18.1769 120.594 mo
20.028 120.594 li
20.028 120.225 li
18.1769 120.225 li
18.1769 120.594 li
0 0 0 0 cmyk
f
23.0657 120.594 mo
21.2146 120.594 li
21.2146 119.616 li
23.0657 119.616 li
23.0657 120.594 li
.155894 .125721 .129073 0 cmyk
f
23.659 120.838 mo
20.6213 120.838 li
20.6213 120.838 li
20.4651 120.838 20.3123 120.825 20.2018 120.802 cv
20.0913 120.779 20.028 120.748 20.028 120.716 cv
20.6213 120.716 li
20.028 120.716 li
20.028 119.981 li
20.028 119.494 li
20.028 119.462 20.0913 119.431 20.2018 119.408 cv
20.3123 119.385 20.4651 119.372 20.6213 119.372 cv
23.659 119.372 li
23.8152 119.372 23.9681 119.385 24.0786 119.408 cv
24.1076 119.414 24.1333 119.42 24.1555 119.427 cv
23.659 119.427 li
23.5028 119.427 23.35 119.44 23.2395 119.463 cv
23.129 119.486 23.0657 119.517 23.0657 119.55 cv
23.0657 120.716 li
23.659 120.716 li
23.0657 120.716 li
23.0657 120.748 23.129 120.779 23.2395 120.802 cv
23.35 120.825 23.5028 120.838 23.659 120.838 cv
21.2146 120.594 mo
23.0657 120.594 li
23.0657 119.616 li
21.2146 119.616 li
21.2146 120.594 li
0 0 0 0 cmyk
f
26.1034 120.594 mo
24.2523 120.594 li
24.2523 119.672 li
26.1034 119.672 li
26.1034 120.594 li
.155894 .125721 .129073 0 cmyk
f
26.6967 120.838 mo
23.659 120.838 li
23.659 120.838 li
23.5028 120.838 23.35 120.825 23.2395 120.802 cv
23.129 120.779 23.0657 120.748 23.0657 120.716 cv
23.659 120.716 li
23.0657 120.716 li
23.0657 119.55 li
23.0657 119.517 23.129 119.486 23.2395 119.463 cv
23.35 119.44 23.5028 119.427 23.659 119.427 cv
24.1555 119.427 li
26.1034 119.427 li
26.1034 120.716 li
26.6967 120.716 li
26.1034 120.716 li
26.1034 120.748 26.1667 120.779 26.2772 120.802 cv
26.3877 120.825 26.5405 120.838 26.6967 120.838 cv
24.2523 120.594 mo
26.1034 120.594 li
26.1034 119.672 li
24.2523 119.672 li
24.2523 120.594 li
0 0 0 0 cmyk
f
29.1411 120.594 mo
27.2901 120.594 li
27.2901 119.281 li
29.1411 119.281 li
29.1411 120.594 li
.155894 .125721 .129073 0 cmyk
f
29.7345 120.838 mo
26.6967 120.838 li
26.6967 120.838 li
26.5405 120.838 26.3877 120.825 26.2772 120.802 cv
26.1667 120.779 26.1034 120.748 26.1034 120.716 cv
26.6967 120.716 li
26.1034 120.716 li
26.1034 119.427 li
26.1034 119.159 li
26.1034 119.127 26.1667 119.095 26.2772 119.072 cv
26.3877 119.05 26.5405 119.037 26.6967 119.037 cv
29.1411 119.037 li
29.1411 120.716 li
29.7345 120.716 li
29.1411 120.716 li
29.1411 120.748 29.2045 120.779 29.3149 120.802 cv
29.4254 120.825 29.5782 120.838 29.7345 120.838 cv
27.2901 120.594 mo
29.1411 120.594 li
29.1411 119.281 li
27.2901 119.281 li
27.2901 120.594 li
0 0 0 0 cmyk
f
32.1789 120.594 mo
30.3278 120.594 li
30.3278 118.727 li
32.1789 118.727 li
32.1789 120.594 li
.155894 .125721 .129073 0 cmyk
f
32.7722 120.838 mo
29.7345 120.838 li
29.7345 120.838 li
29.5782 120.838 29.4254 120.825 29.3149 120.802 cv
29.2045 120.779 29.1411 120.748 29.1411 120.716 cv
29.7345 120.716 li
29.1411 120.716 li
29.1411 119.037 li
29.1411 118.605 li
29.1411 118.573 29.2045 118.541 29.3149 118.519 cv
29.4254 118.496 29.5782 118.483 29.7345 118.483 cv
32.1791 118.483 li
32.1791 120.716 li
32.7722 120.716 li
32.1791 120.716 li
32.1791 120.748 32.2422 120.779 32.3527 120.802 cv
32.4631 120.825 32.616 120.838 32.7722 120.838 cv
30.3278 120.594 mo
32.1789 120.594 li
32.1789 118.727 li
30.3278 118.727 li
30.3278 120.594 li
0 0 0 0 cmyk
f
35.2166 120.594 mo
33.3655 120.594 li
33.3655 118.17 li
35.2166 118.17 li
35.2166 120.594 li
.155894 .125721 .129073 0 cmyk
f
35.8099 120.838 mo
32.7722 120.838 li
32.7722 120.838 li
32.616 120.838 32.4631 120.825 32.3527 120.802 cv
32.2422 120.779 32.1791 120.748 32.1791 120.716 cv
32.7722 120.716 li
32.1791 120.716 li
32.1791 118.483 li
32.1791 118.048 li
32.1791 118.016 32.2422 117.985 32.3527 117.962 cv
32.4631 117.939 32.616 117.926 32.7722 117.926 cv
35.8099 117.926 li
35.9661 117.926 36.1189 117.939 36.2294 117.962 cv
36.3399 117.985 36.4032 118.016 36.4032 118.048 cv
36.4032 118.705 li
35.8099 118.705 li
35.6537 118.705 35.5009 118.717 35.3904 118.74 cv
35.2799 118.763 35.2166 118.794 35.2166 118.827 cv
35.2166 120.716 li
35.8099 120.716 li
35.2166 120.716 li
35.2166 120.748 35.2799 120.779 35.3904 120.802 cv
35.5009 120.825 35.6537 120.838 35.8099 120.838 cv
33.3655 120.594 mo
35.2166 120.594 li
35.2166 118.17 li
33.3655 118.17 li
33.3655 120.594 li
0 0 0 0 cmyk
f
38.2543 120.594 mo
36.4032 120.594 li
36.4032 118.949 li
38.2543 118.949 li
38.2543 120.594 li
.155894 .125721 .129073 0 cmyk
f
38.8476 120.838 mo
35.8099 120.838 li
35.8099 120.838 li
35.6537 120.838 35.5009 120.825 35.3904 120.802 cv
35.2799 120.779 35.2166 120.748 35.2166 120.716 cv
35.8099 120.716 li
35.2166 120.716 li
35.2166 118.827 li
35.2166 118.794 35.2799 118.763 35.3904 118.74 cv
35.5009 118.717 35.6537 118.705 35.8099 118.705 cv
36.4032 118.705 li
38.2543 118.705 li
38.2543 120.716 li
38.8476 120.716 li
38.2543 120.716 li
38.2543 120.748 38.3176 120.779 38.4281 120.802 cv
38.5386 120.825 38.6914 120.838 38.8476 120.838 cv
36.4032 120.594 mo
38.2543 120.594 li
38.2543 118.949 li
36.4032 118.949 li
36.4032 120.594 li
0 0 0 0 cmyk
f
41.292 120.594 mo
39.4409 120.594 li
39.4409 117.724 li
41.292 117.724 li
41.292 120.594 li
.155894 .125721 .129073 0 cmyk
f
41.8853 120.838 mo
38.8476 120.838 li
38.8476 120.838 li
38.6914 120.838 38.5386 120.825 38.4281 120.802 cv
38.3176 120.779 38.2543 120.748 38.2543 120.716 cv
38.8476 120.716 li
38.2543 120.716 li
38.2543 118.705 li
38.2543 117.602 li
38.2543 117.57 38.3176 117.538 38.4281 117.516 cv
38.5386 117.493 38.6914 117.48 38.8476 117.48 cv
41.292 117.48 li
41.292 120.716 li
41.8853 120.716 li
41.292 120.716 li
41.292 120.748 41.3553 120.779 41.4658 120.802 cv
41.5763 120.825 41.7291 120.838 41.8853 120.838 cv
39.4409 120.594 mo
41.292 120.594 li
41.292 117.724 li
39.4409 117.724 li
39.4409 120.594 li
0 0 0 0 cmyk
f
44.3297 120.594 mo
42.4786 120.594 li
42.4786 117.392 li
44.3297 117.392 li
44.3297 120.594 li
.155894 .125721 .129073 0 cmyk
f
44.923 120.838 mo
41.8853 120.838 li
41.8853 120.838 li
41.7291 120.838 41.5763 120.825 41.4658 120.802 cv
41.3553 120.779 41.292 120.748 41.292 120.716 cv
41.8853 120.716 li
41.292 120.716 li
41.292 117.48 li
41.292 117.27 li
41.292 117.238 41.3553 117.206 41.4658 117.183 cv
41.5763 117.161 41.7291 117.148 41.8853 117.148 cv
44.3297 117.148 li
44.3297 120.716 li
44.923 120.716 li
44.3297 120.716 li
44.3297 120.748 44.393 120.779 44.5035 120.802 cv
44.614 120.825 44.7668 120.838 44.923 120.838 cv
42.4786 120.594 mo
44.3297 120.594 li
44.3297 117.392 li
42.4786 117.392 li
42.4786 120.594 li
0 0 0 0 cmyk
f
47.3674 120.594 mo
45.5164 120.594 li
45.5164 116.447 li
47.3674 116.447 li
47.3674 120.594 li
.155894 .125721 .129073 0 cmyk
f
47.9608 120.838 mo
44.923 120.838 li
44.923 120.838 li
44.7668 120.838 44.614 120.825 44.5035 120.802 cv
44.393 120.779 44.3297 120.748 44.3297 120.716 cv
44.923 120.716 li
44.3297 120.716 li
44.3297 117.148 li
44.3297 116.325 li
44.3297 116.293 44.393 116.262 44.5035 116.239 cv
44.614 116.216 44.7668 116.203 44.923 116.203 cv
47.3674 116.203 li
47.3674 120.716 li
47.9608 120.716 li
47.3674 120.716 li
47.3674 120.748 47.4308 120.779 47.5412 120.802 cv
47.6517 120.825 47.8045 120.838 47.9608 120.838 cv
45.5164 120.594 mo
47.3674 120.594 li
47.3674 116.447 li
45.5164 116.447 li
45.5164 120.594 li
0 0 0 0 cmyk
f
50.4052 120.594 mo
48.5541 120.594 li
48.5541 116.281 li
50.4052 116.281 li
50.4052 120.594 li
.155894 .125721 .129073 0 cmyk
f
50.9985 120.838 mo
47.9608 120.838 li
47.9608 120.838 li
47.8045 120.838 47.6517 120.825 47.5412 120.802 cv
47.4308 120.779 47.3674 120.748 47.3674 120.716 cv
47.9608 120.716 li
47.3674 120.716 li
47.3674 116.203 li
47.3674 116.159 li
47.3674 116.127 47.4308 116.095 47.5412 116.073 cv
47.6517 116.05 47.8045 116.037 47.9608 116.037 cv
50.9985 116.037 li
51.1547 116.037 51.3075 116.05 51.418 116.073 cv
51.5285 116.095 51.5918 116.127 51.5918 116.159 cv
51.5918 116.646 li
50.9985 116.646 li
50.8423 116.646 50.6894 116.659 50.5789 116.682 cv
50.4685 116.705 50.4052 116.736 50.4052 116.768 cv
50.4052 120.716 li
50.9985 120.716 li
50.4052 120.716 li
50.4052 120.748 50.4685 120.779 50.5789 120.802 cv
50.6894 120.825 50.8423 120.838 50.9985 120.838 cv
48.5541 120.594 mo
50.4052 120.594 li
50.4052 116.281 li
48.5541 116.281 li
48.5541 120.594 li
0 0 0 0 cmyk
f
53.4429 120.594 mo
51.5918 120.594 li
51.5918 116.89 li
53.4429 116.89 li
53.4429 120.594 li
.155894 .125721 .129073 0 cmyk
f
54.0362 120.838 mo
50.9985 120.838 li
50.9985 120.838 li
50.8423 120.838 50.6894 120.825 50.5789 120.802 cv
50.4685 120.779 50.4052 120.748 50.4052 120.716 cv
50.9985 120.716 li
50.4052 120.716 li
50.4052 116.768 li
50.4052 116.736 50.4685 116.705 50.5789 116.682 cv
50.6894 116.659 50.8423 116.646 50.9985 116.646 cv
51.5918 116.646 li
53.4429 116.646 li
53.4429 120.716 li
54.0362 120.716 li
53.4429 120.716 li
53.4429 120.748 53.5062 120.779 53.6167 120.802 cv
53.7271 120.825 53.88 120.838 54.0362 120.838 cv
51.5918 120.594 mo
53.4429 120.594 li
53.4429 116.89 li
51.5918 116.89 li
51.5918 120.594 li
0 0 0 0 cmyk
f
56.4806 120.594 mo
54.6295 120.594 li
54.6295 116.001 li
56.4806 116.001 li
56.4806 120.594 li
.155894 .125721 .129073 0 cmyk
f
57.0739 120.838 mo
54.0362 120.838 li
54.0362 120.838 li
53.88 120.838 53.7271 120.825 53.6167 120.802 cv
53.5062 120.779 53.4429 120.748 53.4429 120.716 cv
54.0362 120.716 li
53.4429 120.716 li
53.4429 116.646 li
53.4429 115.879 li
53.4429 115.847 53.5062 115.815 53.6167 115.793 cv
53.7271 115.77 53.88 115.757 54.0362 115.757 cv
56.4806 115.757 li
56.4806 120.716 li
57.0739 120.716 li
56.4806 120.716 li
56.4806 120.748 56.5439 120.779 56.6544 120.802 cv
56.7649 120.825 56.9177 120.838 57.0739 120.838 cv
54.6295 120.594 mo
56.4806 120.594 li
56.4806 116.001 li
54.6295 116.001 li
54.6295 120.594 li
0 0 0 0 cmyk
f
59.5183 120.594 mo
57.6672 120.594 li
57.6672 114.89 li
59.5183 114.89 li
59.5183 120.594 li
.155894 .125721 .129073 0 cmyk
f
60.1116 120.838 mo
57.0739 120.838 li
57.0739 120.838 li
56.9177 120.838 56.7649 120.825 56.6544 120.802 cv
56.5439 120.779 56.4806 120.748 56.4806 120.716 cv
57.0739 120.716 li
56.4806 120.716 li
56.4806 115.757 li
56.4806 114.768 li
56.4806 114.736 56.5439 114.705 56.6544 114.682 cv
56.7649 114.659 56.9177 114.646 57.0739 114.646 cv
59.5183 114.646 li
59.5183 120.716 li
60.1116 120.716 li
59.5183 120.716 li
59.5183 120.748 59.5816 120.779 59.6921 120.802 cv
59.8026 120.825 59.9554 120.838 60.1116 120.838 cv
57.6672 120.594 mo
59.5183 120.594 li
59.5183 114.89 li
57.6672 114.89 li
57.6672 120.594 li
0 0 0 0 cmyk
f
62.556 120.594 mo
60.705 120.594 li
60.705 113.946 li
62.556 113.946 li
62.556 120.594 li
.155894 .125721 .129073 0 cmyk
f
63.1494 120.838 mo
60.1116 120.838 li
60.1116 120.838 li
59.9554 120.838 59.8026 120.825 59.6921 120.802 cv
59.5816 120.779 59.5183 120.748 59.5183 120.716 cv
60.1116 120.716 li
59.5183 120.716 li
59.5183 114.646 li
59.5183 113.824 li
59.5183 113.792 59.5816 113.76 59.6921 113.738 cv
59.8026 113.715 59.9554 113.702 60.1116 113.702 cv
62.556 113.702 li
62.556 120.716 li
63.1494 120.716 li
62.556 120.716 li
62.556 120.748 62.6194 120.779 62.7298 120.802 cv
62.8403 120.825 62.9931 120.838 63.1494 120.838 cv
60.705 120.594 mo
62.556 120.594 li
62.556 113.946 li
60.705 113.946 li
60.705 120.594 li
0 0 0 0 cmyk
f
65.5938 120.594 mo
63.7427 120.594 li
63.7427 113.558 li
65.5938 113.558 li
65.5938 120.594 li
.155894 .125721 .129073 0 cmyk
f
66.1871 120.838 mo
63.1494 120.838 li
63.1494 120.838 li
62.9931 120.838 62.8403 120.825 62.7298 120.802 cv
62.6194 120.779 62.556 120.748 62.556 120.716 cv
63.1494 120.716 li
62.556 120.716 li
62.556 113.702 li
62.556 113.436 li
62.556 113.404 62.6194 113.373 62.7298 113.35 cv
62.8403 113.327 62.9931 113.314 63.1494 113.314 cv
65.5938 113.314 li
65.5938 120.716 li
66.1871 120.716 li
65.5938 120.716 li
65.5938 120.748 65.6571 120.779 65.7675 120.802 cv
65.878 120.825 66.0309 120.838 66.1871 120.838 cv
63.7427 120.594 mo
65.5938 120.594 li
65.5938 113.558 li
63.7427 113.558 li
63.7427 120.594 li
0 0 0 0 cmyk
f
68.6315 120.594 mo
66.7804 120.594 li
66.7804 113.223 li
68.6315 113.223 li
68.6315 120.594 li
.155894 .125721 .129073 0 cmyk
f
69.2248 120.838 mo
66.1871 120.838 li
66.1871 120.838 li
66.0309 120.838 65.878 120.825 65.7675 120.802 cv
65.6571 120.779 65.5938 120.748 65.5938 120.716 cv
66.1871 120.716 li
65.5938 120.716 li
65.5938 113.314 li
65.5938 113.101 li
65.5938 113.069 65.6571 113.037 65.7675 113.014 cv
65.878 112.992 66.0309 112.979 66.1871 112.979 cv
68.6315 112.979 li
68.6315 120.716 li
69.2248 120.716 li
68.6315 120.716 li
68.6315 120.748 68.6948 120.779 68.8053 120.802 cv
68.9157 120.825 69.0686 120.838 69.2248 120.838 cv
66.7804 120.594 mo
68.6315 120.594 li
68.6315 113.223 li
66.7804 113.223 li
66.7804 120.594 li
0 0 0 0 cmyk
f
71.6692 120.594 mo
69.8181 120.594 li
69.8181 111.725 li
71.6692 111.725 li
71.6692 120.594 li
.155894 .125721 .129073 0 cmyk
f
72.2625 120.838 mo
69.2248 120.838 li
69.2248 120.838 li
69.0686 120.838 68.9157 120.825 68.8053 120.802 cv
68.6948 120.779 68.6315 120.748 68.6315 120.716 cv
69.2248 120.716 li
68.6315 120.716 li
68.6315 112.979 li
68.6315 111.603 li
68.6315 111.57 68.6948 111.539 68.8053 111.516 cv
68.9157 111.494 69.0686 111.48 69.2248 111.48 cv
71.6692 111.48 li
71.6692 120.716 li
72.2625 120.716 li
71.6692 120.716 li
71.6692 120.748 71.7325 120.779 71.843 120.802 cv
71.9535 120.825 72.1063 120.838 72.2625 120.838 cv
69.8181 120.594 mo
71.6692 120.594 li
71.6692 111.725 li
69.8181 111.725 li
69.8181 120.594 li
0 0 0 0 cmyk
f
74.7069 120.594 mo
72.8558 120.594 li
72.8558 110.722 li
74.7069 110.722 li
74.7069 120.594 li
.155894 .125721 .129073 0 cmyk
f
75.3002 120.838 mo
72.2625 120.838 li
72.2625 120.838 li
72.1063 120.838 71.9535 120.825 71.843 120.802 cv
71.7325 120.779 71.6692 120.748 71.6692 120.716 cv
72.2625 120.716 li
71.6692 120.716 li
71.6692 111.48 li
71.6692 110.599 li
71.6692 110.567 71.7325 110.536 71.843 110.513 cv
71.9535 110.49 72.1063 110.477 72.2625 110.477 cv
74.7069 110.477 li
74.7069 120.716 li
75.3002 120.716 li
74.7069 120.716 li
74.7069 120.748 74.7702 120.779 74.8807 120.802 cv
74.9912 120.825 75.144 120.838 75.3002 120.838 cv
72.8558 120.594 mo
74.7069 120.594 li
74.7069 110.722 li
72.8558 110.722 li
72.8558 120.594 li
0 0 0 0 cmyk
f
77.7446 120.594 mo
75.8935 120.594 li
75.8935 108.777 li
77.7446 108.777 li
77.7446 120.594 li
.155894 .125721 .129073 0 cmyk
f
78.3379 120.838 mo
75.3002 120.838 li
75.3002 120.838 li
75.144 120.838 74.9912 120.825 74.8807 120.802 cv
74.7702 120.779 74.7069 120.748 74.7069 120.716 cv
75.3002 120.716 li
74.7069 120.716 li
74.7069 110.477 li
74.7069 108.655 li
74.7069 108.623 74.7702 108.591 74.8807 108.569 cv
74.9912 108.546 75.144 108.533 75.3002 108.533 cv
77.7446 108.533 li
77.7446 120.716 li
78.3379 120.716 li
77.7446 120.716 li
77.7446 120.748 77.808 120.779 77.9184 120.802 cv
78.0289 120.825 78.1817 120.838 78.3379 120.838 cv
75.8935 120.594 mo
77.7446 120.594 li
77.7446 108.777 li
75.8935 108.777 li
75.8935 120.594 li
0 0 0 0 cmyk
f
80.7823 120.594 mo
78.9312 120.594 li
78.9312 106.556 li
80.7823 106.556 li
80.7823 120.594 li
.155894 .125721 .129073 0 cmyk
f
81.3756 120.838 mo
78.3379 120.838 li
78.3379 120.838 li
78.1817 120.838 78.0289 120.825 77.9184 120.802 cv
77.808 120.779 77.7446 120.748 77.7446 120.716 cv
78.3379 120.716 li
77.7446 120.716 li
77.7446 108.533 li
77.7446 106.434 li
77.7446 106.402 77.808 106.37 77.9184 106.347 cv
78.0289 106.325 78.1817 106.312 78.3379 106.312 cv
81.3756 106.312 li
81.5319 106.312 81.6847 106.325 81.7952 106.347 cv
81.8925 106.368 81.9533 106.394 81.9663 106.422 cv
81.3756 106.422 li
81.2194 106.422 81.0666 106.435 80.9561 106.458 cv
80.8456 106.481 80.7823 106.512 80.7823 106.544 cv
80.7823 120.716 li
81.3756 120.716 li
80.7823 120.716 li
80.7823 120.748 80.8456 120.779 80.9561 120.802 cv
81.0666 120.825 81.2194 120.838 81.3756 120.838 cv
78.9312 120.594 mo
80.7823 120.594 li
80.7823 106.556 li
78.9312 106.556 li
78.9312 120.594 li
0 0 0 0 cmyk
f
83.82 120.594 mo
81.969 120.594 li
81.969 106.667 li
83.82 106.667 li
83.82 120.594 li
.155894 .125721 .129073 0 cmyk
f
84.4134 120.838 mo
81.3756 120.838 li
81.3756 120.838 li
81.2194 120.838 81.0666 120.825 80.9561 120.802 cv
80.8456 120.779 80.7823 120.748 80.7823 120.716 cv
81.3756 120.716 li
80.7823 120.716 li
80.7823 106.544 li
80.7823 106.512 80.8456 106.481 80.9561 106.458 cv
81.0666 106.435 81.2194 106.422 81.3756 106.422 cv
81.9663 106.422 li
83.82 106.422 li
83.82 120.716 li
84.4134 120.716 li
83.82 120.716 li
83.82 120.748 83.8834 120.779 83.9938 120.802 cv
84.1043 120.825 84.2571 120.838 84.4134 120.838 cv
81.969 120.594 mo
83.82 120.594 li
83.82 106.667 li
81.969 106.667 li
81.969 120.594 li
0 0 0 0 cmyk
f
86.8578 120.594 mo
85.0067 120.594 li
85.0067 104.833 li
86.8578 104.833 li
86.8578 120.594 li
.155894 .125721 .129073 0 cmyk
f
87.4511 120.838 mo
84.4134 120.838 li
84.4134 120.838 li
84.2571 120.838 84.1043 120.825 83.9938 120.802 cv
83.8834 120.779 83.82 120.748 83.82 120.716 cv
84.4134 120.716 li
83.82 120.716 li
83.82 106.422 li
83.82 104.711 li
83.82 104.679 83.8834 104.647 83.9938 104.624 cv
84.1043 104.602 84.2571 104.589 84.4134 104.589 cv
86.8578 104.589 li
86.8578 120.716 li
87.4511 120.716 li
86.8578 120.716 li
86.8578 120.748 86.9211 120.779 87.0316 120.802 cv
87.142 120.825 87.2949 120.838 87.4511 120.838 cv
85.0067 120.594 mo
86.8578 120.594 li
86.8578 104.833 li
85.0067 104.833 li
85.0067 120.594 li
0 0 0 0 cmyk
f
89.8955 120.594 mo
88.0444 120.594 li
88.0444 102.885 li
89.8955 102.885 li
89.8955 120.594 li
.155894 .125721 .129073 0 cmyk
f
90.4888 120.838 mo
87.4511 120.838 li
87.4511 120.838 li
87.2949 120.838 87.142 120.825 87.0316 120.802 cv
86.9211 120.779 86.8578 120.748 86.8578 120.716 cv
87.4511 120.716 li
86.8578 120.716 li
86.8578 104.589 li
86.8578 102.763 li
86.8578 102.731 86.9211 102.7 87.0316 102.677 cv
87.142 102.654 87.2949 102.641 87.4511 102.641 cv
89.8955 102.641 li
89.8955 120.716 li
90.4888 120.716 li
89.8955 120.716 li
89.8955 120.748 89.9588 120.779 90.0693 120.802 cv
90.1797 120.825 90.3326 120.838 90.4888 120.838 cv
88.0444 120.594 mo
89.8955 120.594 li
89.8955 102.885 li
88.0444 102.885 li
88.0444 120.594 li
0 0 0 0 cmyk
f
92.9332 120.594 mo
91.0821 120.594 li
91.0821 101.442 li
92.9332 101.442 li
92.9332 120.594 li
.155894 .125721 .129073 0 cmyk
f
93.5265 120.838 mo
90.4888 120.838 li
90.4888 120.838 li
90.3326 120.838 90.1797 120.825 90.0693 120.802 cv
89.9588 120.779 89.8955 120.748 89.8955 120.716 cv
90.4888 120.716 li
89.8955 120.716 li
89.8955 102.641 li
89.8955 101.32 li
89.8955 101.288 89.9588 101.257 90.0693 101.234 cv
90.1797 101.211 90.3326 101.198 90.4888 101.198 cv
92.9332 101.198 li
92.9332 120.716 li
93.5265 120.716 li
92.9332 120.716 li
92.9332 120.748 92.9965 120.779 93.107 120.802 cv
93.2175 120.825 93.3703 120.838 93.5265 120.838 cv
91.0821 120.594 mo
92.9332 120.594 li
92.9332 101.442 li
91.0821 101.442 li
91.0821 120.594 li
0 0 0 0 cmyk
f
95.9709 120.594 mo
94.1198 120.594 li
94.1198 99.0518 li
95.9709 99.0518 li
95.9709 120.594 li
.155894 .125721 .129073 0 cmyk
f
96.5642 120.838 mo
93.5265 120.838 li
93.5265 120.838 li
93.3703 120.838 93.2175 120.825 93.107 120.802 cv
92.9965 120.779 92.9332 120.748 92.9332 120.716 cv
93.5265 120.716 li
92.9332 120.716 li
92.9332 101.198 li
92.9332 98.9298 li
92.9332 98.8976 92.9965 98.8661 93.107 98.8435 cv
93.2175 98.8207 93.3703 98.8075 93.5265 98.8075 cv
95.9709 98.8075 li
95.9709 120.716 li
96.5642 120.716 li
95.9709 120.716 li
95.9709 120.748 96.0342 120.779 96.1447 120.802 cv
96.2552 120.825 96.408 120.838 96.5642 120.838 cv
94.1198 120.594 mo
95.9709 120.594 li
95.9709 99.0518 li
94.1198 99.0518 li
94.1198 120.594 li
0 0 0 0 cmyk
f
99.0086 120.594 mo
97.1576 120.594 li
97.1576 98.1627 li
99.0086 98.1627 li
99.0086 120.594 li
.155894 .125721 .129073 0 cmyk
f
99.602 120.838 mo
96.5642 120.838 li
96.5642 120.838 li
96.408 120.838 96.2552 120.825 96.1447 120.802 cv
96.0342 120.779 95.9709 120.748 95.9709 120.716 cv
96.5642 120.716 li
95.9709 120.716 li
95.9709 98.8075 li
95.9709 98.0406 li
95.9709 98.0084 96.0342 97.9769 96.1447 97.9543 cv
96.2552 97.9315 96.408 97.9185 96.5642 97.9185 cv
99.0086 97.9185 li
99.0086 120.716 li
99.602 120.716 li
99.0086 120.716 li
99.0086 120.748 99.072 120.779 99.1824 120.802 cv
99.2929 120.825 99.4457 120.838 99.602 120.838 cv
97.1576 120.594 mo
99.0086 120.594 li
99.0086 98.1627 li
97.1576 98.1627 li
97.1576 120.594 li
0 0 0 0 cmyk
f
102.046 120.594 mo
100.195 120.594 li
100.195 96.3292 li
102.046 96.3292 li
102.046 120.594 li
.155894 .125721 .129073 0 cmyk
f
102.64 120.838 mo
99.602 120.838 li
99.602 120.838 li
99.4457 120.838 99.2929 120.825 99.1824 120.802 cv
99.072 120.779 99.0086 120.748 99.0086 120.716 cv
99.602 120.716 li
99.0086 120.716 li
99.0086 97.9185 li
99.0086 96.2069 li
99.0086 96.1747 99.072 96.1434 99.1824 96.1206 cv
99.2929 96.0978 99.4457 96.0848 99.602 96.0848 cv
102.046 96.0848 li
102.046 120.716 li
102.64 120.716 li
102.046 120.716 li
102.046 120.748 102.11 120.779 102.22 120.802 cv
102.331 120.825 102.483 120.838 102.64 120.838 cv
100.195 120.594 mo
102.046 120.594 li
102.046 96.3292 li
100.195 96.3292 li
100.195 120.594 li
0 0 0 0 cmyk
f
105.084 120.594 mo
103.233 120.594 li
103.233 92.4402 li
105.084 92.4402 li
105.084 120.594 li
.155894 .125721 .129073 0 cmyk
f
105.677 120.838 mo
102.64 120.838 li
102.64 120.838 li
102.483 120.838 102.331 120.825 102.22 120.802 cv
102.11 120.779 102.046 120.748 102.046 120.716 cv
102.64 120.716 li
102.046 120.716 li
102.046 96.0848 li
102.046 92.3182 li
102.046 92.286 102.11 92.2544 102.22 92.2317 cv
102.331 92.2091 102.483 92.1959 102.64 92.1959 cv
105.084 92.1959 li
105.084 120.716 li
105.677 120.716 li
105.084 120.716 li
105.084 120.748 105.147 120.779 105.258 120.802 cv
105.368 120.825 105.521 120.838 105.677 120.838 cv
103.233 120.594 mo
105.084 120.594 li
105.084 92.4402 li
103.233 92.4402 li
103.233 120.594 li
0 0 0 0 cmyk
f
108.122 120.594 mo
106.271 120.594 li
106.271 90.2711 li
108.122 90.2711 li
108.122 120.594 li
.155894 .125721 .129073 0 cmyk
f
108.715 120.838 mo
105.677 120.838 li
105.677 120.838 li
105.521 120.838 105.368 120.825 105.258 120.802 cv
105.147 120.779 105.084 120.748 105.084 120.716 cv
105.677 120.716 li
105.084 120.716 li
105.084 92.1959 li
105.084 90.149 li
105.084 90.1169 105.147 90.0853 105.258 90.0625 cv
105.368 90.0398 105.521 90.0268 105.677 90.0268 cv
108.219 90.0268 li
108.156 90.0465 108.122 90.0698 108.122 90.0935 cv
108.122 120.716 li
108.715 120.716 li
108.122 120.716 li
108.122 120.748 108.185 120.779 108.296 120.802 cv
108.406 120.825 108.559 120.838 108.715 120.838 cv
106.271 120.594 mo
108.122 120.594 li
108.122 90.2711 li
106.271 90.2711 li
106.271 120.594 li
0 0 0 0 cmyk
f
111.16 120.594 mo
109.308 120.594 li
109.308 90.2158 li
111.16 90.2158 li
111.16 120.594 li
.155894 .125721 .129073 0 cmyk
f
111.753 120.838 mo
108.715 120.838 li
108.715 120.838 li
108.559 120.838 108.406 120.825 108.296 120.802 cv
108.185 120.779 108.122 120.748 108.122 120.716 cv
108.715 120.716 li
108.122 120.716 li
108.122 90.0935 li
108.122 90.0698 108.156 90.0465 108.219 90.0268 cv
108.241 90.0198 108.267 90.0132 108.296 90.0072 cv
108.406 89.9844 108.559 89.9714 108.715 89.9714 cv
111.16 89.9714 li
111.16 120.716 li
111.753 120.716 li
111.16 120.716 li
111.16 120.748 111.223 120.779 111.333 120.802 cv
111.444 120.825 111.597 120.838 111.753 120.838 cv
109.308 120.594 mo
111.16 120.594 li
111.16 90.2158 li
109.308 90.2158 li
109.308 120.594 li
0 0 0 0 cmyk
f
114.197 120.594 mo
112.346 120.594 li
112.346 85.4378 li
114.197 85.4378 li
114.197 120.594 li
.155894 .125721 .129073 0 cmyk
f
114.791 120.838 mo
111.753 120.838 li
111.753 120.838 li
111.597 120.838 111.444 120.825 111.333 120.802 cv
111.223 120.779 111.16 120.748 111.16 120.716 cv
111.753 120.716 li
111.16 120.716 li
111.16 89.9714 li
111.16 85.3156 li
111.16 85.2834 111.223 85.2521 111.333 85.2293 cv
111.444 85.2065 111.597 85.1935 111.753 85.1935 cv
114.197 85.1935 li
114.197 120.716 li
114.791 120.716 li
114.197 120.716 li
114.197 120.748 114.261 120.779 114.371 120.802 cv
114.482 120.825 114.634 120.838 114.791 120.838 cv
112.346 120.594 mo
114.197 120.594 li
114.197 85.4378 li
112.346 85.4378 li
112.346 120.594 li
0 0 0 0 cmyk
f
117.235 120.594 mo
115.384 120.594 li
115.384 82.5456 li
117.235 82.5456 li
117.235 120.594 li
.155894 .125721 .129073 0 cmyk
f
117.828 120.838 mo
114.791 120.838 li
114.791 120.838 li
114.634 120.838 114.482 120.825 114.371 120.802 cv
114.261 120.779 114.197 120.748 114.197 120.716 cv
114.791 120.716 li
114.197 120.716 li
114.197 85.1935 li
114.197 82.4235 li
114.197 82.3913 114.261 82.3598 114.371 82.337 cv
114.482 82.3144 114.634 82.3012 114.791 82.3012 cv
117.235 82.3012 li
117.235 120.716 li
117.828 120.716 li
117.235 120.716 li
117.235 120.748 117.298 120.779 117.409 120.802 cv
117.519 120.825 117.672 120.838 117.828 120.838 cv
115.384 120.594 mo
117.235 120.594 li
117.235 82.5456 li
115.384 82.5456 li
115.384 120.594 li
0 0 0 0 cmyk
f
120.273 120.594 mo
118.422 120.594 li
118.422 80.0442 li
120.273 80.0442 li
120.273 120.594 li
.155894 .125721 .129073 0 cmyk
f
120.866 120.838 mo
117.828 120.838 li
117.828 120.838 li
117.672 120.838 117.519 120.825 117.409 120.802 cv
117.298 120.779 117.235 120.748 117.235 120.716 cv
117.828 120.716 li
117.235 120.716 li
117.235 82.3012 li
117.235 79.9222 li
117.235 79.89 117.298 79.8584 117.409 79.8357 cv
117.519 79.8129 117.672 79.7999 117.828 79.7999 cv
120.273 79.7999 li
120.273 120.716 li
120.866 120.716 li
120.273 120.716 li
120.273 120.748 120.336 120.779 120.446 120.802 cv
120.557 120.825 120.71 120.838 120.866 120.838 cv
118.422 120.594 mo
120.273 120.594 li
120.273 80.0442 li
118.422 80.0442 li
118.422 120.594 li
0 0 0 0 cmyk
f
123.31 120.594 mo
121.459 120.594 li
121.459 76.7122 li
123.31 76.7122 li
123.31 120.594 li
.155894 .125721 .129073 0 cmyk
f
123.904 120.838 mo
120.866 120.838 li
120.866 120.838 li
120.71 120.838 120.557 120.825 120.446 120.802 cv
120.336 120.779 120.273 120.748 120.273 120.716 cv
120.866 120.716 li
120.273 120.716 li
120.273 79.7999 li
120.273 76.5902 li
120.273 76.558 120.336 76.5267 120.446 76.5039 cv
120.557 76.4811 120.71 76.4681 120.866 76.4681 cv
123.31 76.4681 li
123.31 120.716 li
123.904 120.716 li
123.31 120.716 li
123.31 120.748 123.374 120.779 123.484 120.802 cv
123.595 120.825 123.747 120.838 123.904 120.838 cv
121.459 120.594 mo
123.31 120.594 li
123.31 76.7122 li
121.459 76.7122 li
121.459 120.594 li
0 0 0 0 cmyk
f
126.348 120.594 mo
124.497 120.594 li
124.497 74.7647 li
126.348 74.7647 li
126.348 120.594 li
.155894 .125721 .129073 0 cmyk
f
126.941 120.838 mo
123.904 120.838 li
123.904 120.838 li
123.747 120.838 123.595 120.825 123.484 120.802 cv
123.374 120.779 123.31 120.748 123.31 120.716 cv
123.904 120.716 li
123.31 120.716 li
123.31 76.4681 li
123.31 74.6426 li
123.31 74.6105 123.374 74.5789 123.484 74.5561 cv
123.595 74.5333 123.747 74.5204 123.904 74.5204 cv
126.348 74.5204 li
126.348 120.716 li
126.941 120.716 li
126.348 120.716 li
126.348 120.748 126.411 120.779 126.522 120.802 cv
126.632 120.825 126.785 120.838 126.941 120.838 cv
124.497 120.594 mo
126.348 120.594 li
126.348 74.7647 li
124.497 74.7647 li
124.497 120.594 li
0 0 0 0 cmyk
f
129.386 120.594 mo
127.535 120.594 li
127.535 72.1527 li
129.386 72.1527 li
129.386 120.594 li
.155894 .125721 .129073 0 cmyk
f
129.979 120.838 mo
126.941 120.838 li
126.941 120.838 li
126.785 120.838 126.632 120.825 126.522 120.802 cv
126.411 120.779 126.348 120.748 126.348 120.716 cv
126.941 120.716 li
126.348 120.716 li
126.348 74.5204 li
126.348 72.0304 li
126.348 71.9983 126.411 71.9669 126.522 71.9441 cv
126.632 71.9213 126.785 71.9084 126.941 71.9084 cv
129.386 71.9084 li
129.386 120.716 li
129.979 120.716 li
129.386 120.716 li
129.386 120.748 129.449 120.779 129.56 120.802 cv
129.67 120.825 129.823 120.838 129.979 120.838 cv
127.535 120.594 mo
129.386 120.594 li
129.386 72.1527 li
127.535 72.1527 li
127.535 120.594 li
0 0 0 0 cmyk
f
132.424 120.594 mo
130.572 120.594 li
130.572 71.5989 li
132.424 71.5989 li
132.424 120.594 li
.155894 .125721 .129073 0 cmyk
f
133.017 120.838 mo
129.979 120.838 li
129.979 120.838 li
129.823 120.838 129.67 120.825 129.56 120.802 cv
129.449 120.779 129.386 120.748 129.386 120.716 cv
129.979 120.716 li
129.386 120.716 li
129.386 71.9084 li
129.386 71.4769 li
129.386 71.4447 129.449 71.4131 129.56 71.3904 cv
129.67 71.3676 129.823 71.3546 129.979 71.3546 cv
132.424 71.3546 li
132.424 120.716 li
133.017 120.716 li
132.424 120.716 li
132.424 120.748 132.487 120.779 132.597 120.802 cv
132.708 120.825 132.861 120.838 133.017 120.838 cv
130.572 120.594 mo
132.424 120.594 li
132.424 71.5989 li
130.572 71.5989 li
130.572 120.594 li
0 0 0 0 cmyk
f
135.461 120.594 mo
133.61 120.594 li
133.61 65.3195 li
135.461 65.3195 li
135.461 120.594 li
.155894 .125721 .129073 0 cmyk
f
136.055 120.838 mo
133.017 120.838 li
133.017 120.838 li
132.861 120.838 132.708 120.825 132.597 120.802 cv
132.487 120.779 132.424 120.748 132.424 120.716 cv
133.017 120.716 li
132.424 120.716 li
132.424 71.3546 li
132.424 65.1973 li
132.424 65.1651 132.487 65.1337 132.597 65.1109 cv
132.708 65.0882 132.861 65.0752 133.017 65.0752 cv
135.461 65.0752 li
135.461 120.716 li
136.055 120.716 li
135.461 120.716 li
135.461 120.748 135.525 120.779 135.635 120.802 cv
135.746 120.825 135.898 120.838 136.055 120.838 cv
133.61 120.594 mo
135.461 120.594 li
135.461 65.3195 li
133.61 65.3195 li
133.61 120.594 li
0 0 0 0 cmyk
f
138.499 120.594 mo
136.648 120.594 li
136.648 63.3717 li
138.499 63.3717 li
138.499 120.594 li
.155894 .125721 .129073 0 cmyk
f
139.092 120.838 mo
136.055 120.838 li
136.055 120.838 li
135.898 120.838 135.746 120.825 135.635 120.802 cv
135.525 120.779 135.461 120.748 135.461 120.716 cv
136.055 120.716 li
135.461 120.716 li
135.461 65.0752 li
135.461 63.2497 li
135.461 63.2175 135.525 63.186 135.635 63.1634 cv
135.746 63.1406 135.898 63.1276 136.055 63.1276 cv
138.499 63.1276 li
138.499 120.716 li
139.092 120.716 li
138.499 120.716 li
138.499 120.748 138.562 120.779 138.673 120.802 cv
138.783 120.825 138.936 120.838 139.092 120.838 cv
136.648 120.594 mo
138.499 120.594 li
138.499 63.3717 li
136.648 63.3717 li
136.648 120.594 li
0 0 0 0 cmyk
f
141.537 120.594 mo
139.686 120.594 li
139.686 58.9814 li
141.537 58.9814 li
141.537 120.594 li
.155894 .125721 .129073 0 cmyk
f
142.13 120.838 mo
139.092 120.838 li
139.092 120.838 li
138.936 120.838 138.783 120.825 138.673 120.802 cv
138.562 120.779 138.499 120.748 138.499 120.716 cv
139.092 120.716 li
138.499 120.716 li
138.499 63.1276 li
138.499 58.8593 li
138.499 58.8272 138.562 58.7956 138.673 58.7728 cv
138.783 58.7502 138.936 58.7371 139.092 58.7371 cv
141.537 58.7371 li
141.537 120.716 li
142.13 120.716 li
141.537 120.716 li
141.537 120.748 141.6 120.779 141.71 120.802 cv
141.821 120.825 141.974 120.838 142.13 120.838 cv
139.686 120.594 mo
141.537 120.594 li
141.537 58.9814 li
139.686 58.9814 li
139.686 120.594 li
0 0 0 0 cmyk
f
144.574 120.594 mo
142.723 120.594 li
142.723 57.2586 li
144.574 57.2586 li
144.574 120.594 li
.155894 .125721 .129073 0 cmyk
f
145.168 120.838 mo
142.13 120.838 li
142.13 120.838 li
141.974 120.838 141.821 120.825 141.71 120.802 cv
141.6 120.779 141.537 120.748 141.537 120.716 cv
142.13 120.716 li
141.537 120.716 li
141.537 58.7371 li
141.537 57.1363 li
141.537 57.1041 141.6 57.0728 141.71 57.05 cv
141.821 57.0272 141.974 57.0142 142.13 57.0142 cv
144.574 57.0142 li
144.574 120.716 li
145.168 120.716 li
144.574 120.716 li
144.574 120.748 144.638 120.779 144.748 120.802 cv
144.859 120.825 145.012 120.838 145.168 120.838 cv
142.723 120.594 mo
144.574 120.594 li
144.574 57.2586 li
142.723 57.2586 li
142.723 120.594 li
0 0 0 0 cmyk
f
147.612 120.594 mo
145.761 120.594 li
145.761 56.1478 li
147.612 56.1478 li
147.612 120.594 li
.155894 .125721 .129073 0 cmyk
f
148.205 120.838 mo
145.168 120.838 li
145.168 120.838 li
145.012 120.838 144.859 120.825 144.748 120.802 cv
144.638 120.779 144.574 120.748 144.574 120.716 cv
145.168 120.716 li
144.574 120.716 li
144.574 57.0142 li
144.574 56.0258 li
144.574 55.9936 144.638 55.962 144.748 55.9393 cv
144.859 55.9167 145.012 55.9035 145.168 55.9035 cv
147.612 55.9035 li
147.612 120.716 li
148.205 120.716 li
147.612 120.716 li
147.612 120.748 147.675 120.779 147.786 120.802 cv
147.896 120.825 148.049 120.838 148.205 120.838 cv
145.761 120.594 mo
147.612 120.594 li
147.612 56.1478 li
145.761 56.1478 li
145.761 120.594 li
0 0 0 0 cmyk
f
150.65 120.594 mo
148.799 120.594 li
148.799 45.6441 li
150.65 45.6441 li
150.65 120.594 li
.155894 .125721 .129073 0 cmyk
f
151.243 120.838 mo
148.205 120.838 li
148.205 120.838 li
148.049 120.838 147.896 120.825 147.786 120.802 cv
147.675 120.779 147.612 120.748 147.612 120.716 cv
148.205 120.716 li
147.612 120.716 li
147.612 55.9035 li
147.612 45.522 li
147.612 45.4898 147.675 45.4583 147.786 45.4357 cv
147.896 45.4129 148.049 45.3999 148.205 45.3999 cv
151.243 45.3999 li
151.399 45.3999 151.552 45.4129 151.663 45.4357 cv
151.773 45.4583 151.836 45.4898 151.836 45.522 cv
151.836 49.6241 li
151.243 49.6241 li
151.087 49.6241 150.934 49.6371 150.824 49.6599 cv
150.713 49.6826 150.65 49.7142 150.65 49.7464 cv
150.65 120.716 li
151.243 120.716 li
150.65 120.716 li
150.65 120.748 150.713 120.779 150.824 120.802 cv
150.934 120.825 151.087 120.838 151.243 120.838 cv
148.799 120.594 mo
150.65 120.594 li
150.65 45.6441 li
148.799 45.6441 li
148.799 120.594 li
0 0 0 0 cmyk
f
153.688 120.594 mo
151.836 120.594 li
151.836 49.8684 li
153.688 49.8684 li
153.688 120.594 li
.155894 .125721 .129073 0 cmyk
f
154.281 120.838 mo
151.243 120.838 li
151.243 120.838 li
151.087 120.838 150.934 120.825 150.824 120.802 cv
150.713 120.779 150.65 120.748 150.65 120.716 cv
151.243 120.716 li
150.65 120.716 li
150.65 49.7464 li
150.65 49.7142 150.713 49.6826 150.824 49.6599 cv
150.934 49.6371 151.087 49.6241 151.243 49.6241 cv
151.836 49.6241 li
153.688 49.6241 li
153.688 120.716 li
154.281 120.716 li
153.688 120.716 li
153.688 120.748 153.751 120.779 153.861 120.802 cv
153.972 120.825 154.125 120.838 154.281 120.838 cv
151.836 120.594 mo
153.688 120.594 li
153.688 49.8684 li
151.836 49.8684 li
151.836 120.594 li
0 0 0 0 cmyk
f
156.725 120.594 mo
154.874 120.594 li
154.874 42.1429 li
156.725 42.1429 li
156.725 120.594 li
.155894 .125721 .129073 0 cmyk
f
157.319 120.838 mo
154.281 120.838 li
154.281 120.838 li
154.125 120.838 153.972 120.825 153.861 120.802 cv
153.751 120.779 153.688 120.748 153.688 120.716 cv
154.281 120.716 li
153.688 120.716 li
153.688 49.6241 li
153.688 42.0208 li
153.688 41.9887 153.751 41.9571 153.861 41.9343 cv
153.972 41.9115 154.125 41.8986 154.281 41.8986 cv
156.725 41.8986 li
156.725 120.716 li
157.319 120.716 li
156.725 120.716 li
156.725 120.748 156.789 120.779 156.899 120.802 cv
157.01 120.825 157.162 120.838 157.319 120.838 cv
154.874 120.594 mo
156.725 120.594 li
156.725 42.1429 li
154.874 42.1429 li
154.874 120.594 li
0 0 0 0 cmyk
f
159.763 120.594 mo
157.912 120.594 li
157.912 39.5862 li
159.763 39.5862 li
159.763 120.594 li
.155894 .125721 .129073 0 cmyk
f
160.356 120.838 mo
157.319 120.838 li
157.319 120.838 li
157.162 120.838 157.01 120.825 156.899 120.802 cv
156.789 120.779 156.725 120.748 156.725 120.716 cv
157.319 120.716 li
156.725 120.716 li
156.725 41.8986 li
156.725 39.464 li
156.725 39.4318 156.789 39.4004 156.899 39.3777 cv
157.01 39.3549 157.162 39.3419 157.319 39.3419 cv
159.763 39.3419 li
159.763 120.716 li
160.356 120.716 li
159.763 120.716 li
159.763 120.748 159.826 120.779 159.937 120.802 cv
160.047 120.825 160.2 120.838 160.356 120.838 cv
157.912 120.594 mo
159.763 120.594 li
159.763 39.5862 li
157.912 39.5862 li
157.912 120.594 li
0 0 0 0 cmyk
f
162.801 120.594 mo
160.95 120.594 li
160.95 35.5313 li
162.801 35.5313 li
162.801 120.594 li
.155894 .125721 .129073 0 cmyk
f
163.394 120.838 mo
160.356 120.838 li
160.356 120.838 li
160.2 120.838 160.047 120.825 159.937 120.802 cv
159.826 120.779 159.763 120.748 159.763 120.716 cv
160.356 120.716 li
159.763 120.716 li
159.763 39.3419 li
159.763 35.409 li
159.763 35.3768 159.826 35.3455 159.937 35.3227 cv
160.047 35.2999 160.2 35.2869 160.356 35.2869 cv
162.801 35.2869 li
162.801 120.716 li
163.394 120.716 li
162.801 120.716 li
162.801 120.748 162.864 120.779 162.974 120.802 cv
163.085 120.825 163.238 120.838 163.394 120.838 cv
160.95 120.594 mo
162.801 120.594 li
162.801 35.5313 li
160.95 35.5313 li
160.95 120.594 li
0 0 0 0 cmyk
f
165.838 120.594 mo
163.987 120.594 li
163.987 34.362 li
165.838 34.362 li
165.838 120.594 li
.155894 .125721 .129073 0 cmyk
f
166.432 120.838 mo
163.394 120.838 li
163.394 120.838 li
163.238 120.838 163.085 120.825 162.974 120.802 cv
162.864 120.779 162.801 120.748 162.801 120.716 cv
163.394 120.716 li
162.801 120.716 li
162.801 35.2869 li
162.801 34.2399 li
162.801 34.2078 162.864 34.1762 162.974 34.1534 cv
163.085 34.1307 163.238 34.1177 163.394 34.1177 cv
165.838 34.1177 li
165.838 120.716 li
166.432 120.716 li
165.838 120.716 li
165.838 120.748 165.902 120.779 166.012 120.802 cv
166.123 120.825 166.276 120.838 166.432 120.838 cv
163.987 120.594 mo
165.838 120.594 li
165.838 34.362 li
163.987 34.362 li
163.987 120.594 li
0 0 0 0 cmyk
f
168.876 120.594 mo
167.025 120.594 li
167.025 29.4732 li
168.876 29.4732 li
168.876 120.594 li
.155894 .125721 .129073 0 cmyk
f
169.469 120.838 mo
166.432 120.838 li
166.432 120.838 li
166.276 120.838 166.123 120.825 166.012 120.802 cv
165.902 120.779 165.838 120.748 165.838 120.716 cv
166.432 120.716 li
165.838 120.716 li
165.838 34.1177 li
165.838 29.3511 li
165.838 29.319 165.902 29.2874 166.012 29.2648 cv
166.123 29.2421 166.276 29.2291 166.432 29.2291 cv
168.876 29.2291 li
168.876 120.716 li
169.469 120.716 li
168.876 120.716 li
168.876 120.748 168.939 120.779 169.05 120.802 cv
169.16 120.825 169.313 120.838 169.469 120.838 cv
167.025 120.594 mo
168.876 120.594 li
168.876 29.4732 li
167.025 29.4732 li
167.025 120.594 li
0 0 0 0 cmyk
f
171.914 120.594 mo
170.063 120.594 li
170.063 25.1937 li
171.914 25.1937 li
171.914 120.594 li
.155894 .125721 .129073 0 cmyk
f
172.507 120.838 mo
169.469 120.838 li
169.469 120.838 li
169.313 120.838 169.16 120.825 169.05 120.802 cv
168.939 120.779 168.876 120.748 168.876 120.716 cv
169.469 120.716 li
168.876 120.716 li
168.876 29.2291 li
168.876 25.0715 li
168.876 25.0393 168.939 25.0079 169.05 24.9852 cv
169.16 24.9624 169.313 24.9494 169.469 24.9494 cv
171.914 24.9494 li
171.914 120.716 li
172.507 120.716 li
171.914 120.716 li
171.914 120.748 171.977 120.779 172.088 120.802 cv
172.198 120.825 172.351 120.838 172.507 120.838 cv
170.063 120.594 mo
171.914 120.594 li
171.914 25.1937 li
170.063 25.1937 li
170.063 120.594 li
0 0 0 0 cmyk
f
174.952 120.594 mo
173.1 120.594 li
173.1 21.3016 li
174.952 21.3016 li
174.952 120.594 li
.155894 .125721 .129073 0 cmyk
f
175.545 120.838 mo
172.507 120.838 li
172.507 120.838 li
172.351 120.838 172.198 120.825 172.088 120.802 cv
171.977 120.779 171.914 120.748 171.914 120.716 cv
172.507 120.716 li
171.914 120.716 li
171.914 24.9494 li
171.914 21.1795 li
171.914 21.1474 171.977 21.1158 172.088 21.093 cv
172.198 21.0702 172.351 21.0573 172.507 21.0573 cv
175.545 21.0573 li
175.701 21.0573 175.854 21.0702 175.964 21.093 cv
176.075 21.1158 176.138 21.1474 176.138 21.1795 cv
176.138 23.3372 li
175.545 23.3372 li
175.389 23.3372 175.236 23.3502 175.125 23.373 cv
175.015 23.3956 174.952 23.4271 174.952 23.4593 cv
174.952 120.716 li
175.545 120.716 li
174.952 120.716 li
174.952 120.748 175.015 120.779 175.125 120.802 cv
175.236 120.825 175.389 120.838 175.545 120.838 cv
173.1 120.594 mo
174.952 120.594 li
174.952 21.3016 li
173.1 21.3016 li
173.1 120.594 li
0 0 0 0 cmyk
f
177.989 120.594 mo
176.138 120.594 li
176.138 23.5814 li
177.989 23.5814 li
177.989 120.594 li
.155894 .125721 .129073 0 cmyk
f
178.583 120.838 mo
175.545 120.838 li
175.545 120.838 li
175.389 120.838 175.236 120.825 175.125 120.802 cv
175.015 120.779 174.952 120.748 174.952 120.716 cv
175.545 120.716 li
174.952 120.716 li
174.952 23.4593 li
174.952 23.4271 175.015 23.3956 175.125 23.373 cv
175.236 23.3502 175.389 23.3372 175.545 23.3372 cv
176.138 23.3372 li
177.989 23.3372 li
177.989 120.716 li
178.583 120.716 li
177.989 120.716 li
177.989 120.748 178.053 120.779 178.163 120.802 cv
178.274 120.825 178.426 120.838 178.583 120.838 cv
176.138 120.594 mo
177.989 120.594 li
177.989 23.5814 li
176.138 23.5814 li
176.138 120.594 li
0 0 0 0 cmyk
f
181.027 120.594 mo
179.176 120.594 li
179.176 18.9697 li
181.027 18.9697 li
181.027 120.594 li
.155894 .125721 .129073 0 cmyk
f
181.62 120.838 mo
178.583 120.838 li
178.583 120.838 li
178.426 120.838 178.274 120.825 178.163 120.802 cv
178.053 120.779 177.989 120.748 177.989 120.716 cv
178.583 120.716 li
177.989 120.716 li
177.989 23.3372 li
177.989 18.8474 li
177.989 18.8152 178.053 18.7839 178.163 18.7611 cv
178.274 18.7383 178.426 18.7253 178.583 18.7253 cv
181.027 18.7253 li
181.027 120.716 li
181.62 120.716 li
181.027 120.716 li
181.027 120.748 181.09 120.779 181.201 120.802 cv
181.311 120.825 181.464 120.838 181.62 120.838 cv
179.176 120.594 mo
181.027 120.594 li
181.027 18.9697 li
179.176 18.9697 li
179.176 120.594 li
0 0 0 0 cmyk
f
184.065 120.594 mo
182.214 120.594 li
182.214 17.5235 li
184.065 17.5235 li
184.065 120.594 li
.155894 .125721 .129073 0 cmyk
f
184.658 120.838 mo
181.62 120.838 li
181.62 120.838 li
181.464 120.838 181.311 120.825 181.201 120.802 cv
181.09 120.779 181.027 120.748 181.027 120.716 cv
181.62 120.716 li
181.027 120.716 li
181.027 18.7253 li
181.027 17.4012 li
181.027 17.3691 181.09 17.3377 181.201 17.3149 cv
181.311 17.2922 181.464 17.2792 181.62 17.2792 cv
184.658 17.2792 li
184.814 17.2792 184.967 17.2922 185.078 17.3149 cv
185.188 17.3377 185.251 17.3691 185.251 17.4012 cv
185.251 18.0577 li
184.658 18.0577 li
184.502 18.0577 184.349 18.0707 184.239 18.0935 cv
184.128 18.116 184.065 18.1476 184.065 18.1798 cv
184.065 120.716 li
184.658 120.716 li
184.065 120.716 li
184.065 120.748 184.128 120.779 184.239 120.802 cv
184.349 120.825 184.502 120.838 184.658 120.838 cv
182.214 120.594 mo
184.065 120.594 li
184.065 17.5235 li
182.214 17.5235 li
182.214 120.594 li
0 0 0 0 cmyk
f
187.102 120.594 mo
185.251 120.594 li
185.251 18.3018 li
187.102 18.3018 li
187.102 120.594 li
.155894 .125721 .129073 0 cmyk
f
187.696 120.838 mo
184.658 120.838 li
184.658 120.838 li
184.502 120.838 184.349 120.825 184.239 120.802 cv
184.128 120.779 184.065 120.748 184.065 120.716 cv
184.658 120.716 li
184.065 120.716 li
184.065 18.1798 li
184.065 18.1476 184.128 18.116 184.239 18.0935 cv
184.349 18.0707 184.502 18.0577 184.658 18.0577 cv
185.251 18.0577 li
187.696 18.0577 li
187.852 18.0577 188.005 18.0707 188.115 18.0935 cv
188.226 18.116 188.289 18.1476 188.289 18.1798 cv
188.289 18.2237 li
187.696 18.2237 li
187.54 18.2237 187.387 18.2367 187.276 18.2595 cv
187.166 18.2822 187.102 18.3136 187.102 18.3458 cv
187.102 120.716 li
187.696 120.716 li
187.102 120.716 li
187.102 120.748 187.166 120.779 187.276 120.802 cv
187.387 120.825 187.54 120.838 187.696 120.838 cv
185.251 120.594 mo
187.102 120.594 li
187.102 18.3018 li
185.251 18.3018 li
185.251 120.594 li
0 0 0 0 cmyk
f
190.14 120.594 mo
188.289 120.594 li
188.289 18.468 li
190.14 18.468 li
190.14 120.594 li
.155894 .125721 .129073 0 cmyk
f
190.733 120.838 mo
187.696 120.838 li
187.696 120.838 li
187.54 120.838 187.387 120.825 187.276 120.802 cv
187.166 120.779 187.102 120.748 187.102 120.716 cv
187.696 120.716 li
187.102 120.716 li
187.102 18.3458 li
187.102 18.3136 187.166 18.2822 187.276 18.2595 cv
187.387 18.2367 187.54 18.2237 187.696 18.2237 cv
188.289 18.2237 li
190.14 18.2237 li
190.14 120.716 li
190.733 120.716 li
190.14 120.716 li
190.14 120.748 190.203 120.779 190.314 120.802 cv
190.424 120.825 190.577 120.838 190.733 120.838 cv
188.289 120.594 mo
190.14 120.594 li
190.14 18.468 li
188.289 18.468 li
188.289 120.594 li
0 0 0 0 cmyk
f
193.178 120.594 mo
191.327 120.594 li
191.327 10.2996 li
193.178 10.2996 li
193.178 120.594 li
.155894 .125721 .129073 0 cmyk
f
193.771 120.838 mo
190.733 120.838 li
190.733 120.838 li
190.577 120.838 190.424 120.825 190.314 120.802 cv
190.203 120.779 190.14 120.748 190.14 120.716 cv
190.733 120.716 li
190.14 120.716 li
190.14 18.2237 li
190.14 10.1773 li
190.14 10.1452 190.203 10.1138 190.314 10.091 cv
190.424 10.0683 190.577 10.0553 190.733 10.0553 cv
193.771 10.0553 li
193.927 10.0553 194.08 10.0683 194.191 10.091 cv
194.301 10.1138 194.365 10.1452 194.365 10.1773 cv
194.365 12.6673 li
193.771 12.6673 li
193.615 12.6673 193.462 12.6803 193.352 12.703 cv
193.241 12.7258 193.178 12.7574 193.178 12.7895 cv
193.178 120.716 li
193.771 120.716 li
193.178 120.716 li
193.178 120.748 193.241 120.779 193.352 120.802 cv
193.462 120.825 193.615 120.838 193.771 120.838 cv
191.327 120.594 mo
193.178 120.594 li
193.178 10.2996 li
191.327 10.2996 li
191.327 120.594 li
0 0 0 0 cmyk
f
196.216 120.594 mo
194.365 120.594 li
194.364 12.9116 li
196.216 12.9116 li
196.216 120.594 li
.155894 .125721 .129073 0 cmyk
f
196.809 120.838 mo
193.771 120.838 li
193.771 120.838 li
193.615 120.838 193.462 120.825 193.352 120.802 cv
193.241 120.779 193.178 120.748 193.178 120.716 cv
193.771 120.716 li
193.178 120.716 li
193.178 12.7895 li
193.178 12.7574 193.241 12.7258 193.352 12.703 cv
193.462 12.6803 193.615 12.6673 193.771 12.6673 cv
194.365 12.6673 li
196.809 12.6673 li
196.965 12.6673 197.118 12.6803 197.228 12.703 cv
197.339 12.7258 197.402 12.7574 197.402 12.7895 cv
197.402 13.3317 li
196.809 13.3317 li
196.653 13.3317 196.5 13.3447 196.389 13.3675 cv
196.279 13.3902 196.216 13.4218 196.216 13.454 cv
196.216 120.716 li
196.809 120.716 li
196.216 120.716 li
196.216 120.748 196.279 120.779 196.389 120.802 cv
196.5 120.825 196.653 120.838 196.809 120.838 cv
194.365 120.594 mo
196.216 120.594 li
196.216 12.9116 li
194.364 12.9116 li
194.365 120.594 li
0 0 0 0 cmyk
f
199.253 120.594 mo
197.402 120.594 li
197.402 13.576 li
199.253 13.576 li
199.253 120.594 li
.155894 .125721 .129073 0 cmyk
f
199.847 120.838 mo
196.809 120.838 li
196.809 120.838 li
196.653 120.838 196.5 120.825 196.389 120.802 cv
196.279 120.779 196.216 120.748 196.216 120.716 cv
196.809 120.716 li
196.216 120.716 li
196.216 13.454 li
196.216 13.4218 196.279 13.3902 196.389 13.3675 cv
196.5 13.3447 196.653 13.3317 196.809 13.3317 cv
197.402 13.3317 li
199.253 13.3317 li
199.253 120.716 li
199.847 120.716 li
199.253 120.716 li
199.253 120.748 199.317 120.779 199.427 120.802 cv
199.538 120.825 199.69 120.838 199.847 120.838 cv
197.402 120.594 mo
199.253 120.594 li
199.253 13.576 li
197.402 13.576 li
197.402 120.594 li
0 0 0 0 cmyk
f
202.291 120.594 mo
200.44 120.594 li
200.44 8.79811 li
202.291 8.79811 li
202.291 120.594 li
.155894 .125721 .129073 0 cmyk
f
202.884 120.838 mo
199.847 120.838 li
199.847 120.838 li
199.69 120.838 199.538 120.825 199.427 120.802 cv
199.317 120.779 199.253 120.748 199.253 120.716 cv
199.847 120.716 li
199.253 120.716 li
199.253 13.3317 li
199.253 8.67585 li
199.253 8.64369 199.317 8.61233 199.427 8.58955 cv
199.538 8.56678 199.69 8.55379 199.847 8.55379 cv
202.884 8.55379 li
203.041 8.55379 203.193 8.56678 203.304 8.58955 cv
203.414 8.61233 203.477 8.64369 203.477 8.67585 cv
203.477 11.3873 li
202.884 11.3873 li
202.728 11.3873 202.575 11.4003 202.465 11.4231 cv
202.354 11.4459 202.291 11.4772 202.291 11.5094 cv
202.291 120.716 li
202.884 120.716 li
202.291 120.716 li
202.291 120.748 202.354 120.779 202.465 120.802 cv
202.575 120.825 202.728 120.838 202.884 120.838 cv
200.44 120.594 mo
202.291 120.594 li
202.291 8.79811 li
200.44 8.79811 li
200.44 120.594 li
0 0 0 0 cmyk
f
205.329 120.594 mo
203.477 120.594 li
203.477 11.6317 li
205.329 11.6317 li
205.329 120.594 li
.155894 .125721 .129073 0 cmyk
f
205.922 120.838 mo
202.884 120.838 li
202.884 120.838 li
202.728 120.838 202.575 120.825 202.465 120.802 cv
202.354 120.779 202.291 120.748 202.291 120.716 cv
202.884 120.716 li
202.291 120.716 li
202.291 11.5094 li
202.291 11.4772 202.354 11.4459 202.465 11.4231 cv
202.575 11.4003 202.728 11.3873 202.884 11.3873 cv
203.477 11.3873 li
205.329 11.3873 li
205.329 120.716 li
205.922 120.716 li
205.329 120.716 li
205.329 120.748 205.392 120.779 205.503 120.802 cv
205.613 120.825 205.766 120.838 205.922 120.838 cv
203.477 120.594 mo
205.329 120.594 li
205.329 11.6317 li
203.477 11.6317 li
203.477 120.594 li
0 0 0 0 cmyk
f
208.366 120.594 mo
206.515 120.594 li
206.515 10.3549 li
208.366 10.3549 li
208.366 120.594 li
.155894 .125721 .129073 0 cmyk
f
208.96 120.838 mo
205.922 120.838 li
205.922 120.838 li
205.766 120.838 205.613 120.825 205.503 120.802 cv
205.392 120.779 205.329 120.748 205.329 120.716 cv
205.922 120.716 li
205.329 120.716 li
205.329 11.3873 li
205.329 10.2327 li
205.329 10.2005 205.392 10.1691 205.503 10.1464 cv
205.613 10.1236 205.766 10.1106 205.922 10.1106 cv
208.366 10.1106 li
208.366 120.716 li
208.96 120.716 li
208.366 120.716 li
208.366 120.748 208.43 120.779 208.54 120.802 cv
208.651 120.825 208.804 120.838 208.96 120.838 cv
206.515 120.594 mo
208.366 120.594 li
208.366 10.3549 li
206.515 10.3549 li
206.515 120.594 li
0 0 0 0 cmyk
f
211.404 120.594 mo
209.553 120.594 li
209.553 9.0748 li
211.404 9.075 li
211.404 120.594 li
.155894 .125721 .129073 0 cmyk
f
211.997 120.838 mo
208.96 120.838 li
208.96 120.838 li
208.804 120.838 208.651 120.825 208.54 120.802 cv
208.43 120.779 208.366 120.748 208.366 120.716 cv
208.96 120.716 li
208.366 120.716 li
208.366 10.1106 li
208.366 8.95273 li
208.366 8.92057 208.43 8.88921 208.54 8.86643 cv
208.651 8.84366 208.804 8.83068 208.96 8.83068 cv
211.997 8.83068 li
212.154 8.83068 212.307 8.84366 212.417 8.86643 cv
212.527 8.88921 212.591 8.92057 212.591 8.95273 cv
212.591 9.88906 li
211.997 9.88906 li
211.841 9.88906 211.688 9.90205 211.578 9.92482 cv
211.467 9.94759 211.404 9.97916 211.404 10.0113 cv
211.404 120.716 li
211.997 120.716 li
211.404 120.716 li
211.404 120.748 211.467 120.779 211.578 120.802 cv
211.688 120.825 211.841 120.838 211.997 120.838 cv
209.553 120.594 mo
211.404 120.594 li
211.404 9.075 li
209.553 9.0748 li
209.553 120.594 li
0 0 0 0 cmyk
f
214.442 120.594 mo
212.591 120.594 li
212.591 10.1334 li
214.442 10.1334 li
214.442 120.594 li
.155894 .125721 .129073 0 cmyk
f
215.035 120.838 mo
211.997 120.838 li
211.997 120.838 li
211.841 120.838 211.688 120.825 211.578 120.802 cv
211.467 120.779 211.404 120.748 211.404 120.716 cv
211.997 120.716 li
211.404 120.716 li
211.404 10.0113 li
211.404 9.97916 211.467 9.94759 211.578 9.92482 cv
211.688 9.90205 211.841 9.88906 211.997 9.88906 cv
212.591 9.88906 li
215.035 9.88906 li
215.191 9.88906 215.344 9.90205 215.455 9.92482 cv
215.565 9.94759 215.628 9.97916 215.628 10.0113 cv
215.628 11.9443 li
215.035 11.9443 li
214.879 11.9443 214.726 11.9573 214.616 11.9801 cv
214.505 12.0028 214.442 12.0342 214.442 12.0664 cv
214.442 120.716 li
215.035 120.716 li
214.442 120.716 li
214.442 120.748 214.505 120.779 214.616 120.802 cv
214.726 120.825 214.879 120.838 215.035 120.838 cv
212.591 120.594 mo
214.442 120.594 li
214.442 10.1334 li
212.591 10.1334 li
212.591 120.594 li
0 0 0 0 cmyk
f
217.48 120.594 mo
215.628 120.594 li
215.628 12.1886 li
217.48 12.1886 li
217.48 120.594 li
.155894 .125721 .129073 0 cmyk
f
218.073 120.838 mo
215.035 120.838 li
215.035 120.838 li
214.879 120.838 214.726 120.825 214.616 120.802 cv
214.505 120.779 214.442 120.748 214.442 120.716 cv
215.035 120.716 li
214.442 120.716 li
214.442 12.0664 li
214.442 12.0342 214.505 12.0028 214.616 11.9801 cv
214.726 11.9573 214.879 11.9443 215.035 11.9443 cv
215.628 11.9443 li
218.073 11.9443 li
218.229 11.9443 218.382 11.9573 218.492 11.9801 cv
218.603 12.0028 218.666 12.0342 218.666 12.0664 cv
218.666 15.1101 li
218.073 15.1101 li
217.917 15.1101 217.764 15.1231 217.653 15.1458 cv
217.543 15.1686 217.48 15.2 217.48 15.2321 cv
217.48 120.716 li
218.073 120.716 li
217.48 120.716 li
217.48 120.748 217.543 120.779 217.653 120.802 cv
217.764 120.825 217.917 120.838 218.073 120.838 cv
215.628 120.594 mo
217.48 120.594 li
217.48 12.1886 li
215.628 12.1886 li
215.628 120.594 li
0 0 0 0 cmyk
f
220.517 120.594 mo
218.666 120.594 li
218.666 15.3544 li
220.517 15.3544 li
220.517 120.594 li
.155894 .125721 .129073 0 cmyk
f
221.111 120.838 mo
218.073 120.838 li
218.073 120.838 li
217.917 120.838 217.764 120.825 217.653 120.802 cv
217.543 120.779 217.48 120.748 217.48 120.716 cv
218.073 120.716 li
217.48 120.716 li
217.48 15.2321 li
217.48 15.2 217.543 15.1686 217.653 15.1458 cv
217.764 15.1231 217.917 15.1101 218.073 15.1101 cv
218.666 15.1101 li
220.517 15.1101 li
220.517 120.716 li
221.111 120.716 li
220.517 120.716 li
220.517 120.748 220.58 120.779 220.691 120.802 cv
220.802 120.825 220.954 120.838 221.111 120.838 cv
218.666 120.594 mo
220.517 120.594 li
220.517 15.3544 li
218.666 15.3544 li
218.666 120.594 li
0 0 0 0 cmyk
f
223.555 120.594 mo
221.704 120.594 li
221.704 12.4653 li
223.555 12.4653 li
223.555 120.594 li
.155894 .125721 .129073 0 cmyk
f
224.148 120.838 mo
221.111 120.838 li
221.111 120.838 li
220.954 120.838 220.802 120.825 220.691 120.802 cv
220.58 120.779 220.517 120.748 220.517 120.716 cv
221.111 120.716 li
220.517 120.716 li
220.517 15.1101 li
220.517 12.3432 li
220.517 12.3111 220.581 12.2797 220.691 12.2569 cv
220.802 12.2342 220.954 12.2212 221.111 12.2212 cv
224.148 12.2212 li
224.305 12.2212 224.457 12.2342 224.568 12.2569 cv
224.678 12.2797 224.742 12.3111 224.742 12.3432 cv
224.742 13.2764 li
224.148 13.2764 li
223.992 13.2764 223.839 13.2894 223.729 13.3121 cv
223.618 13.3349 223.555 13.3663 223.555 13.3984 cv
223.555 120.716 li
224.148 120.716 li
223.555 120.716 li
223.555 120.748 223.618 120.779 223.729 120.802 cv
223.839 120.825 223.992 120.838 224.148 120.838 cv
221.704 120.594 mo
223.555 120.594 li
223.555 12.4653 li
221.704 12.4653 li
221.704 120.594 li
0 0 0 0 cmyk
f
226.593 120.594 mo
224.742 120.594 li
224.742 13.5207 li
226.593 13.5207 li
226.593 120.594 li
.155894 .125721 .129073 0 cmyk
f
227.186 120.838 mo
224.148 120.838 li
224.148 120.838 li
223.992 120.838 223.839 120.825 223.729 120.802 cv
223.618 120.779 223.555 120.748 223.555 120.716 cv
224.148 120.716 li
223.555 120.716 li
223.555 13.3984 li
223.555 13.3663 223.618 13.3349 223.729 13.3121 cv
223.839 13.2894 223.992 13.2764 224.148 13.2764 cv
224.742 13.2764 li
227.186 13.2764 li
227.342 13.2764 227.495 13.2894 227.606 13.3121 cv
227.716 13.3349 227.779 13.3663 227.779 13.3984 cv
227.779 17.2792 li
227.186 17.2792 li
227.03 17.2792 226.877 17.2922 226.767 17.3149 cv
226.656 17.3377 226.593 17.3691 226.593 17.4012 cv
226.593 120.716 li
227.186 120.716 li
226.593 120.716 li
226.593 120.748 226.656 120.779 226.767 120.802 cv
226.877 120.825 227.03 120.838 227.186 120.838 cv
224.742 120.594 mo
226.593 120.594 li
226.593 13.5207 li
224.742 13.5207 li
224.742 120.594 li
0 0 0 0 cmyk
f
229.63 120.594 mo
227.779 120.594 li
227.779 17.5235 li
229.63 17.5235 li
229.63 120.594 li
.155894 .125721 .129073 0 cmyk
f
230.224 120.838 mo
227.186 120.838 li
227.186 120.838 li
227.03 120.838 226.877 120.825 226.767 120.802 cv
226.656 120.779 226.593 120.748 226.593 120.716 cv
227.186 120.716 li
226.593 120.716 li
226.593 17.4012 li
226.593 17.3691 226.656 17.3377 226.767 17.3149 cv
226.877 17.2922 227.03 17.2792 227.186 17.2792 cv
227.779 17.2792 li
229.63 17.2792 li
229.63 120.716 li
230.224 120.716 li
229.63 120.716 li
229.63 120.748 229.694 120.779 229.804 120.802 cv
229.915 120.825 230.068 120.838 230.224 120.838 cv
227.779 120.594 mo
229.63 120.594 li
229.63 17.5235 li
227.779 17.5235 li
227.779 120.594 li
0 0 0 0 cmyk
f
232.668 120.594 mo
230.817 120.594 li
230.817 15.5791 li
232.668 15.5791 li
232.668 120.594 li
.155894 .125721 .129073 0 cmyk
f
233.262 120.838 mo
230.224 120.838 li
230.224 120.838 li
230.068 120.838 229.915 120.825 229.804 120.802 cv
229.694 120.779 229.63 120.748 229.63 120.716 cv
230.224 120.716 li
229.63 120.716 li
229.63 17.2792 li
229.63 15.4569 li
229.63 15.4247 229.694 15.3934 229.804 15.3706 cv
229.915 15.3478 230.068 15.3348 230.224 15.3348 cv
233.262 15.3348 li
233.418 15.3348 233.571 15.3478 233.681 15.3706 cv
233.792 15.3934 233.855 15.4247 233.855 15.4569 cv
233.855 21.282 li
233.262 21.282 li
233.105 21.282 232.952 21.295 232.842 21.3178 cv
232.732 21.3405 232.668 21.3719 232.668 21.4041 cv
232.668 120.716 li
233.262 120.716 li
232.668 120.716 li
232.668 120.748 232.731 120.779 232.842 120.802 cv
232.952 120.825 233.105 120.838 233.262 120.838 cv
230.817 120.594 mo
232.668 120.594 li
232.668 15.5791 li
230.817 15.5791 li
230.817 120.594 li
0 0 0 0 cmyk
f
235.706 120.594 mo
233.855 120.594 li
233.855 21.5263 li
235.706 21.5263 li
235.706 120.594 li
.155894 .125721 .129073 0 cmyk
f
236.299 120.838 mo
233.262 120.838 li
233.262 120.838 li
233.105 120.838 232.952 120.825 232.842 120.802 cv
232.731 120.779 232.668 120.748 232.668 120.716 cv
233.262 120.716 li
232.668 120.716 li
232.668 21.4041 li
232.668 21.3719 232.732 21.3405 232.842 21.3178 cv
232.952 21.295 233.105 21.282 233.262 21.282 cv
233.855 21.282 li
236.299 21.282 li
236.455 21.282 236.608 21.295 236.719 21.3178 cv
236.829 21.3405 236.893 21.3719 236.893 21.4041 cv
236.893 22.4481 li
236.299 22.4481 li
236.143 22.4481 235.99 22.461 235.88 22.4838 cv
235.769 22.5066 235.706 22.538 235.706 22.5701 cv
235.706 120.716 li
236.299 120.716 li
235.706 120.716 li
235.706 120.748 235.769 120.779 235.88 120.802 cv
235.99 120.825 236.143 120.838 236.299 120.838 cv
233.855 120.594 mo
235.706 120.594 li
235.706 21.5263 li
233.855 21.5263 li
233.855 120.594 li
0 0 0 0 cmyk
f
238.744 120.594 mo
236.893 120.594 li
236.892 22.6922 li
238.744 22.6924 li
238.744 120.594 li
.155894 .125721 .129073 0 cmyk
f
239.337 120.838 mo
236.299 120.838 li
236.299 120.838 li
236.143 120.838 235.99 120.825 235.88 120.802 cv
235.769 120.779 235.706 120.748 235.706 120.716 cv
236.299 120.716 li
235.706 120.716 li
235.706 22.5701 li
235.706 22.538 235.769 22.5066 235.88 22.4838 cv
235.99 22.461 236.143 22.4481 236.299 22.4481 cv
236.893 22.4481 li
239.337 22.4481 li
239.493 22.4481 239.646 22.461 239.756 22.4838 cv
239.867 22.5066 239.93 22.538 239.93 22.5701 cv
239.93 27.3367 li
239.337 27.3367 li
239.181 27.3367 239.028 27.3496 238.917 27.3724 cv
238.807 27.3952 238.744 27.4268 238.744 27.4589 cv
238.744 120.716 li
239.337 120.716 li
238.744 120.716 li
238.744 120.748 238.807 120.779 238.917 120.802 cv
239.028 120.825 239.181 120.838 239.337 120.838 cv
236.893 120.594 mo
238.744 120.594 li
238.744 22.6924 li
236.892 22.6922 li
236.893 120.594 li
0 0 0 0 cmyk
f
241.781 120.594 mo
239.93 120.594 li
239.93 27.581 li
241.781 27.581 li
241.781 120.594 li
.155894 .125721 .129073 0 cmyk
f
242.375 120.838 mo
239.337 120.838 li
239.337 120.838 li
239.181 120.838 239.028 120.825 238.917 120.802 cv
238.807 120.779 238.744 120.748 238.744 120.716 cv
239.337 120.716 li
238.744 120.716 li
238.744 27.4589 li
238.744 27.4268 238.807 27.3952 238.917 27.3724 cv
239.028 27.3496 239.181 27.3367 239.337 27.3367 cv
239.93 27.3367 li
242.375 27.3367 li
242.531 27.3367 242.684 27.3496 242.794 27.3724 cv
242.905 27.3952 242.968 27.4268 242.968 27.4589 cv
242.968 32.6749 li
242.375 32.6749 li
242.218 32.6749 242.066 32.6879 241.955 32.7107 cv
241.845 32.7335 241.781 32.7648 241.781 32.797 cv
241.781 120.716 li
242.375 120.716 li
241.781 120.716 li
241.781 120.748 241.844 120.779 241.955 120.802 cv
242.066 120.825 242.218 120.838 242.375 120.838 cv
239.93 120.594 mo
241.781 120.594 li
241.781 27.581 li
239.93 27.581 li
239.93 120.594 li
0 0 0 0 cmyk
f
244.819 120.594 mo
242.968 120.594 li
242.968 32.9193 li
244.819 32.9193 li
244.819 120.594 li
.155894 .125721 .129073 0 cmyk
f
245.412 120.838 mo
242.375 120.838 li
242.375 120.838 li
242.218 120.838 242.066 120.825 241.955 120.802 cv
241.844 120.779 241.781 120.748 241.781 120.716 cv
242.375 120.716 li
241.781 120.716 li
241.781 32.797 li
241.781 32.7648 241.845 32.7335 241.955 32.7107 cv
242.066 32.6879 242.218 32.6749 242.375 32.6749 cv
242.968 32.6749 li
244.819 32.6749 li
244.819 120.716 li
245.412 120.716 li
244.819 120.716 li
244.819 120.748 244.882 120.779 244.993 120.802 cv
245.103 120.825 245.256 120.838 245.412 120.838 cv
242.968 120.594 mo
244.819 120.594 li
244.819 32.9193 li
242.968 32.9193 li
242.968 120.594 li
0 0 0 0 cmyk
f
247.857 120.594 mo
246.005 120.594 li
246.005 30.1932 li
247.857 30.1932 li
247.857 120.594 li
.155894 .125721 .129073 0 cmyk
f
248.45 120.838 mo
245.412 120.838 li
245.412 120.838 li
245.256 120.838 245.103 120.825 244.993 120.802 cv
244.882 120.779 244.819 120.748 244.819 120.716 cv
245.412 120.716 li
244.819 120.716 li
244.819 32.6749 li
244.819 30.0709 li
244.819 30.0388 244.882 30.0074 244.993 29.9846 cv
245.103 29.9618 245.256 29.9489 245.412 29.9489 cv
248.45 29.9489 li
248.606 29.9489 248.759 29.9618 248.87 29.9846 cv
248.98 30.0074 249.043 30.0388 249.043 30.0709 cv
249.043 36.0067 li
248.45 36.0067 li
248.294 36.0067 248.141 36.0197 248.031 36.0425 cv
247.92 36.0653 247.857 36.0968 247.857 36.129 cv
247.857 120.716 li
248.45 120.716 li
247.857 120.716 li
247.857 120.748 247.92 120.779 248.031 120.802 cv
248.141 120.825 248.294 120.838 248.45 120.838 cv
246.005 120.594 mo
247.857 120.594 li
247.857 30.1932 li
246.005 30.1932 li
246.005 120.594 li
0 0 0 0 cmyk
f
250.895 120.594 mo
249.043 120.594 li
249.043 36.251 li
250.895 36.251 li
250.895 120.594 li
.155894 .125721 .129073 0 cmyk
f
251.488 120.838 mo
248.45 120.838 li
248.45 120.838 li
248.294 120.838 248.141 120.825 248.031 120.802 cv
247.92 120.779 247.857 120.748 247.857 120.716 cv
248.45 120.716 li
247.857 120.716 li
247.857 36.129 li
247.857 36.0968 247.92 36.0653 248.031 36.0425 cv
248.141 36.0197 248.294 36.0067 248.45 36.0067 cv
249.043 36.0067 li
251.488 36.0067 li
251.644 36.0067 251.797 36.0197 251.907 36.0425 cv
252.018 36.0653 252.081 36.0968 252.081 36.129 cv
252.081 38.0098 li
251.488 38.0098 li
251.332 38.0098 251.179 38.0228 251.068 38.0456 cv
250.958 38.0684 250.895 38.0997 250.895 38.1319 cv
250.895 120.716 li
251.488 120.716 li
250.895 120.716 li
250.895 120.748 250.958 120.779 251.068 120.802 cv
251.179 120.825 251.332 120.838 251.488 120.838 cv
249.043 120.594 mo
250.895 120.594 li
250.895 36.251 li
249.043 36.251 li
249.043 120.594 li
0 0 0 0 cmyk
f
253.932 120.594 mo
252.081 120.594 li
252.081 38.2541 li
253.932 38.2541 li
253.932 120.594 li
.155894 .125721 .129073 0 cmyk
f
254.526 120.838 mo
251.488 120.838 li
251.488 120.838 li
251.332 120.838 251.179 120.825 251.068 120.802 cv
250.958 120.779 250.895 120.748 250.895 120.716 cv
251.488 120.716 li
250.895 120.716 li
250.895 38.1319 li
250.895 38.0997 250.958 38.0684 251.068 38.0456 cv
251.179 38.0228 251.332 38.0098 251.488 38.0098 cv
252.081 38.0098 li
254.526 38.0098 li
254.682 38.0098 254.835 38.0228 254.945 38.0456 cv
255.056 38.0684 255.119 38.0997 255.119 38.1319 cv
255.119 45.846 li
254.526 45.846 li
254.369 45.846 254.216 45.859 254.106 45.8818 cv
253.996 45.9046 253.932 45.9361 253.932 45.9681 cv
253.932 120.716 li
254.526 120.716 li
253.932 120.716 li
253.932 120.748 253.995 120.779 254.106 120.802 cv
254.216 120.825 254.369 120.838 254.526 120.838 cv
252.081 120.594 mo
253.932 120.594 li
253.932 38.2541 li
252.081 38.2541 li
252.081 120.594 li
0 0 0 0 cmyk
f
256.97 120.594 mo
255.119 120.594 li
255.119 46.0904 li
256.97 46.0904 li
256.97 120.594 li
.155894 .125721 .129073 0 cmyk
f
257.563 120.838 mo
254.526 120.838 li
254.526 120.838 li
254.369 120.838 254.216 120.825 254.106 120.802 cv
253.995 120.779 253.932 120.748 253.932 120.716 cv
254.526 120.716 li
253.932 120.716 li
253.932 45.9681 li
253.932 45.9361 253.996 45.9046 254.106 45.8818 cv
254.216 45.859 254.369 45.846 254.526 45.846 cv
255.119 45.846 li
256.97 45.846 li
256.97 120.716 li
257.563 120.716 li
256.97 120.716 li
256.97 120.748 257.033 120.779 257.144 120.802 cv
257.254 120.825 257.407 120.838 257.563 120.838 cv
255.119 120.594 mo
256.97 120.594 li
256.97 46.0904 li
255.119 46.0904 li
255.119 120.594 li
0 0 0 0 cmyk
f
260.008 120.594 mo
258.156 120.594 li
258.156 40.8108 li
260.008 40.8108 li
260.008 120.594 li
.155894 .125721 .129073 0 cmyk
f
260.601 120.838 mo
257.563 120.838 li
257.563 120.838 li
257.407 120.838 257.254 120.825 257.144 120.802 cv
257.033 120.779 256.97 120.748 256.97 120.716 cv
257.563 120.716 li
256.97 120.716 li
256.97 45.846 li
256.97 40.6885 li
256.97 40.6564 257.033 40.625 257.144 40.6022 cv
257.254 40.5795 257.407 40.5665 257.563 40.5665 cv
260.601 40.5665 li
260.757 40.5665 260.91 40.5795 261.02 40.6022 cv
261.131 40.625 261.194 40.6564 261.194 40.6885 cv
261.194 47.6244 li
260.601 47.6244 li
260.445 47.6244 260.292 47.6374 260.181 47.6602 cv
260.071 47.6829 260.008 47.7143 260.008 47.7465 cv
260.008 120.716 li
260.601 120.716 li
260.008 120.716 li
260.008 120.748 260.071 120.779 260.181 120.802 cv
260.292 120.825 260.445 120.838 260.601 120.838 cv
258.156 120.594 mo
260.008 120.594 li
260.008 40.8108 li
258.156 40.8108 li
258.156 120.594 li
0 0 0 0 cmyk
f
263.045 120.594 mo
261.194 120.594 li
261.194 47.8687 li
263.045 47.8687 li
263.045 120.594 li
.155894 .125721 .129073 0 cmyk
f
263.639 120.838 mo
260.601 120.838 li
260.601 120.838 li
260.445 120.838 260.292 120.825 260.181 120.802 cv
260.071 120.779 260.008 120.748 260.008 120.716 cv
260.601 120.716 li
260.008 120.716 li
260.008 47.7465 li
260.008 47.7143 260.071 47.6829 260.181 47.6602 cv
260.292 47.6374 260.445 47.6244 260.601 47.6244 cv
261.194 47.6244 li
263.639 47.6244 li
263.795 47.6244 263.948 47.6374 264.058 47.6602 cv
264.169 47.6829 264.232 47.7143 264.232 47.7465 cv
264.232 51.624 li
263.639 51.624 li
263.482 51.624 263.33 51.637 263.219 51.6598 cv
263.109 51.6823 263.045 51.7139 263.045 51.7461 cv
263.045 120.716 li
263.639 120.716 li
263.045 120.716 li
263.045 120.748 263.109 120.779 263.219 120.802 cv
263.33 120.825 263.482 120.838 263.639 120.838 cv
261.194 120.594 mo
263.045 120.594 li
263.045 47.8687 li
261.194 47.8687 li
261.194 120.594 li
0 0 0 0 cmyk
f
266.083 120.594 mo
264.232 120.594 li
264.232 51.8681 li
266.083 51.8681 li
266.083 120.594 li
.155894 .125721 .129073 0 cmyk
f
266.676 120.838 mo
263.639 120.838 li
263.639 120.838 li
263.482 120.838 263.33 120.825 263.219 120.802 cv
263.109 120.779 263.045 120.748 263.045 120.716 cv
263.639 120.716 li
263.045 120.716 li
263.045 51.7461 li
263.045 51.7139 263.109 51.6823 263.219 51.6598 cv
263.33 51.637 263.482 51.624 263.639 51.624 cv
264.232 51.624 li
266.676 51.624 li
266.833 51.624 266.985 51.637 267.096 51.6598 cv
267.206 51.6823 267.27 51.7139 267.27 51.7461 cv
267.27 58.5157 li
266.676 58.5157 li
266.52 58.5157 266.367 58.5287 266.257 58.5515 cv
266.146 58.5742 266.083 58.6056 266.083 58.6378 cv
266.083 120.716 li
266.676 120.716 li
266.083 120.716 li
266.083 120.748 266.146 120.779 266.257 120.802 cv
266.367 120.825 266.52 120.838 266.676 120.838 cv
264.232 120.594 mo
266.083 120.594 li
266.083 51.8681 li
264.232 51.8681 li
264.232 120.594 li
0 0 0 0 cmyk
f
269.121 120.594 mo
267.27 120.594 li
267.27 58.76 li
269.121 58.76 li
269.121 120.594 li
.155894 .125721 .129073 0 cmyk
f
269.714 120.838 mo
266.676 120.838 li
266.676 120.838 li
266.52 120.838 266.367 120.825 266.257 120.802 cv
266.146 120.779 266.083 120.748 266.083 120.716 cv
266.676 120.716 li
266.083 120.716 li
266.083 58.6378 li
266.083 58.6056 266.146 58.5742 266.257 58.5515 cv
266.367 58.5287 266.52 58.5157 266.676 58.5157 cv
267.27 58.5157 li
269.121 58.5157 li
269.121 120.716 li
269.714 120.716 li
269.121 120.716 li
269.121 120.748 269.184 120.779 269.295 120.802 cv
269.405 120.825 269.558 120.838 269.714 120.838 cv
267.27 120.594 mo
269.121 120.594 li
269.121 58.76 li
267.27 58.76 li
267.27 120.594 li
0 0 0 0 cmyk
f
272.159 120.594 mo
270.307 120.594 li
270.307 56.7601 li
272.159 56.7601 li
272.159 120.594 li
.155894 .125721 .129073 0 cmyk
f
272.752 120.838 mo
269.714 120.838 li
269.714 120.838 li
269.558 120.838 269.405 120.825 269.295 120.802 cv
269.184 120.779 269.121 120.748 269.121 120.716 cv
269.714 120.716 li
269.121 120.716 li
269.121 58.5157 li
269.121 56.6381 li
269.121 56.6059 269.184 56.5743 269.295 56.5516 cv
269.405 56.529 269.558 56.5158 269.714 56.5158 cv
272.752 56.5158 li
272.908 56.5158 273.061 56.529 273.171 56.5518 cv
273.282 56.5743 273.345 56.6059 273.345 56.6381 cv
273.345 59.4602 li
272.752 59.4602 li
272.596 59.4602 272.443 59.4732 272.332 59.496 cv
272.222 59.5188 272.159 59.5501 272.159 59.5823 cv
272.159 120.716 li
272.752 120.716 li
272.159 120.716 li
272.159 120.748 272.222 120.779 272.332 120.802 cv
272.443 120.825 272.596 120.838 272.752 120.838 cv
270.307 120.594 mo
272.159 120.594 li
272.159 56.7601 li
270.307 56.7601 li
270.307 120.594 li
0 0 0 0 cmyk
f
275.196 120.594 mo
273.345 120.594 li
273.345 59.7045 li
275.196 59.7045 li
275.196 120.594 li
.155894 .125721 .129073 0 cmyk
f
275.79 120.838 mo
272.752 120.838 li
272.752 120.838 li
272.596 120.838 272.443 120.825 272.332 120.802 cv
272.222 120.779 272.159 120.748 272.159 120.716 cv
272.752 120.716 li
272.159 120.716 li
272.159 59.5823 li
272.159 59.5501 272.222 59.5188 272.332 59.496 cv
272.443 59.4732 272.596 59.4602 272.752 59.4602 cv
273.345 59.4602 li
275.79 59.4602 li
275.946 59.4602 276.099 59.4732 276.209 59.496 cv
276.32 59.5188 276.383 59.5501 276.383 59.5823 cv
276.383 65.629 li
275.79 65.629 li
275.633 65.629 275.48 65.6419 275.37 65.6647 cv
275.26 65.6875 275.196 65.7188 275.196 65.751 cv
275.196 120.716 li
275.79 120.716 li
275.196 120.716 li
275.196 120.748 275.259 120.779 275.37 120.802 cv
275.48 120.825 275.633 120.838 275.79 120.838 cv
273.345 120.594 mo
275.196 120.594 li
275.196 59.7045 li
273.345 59.7045 li
273.345 120.594 li
0 0 0 0 cmyk
f
278.234 120.594 mo
276.383 120.594 li
276.383 65.8731 li
278.234 65.8731 li
278.234 120.594 li
.155894 .125721 .129073 0 cmyk
f
278.827 120.838 mo
275.79 120.838 li
275.79 120.838 li
275.633 120.838 275.48 120.825 275.37 120.802 cv
275.259 120.779 275.196 120.748 275.196 120.716 cv
275.79 120.716 li
275.196 120.716 li
275.196 65.751 li
275.196 65.7188 275.26 65.6875 275.37 65.6647 cv
275.48 65.6419 275.633 65.629 275.79 65.629 cv
276.383 65.629 li
278.827 65.629 li
278.983 65.629 279.136 65.6419 279.247 65.6647 cv
279.357 65.6875 279.42 65.7188 279.42 65.751 cv
279.42 70.1853 li
278.827 70.1853 li
278.671 70.1853 278.518 70.1983 278.408 70.2211 cv
278.297 70.2439 278.234 70.2754 278.234 70.3076 cv
278.234 120.716 li
278.827 120.716 li
278.234 120.716 li
278.234 120.748 278.297 120.779 278.408 120.802 cv
278.518 120.825 278.671 120.838 278.827 120.838 cv
276.383 120.594 mo
278.234 120.594 li
278.234 65.8731 li
276.383 65.8731 li
276.383 120.594 li
0 0 0 0 cmyk
f
281.272 120.594 mo
279.42 120.594 li
279.42 70.4296 li
281.272 70.4296 li
281.272 120.594 li
.155894 .125721 .129073 0 cmyk
f
281.865 120.838 mo
278.827 120.838 li
278.827 120.838 li
278.671 120.838 278.518 120.825 278.408 120.802 cv
278.297 120.779 278.234 120.748 278.234 120.716 cv
278.827 120.716 li
278.234 120.716 li
278.234 70.3076 li
278.234 70.2754 278.297 70.2439 278.408 70.2211 cv
278.518 70.1983 278.671 70.1853 278.827 70.1853 cv
279.42 70.1853 li
281.272 70.1853 li
281.272 120.716 li
281.865 120.716 li
281.272 120.716 li
281.272 120.748 281.335 120.779 281.445 120.802 cv
281.556 120.825 281.709 120.838 281.865 120.838 cv
279.42 120.594 mo
281.272 120.594 li
281.272 70.4296 li
279.42 70.4296 li
279.42 120.594 li
0 0 0 0 cmyk
f
284.309 120.594 mo
282.458 120.594 li
282.458 69.7099 li
284.309 69.7099 li
284.309 120.594 li
.155894 .125721 .129073 0 cmyk
f
284.903 120.838 mo
281.865 120.838 li
281.865 120.838 li
281.709 120.838 281.556 120.825 281.445 120.802 cv
281.335 120.779 281.272 120.748 281.272 120.716 cv
281.865 120.716 li
281.272 120.716 li
281.272 70.1853 li
281.272 69.5878 li
281.272 69.5556 281.335 69.5241 281.445 69.5013 cv
281.556 69.4785 281.709 69.4656 281.865 69.4656 cv
284.903 69.4656 li
285.059 69.4656 285.212 69.4785 285.322 69.5013 cv
285.433 69.5241 285.496 69.5556 285.496 69.5878 cv
285.496 73.0776 li
284.903 73.0776 li
284.746 73.0776 284.594 73.0906 284.483 73.1134 cv
284.373 73.1361 284.309 73.1675 284.309 73.1997 cv
284.309 120.716 li
284.903 120.716 li
284.309 120.716 li
284.309 120.748 284.373 120.779 284.483 120.802 cv
284.594 120.825 284.746 120.838 284.903 120.838 cv
282.458 120.594 mo
284.309 120.594 li
284.309 69.7099 li
282.458 69.7099 li
282.458 120.594 li
0 0 0 0 cmyk
f
287.347 120.594 mo
285.496 120.594 li
285.496 73.3219 li
287.347 73.3219 li
287.347 120.594 li
.155894 .125721 .129073 0 cmyk
f
287.94 120.838 mo
284.903 120.838 li
284.903 120.838 li
284.746 120.838 284.594 120.825 284.483 120.802 cv
284.373 120.779 284.309 120.748 284.309 120.716 cv
284.903 120.716 li
284.309 120.716 li
284.309 73.1997 li
284.309 73.1675 284.373 73.1361 284.483 73.1134 cv
284.594 73.0906 284.746 73.0776 284.903 73.0776 cv
285.496 73.0776 li
287.94 73.0776 li
288.097 73.0776 288.249 73.0906 288.36 73.1134 cv
288.47 73.1361 288.534 73.1675 288.534 73.1997 cv
288.534 77.468 li
287.94 77.468 li
287.784 77.468 287.631 77.481 287.521 77.5037 cv
287.41 77.5265 287.347 77.5579 287.347 77.59 cv
287.347 120.716 li
287.94 120.716 li
287.347 120.716 li
287.347 120.748 287.41 120.779 287.521 120.802 cv
287.631 120.825 287.784 120.838 287.94 120.838 cv
285.496 120.594 mo
287.347 120.594 li
287.347 73.3219 li
285.496 73.3219 li
285.496 120.594 li
0 0 0 0 cmyk
f
290.385 120.594 mo
288.534 120.594 li
288.534 77.7123 li
290.385 77.7123 li
290.385 120.594 li
.155894 .125721 .129073 0 cmyk
f
290.978 120.838 mo
287.94 120.838 li
287.94 120.838 li
287.784 120.838 287.631 120.825 287.521 120.802 cv
287.41 120.779 287.347 120.748 287.347 120.716 cv
287.94 120.716 li
287.347 120.716 li
287.347 77.59 li
287.347 77.5579 287.41 77.5265 287.521 77.5037 cv
287.631 77.481 287.784 77.468 287.94 77.468 cv
288.534 77.468 li
290.978 77.468 li
291.134 77.468 291.287 77.481 291.398 77.5037 cv
291.508 77.5265 291.571 77.5579 291.571 77.59 cv
291.571 80.3015 li
290.978 80.3015 li
290.822 80.3015 290.669 80.3145 290.559 80.3373 cv
290.448 80.3601 290.385 80.3914 290.385 80.4236 cv
290.385 120.716 li
290.978 120.716 li
290.385 120.716 li
290.385 120.748 290.448 120.779 290.559 120.802 cv
290.669 120.825 290.822 120.838 290.978 120.838 cv
288.534 120.594 mo
290.385 120.594 li
290.385 77.7123 li
288.534 77.7123 li
288.534 120.594 li
0 0 0 0 cmyk
f
293.423 120.594 mo
291.571 120.594 li
291.571 80.5459 li
293.423 80.5459 li
293.423 120.594 li
.155894 .125721 .129073 0 cmyk
f
294.016 120.838 mo
290.978 120.838 li
290.978 120.838 li
290.822 120.838 290.669 120.825 290.559 120.802 cv
290.448 120.779 290.385 120.748 290.385 120.716 cv
290.978 120.716 li
290.385 120.716 li
290.385 80.4236 li
290.385 80.3914 290.448 80.3601 290.559 80.3373 cv
290.669 80.3145 290.822 80.3015 290.978 80.3015 cv
291.571 80.3015 li
294.016 80.3015 li
294.172 80.3015 294.325 80.3145 294.435 80.3373 cv
294.546 80.3601 294.609 80.3914 294.609 80.4236 cv
294.609 82.8582 li
294.016 82.8582 li
293.86 82.8582 293.707 82.8712 293.596 82.894 cv
293.486 82.9167 293.423 82.9483 293.423 82.9805 cv
293.423 120.716 li
294.016 120.716 li
293.423 120.716 li
293.423 120.748 293.486 120.779 293.596 120.802 cv
293.707 120.825 293.86 120.838 294.016 120.838 cv
291.571 120.594 mo
293.423 120.594 li
293.423 80.5459 li
291.571 80.5459 li
291.571 120.594 li
0 0 0 0 cmyk
f
296.46 120.594 mo
294.609 120.594 li
294.609 83.1025 li
296.46 83.1025 li
296.46 120.594 li
.155894 .125721 .129073 0 cmyk
f
297.054 120.838 mo
294.016 120.838 li
294.016 120.838 li
293.86 120.838 293.707 120.825 293.596 120.802 cv
293.486 120.779 293.423 120.748 293.423 120.716 cv
294.016 120.716 li
293.423 120.716 li
293.423 82.9805 li
293.423 82.9483 293.486 82.9167 293.596 82.894 cv
293.707 82.8712 293.86 82.8582 294.016 82.8582 cv
294.609 82.8582 li
297.054 82.8582 li
297.21 82.8582 297.363 82.8712 297.473 82.894 cv
297.584 82.9167 297.647 82.9483 297.647 82.9805 cv
297.647 84.0796 li
297.054 84.0796 li
296.897 84.0796 296.745 84.0926 296.634 84.1154 cv
296.524 84.1381 296.46 84.1695 296.46 84.2017 cv
296.46 120.716 li
297.054 120.716 li
296.46 120.716 li
296.46 120.748 296.523 120.779 296.634 120.802 cv
296.745 120.825 296.897 120.838 297.054 120.838 cv
294.609 120.594 mo
296.46 120.594 li
296.46 83.1025 li
294.609 83.1025 li
294.609 120.594 li
0 0 0 0 cmyk
f
299.498 120.594 mo
297.647 120.594 li
297.647 84.3239 li
299.498 84.3239 li
299.498 120.594 li
.155894 .125721 .129073 0 cmyk
f
300.091 120.838 mo
297.054 120.838 li
297.054 120.838 li
296.897 120.838 296.745 120.825 296.634 120.802 cv
296.523 120.779 296.46 120.748 296.46 120.716 cv
297.054 120.716 li
296.46 120.716 li
296.46 84.2017 li
296.46 84.1695 296.524 84.1381 296.634 84.1154 cv
296.745 84.0926 296.897 84.0796 297.054 84.0796 cv
297.647 84.0796 li
300.091 84.0796 li
300.247 84.0796 300.4 84.0926 300.511 84.1154 cv
300.621 84.1381 300.684 84.1695 300.684 84.2017 cv
300.684 87.2486 li
300.091 87.2486 li
299.935 87.2486 299.782 87.2617 299.672 87.2843 cv
299.561 87.3071 299.498 87.3387 299.498 87.3708 cv
299.498 120.716 li
300.091 120.716 li
299.498 120.716 li
299.498 120.748 299.561 120.779 299.672 120.802 cv
299.782 120.825 299.935 120.838 300.091 120.838 cv
297.647 120.594 mo
299.498 120.594 li
299.498 84.3239 li
297.647 84.3239 li
297.647 120.594 li
0 0 0 0 cmyk
f
302.536 120.594 mo
300.684 120.594 li
300.684 87.4929 li
302.536 87.4929 li
302.536 120.594 li
.155894 .125721 .129073 0 cmyk
f
303.129 120.838 mo
300.091 120.838 li
300.091 120.838 li
299.935 120.838 299.782 120.825 299.672 120.802 cv
299.561 120.779 299.498 120.748 299.498 120.716 cv
300.091 120.716 li
299.498 120.716 li
299.498 87.3708 li
299.498 87.3387 299.561 87.3071 299.672 87.2843 cv
299.782 87.2617 299.935 87.2486 300.091 87.2486 cv
300.684 87.2486 li
303.129 87.2486 li
303.285 87.2486 303.438 87.2617 303.549 87.2843 cv
303.659 87.3071 303.722 87.3387 303.722 87.3708 cv
303.722 89.2485 li
303.129 89.2485 li
302.973 89.2485 302.82 89.2615 302.709 89.2842 cv
302.599 89.307 302.536 89.3384 302.536 89.3705 cv
302.536 120.716 li
303.129 120.716 li
302.536 120.716 li
302.536 120.748 302.599 120.779 302.709 120.802 cv
302.82 120.825 302.973 120.838 303.129 120.838 cv
300.684 120.594 mo
302.536 120.594 li
302.536 87.4929 li
300.684 87.4929 li
300.684 120.594 li
0 0 0 0 cmyk
f
305.573 120.594 mo
303.722 120.594 li
303.722 89.4926 li
305.573 89.4926 li
305.573 120.594 li
.155894 .125721 .129073 0 cmyk
f
306.167 120.838 mo
303.129 120.838 li
303.129 120.838 li
302.973 120.838 302.82 120.825 302.709 120.802 cv
302.599 120.779 302.536 120.748 302.536 120.716 cv
303.129 120.716 li
302.536 120.716 li
302.536 89.3705 li
302.536 89.3384 302.599 89.307 302.709 89.2842 cv
302.82 89.2615 302.973 89.2485 303.129 89.2485 cv
303.722 89.2485 li
306.167 89.2485 li
306.323 89.2485 306.476 89.2615 306.586 89.2842 cv
306.697 89.307 306.76 89.3384 306.76 89.3705 cv
306.76 93.8602 li
306.167 93.8602 li
306.01 93.8602 305.858 93.8734 305.747 93.8959 cv
305.637 93.9187 305.573 93.9503 305.573 93.9824 cv
305.573 120.716 li
306.167 120.716 li
305.573 120.716 li
305.573 120.748 305.637 120.779 305.747 120.802 cv
305.858 120.825 306.01 120.838 306.167 120.838 cv
303.722 120.594 mo
305.573 120.594 li
305.573 89.4926 li
303.722 89.4926 li
303.722 120.594 li
0 0 0 0 cmyk
f
308.611 120.594 mo
306.76 120.594 li
306.76 94.1045 li
308.611 94.1045 li
308.611 120.594 li
.155894 .125721 .129073 0 cmyk
f
309.204 120.838 mo
306.167 120.838 li
306.167 120.838 li
306.01 120.838 305.858 120.825 305.747 120.802 cv
305.637 120.779 305.573 120.748 305.573 120.716 cv
306.167 120.716 li
305.573 120.716 li
305.573 93.9824 li
305.573 93.9503 305.637 93.9187 305.747 93.8959 cv
305.858 93.8734 306.01 93.8602 306.167 93.8602 cv
306.76 93.8602 li
308.611 93.8602 li
308.611 120.716 li
309.204 120.716 li
308.611 120.716 li
308.611 120.748 308.674 120.779 308.785 120.802 cv
308.895 120.825 309.048 120.838 309.204 120.838 cv
306.76 120.594 mo
308.611 120.594 li
308.611 94.1045 li
306.76 94.1045 li
306.76 120.594 li
0 0 0 0 cmyk
f
311.649 120.594 mo
309.798 120.594 li
309.798 93.4401 li
311.649 93.4401 li
311.649 120.594 li
.155894 .125721 .129073 0 cmyk
f
312.242 120.838 mo
309.204 120.838 li
309.204 120.838 li
309.048 120.838 308.895 120.825 308.785 120.802 cv
308.674 120.779 308.611 120.748 308.611 120.716 cv
309.204 120.716 li
308.611 120.716 li
308.611 93.8602 li
308.611 93.318 li
308.611 93.2858 308.674 93.2543 308.785 93.2317 cv
308.895 93.2089 309.048 93.1959 309.204 93.1959 cv
312.242 93.1959 li
312.398 93.1959 312.551 93.2089 312.662 93.2317 cv
312.772 93.2543 312.835 93.2858 312.835 93.318 cv
312.835 99.8076 li
312.242 99.8076 li
312.086 99.8076 311.933 99.8206 311.823 99.8433 cv
311.712 99.8661 311.649 99.8975 311.649 99.9296 cv
311.649 120.716 li
312.242 120.716 li
311.649 120.716 li
311.649 120.748 311.712 120.779 311.823 120.802 cv
311.933 120.825 312.086 120.838 312.242 120.838 cv
309.798 120.594 mo
311.649 120.594 li
311.649 93.4401 li
309.798 93.4401 li
309.798 120.594 li
0 0 0 0 cmyk
f
314.686 120.594 mo
312.835 120.594 li
312.835 100.052 li
314.686 100.052 li
314.686 120.594 li
.155894 .125721 .129073 0 cmyk
f
315.28 120.838 mo
312.242 120.838 li
312.242 120.838 li
312.086 120.838 311.933 120.825 311.823 120.802 cv
311.712 120.779 311.649 120.748 311.649 120.716 cv
312.242 120.716 li
311.649 120.716 li
311.649 99.9296 li
311.649 99.8975 311.712 99.8661 311.823 99.8433 cv
311.933 99.8206 312.086 99.8076 312.242 99.8076 cv
312.835 99.8076 li
314.686 99.8076 li
314.686 100.052 li
312.835 100.052 li
312.835 120.594 li
314.686 120.594 li
314.686 120.716 li
315.28 120.716 li
314.686 120.716 li
314.686 120.748 314.75 120.779 314.86 120.802 cv
314.971 120.825 315.123 120.838 315.28 120.838 cv
0 0 0 0 cmyk
f
317.724 120.594 mo
315.873 120.594 li
315.873 98.3289 li
317.724 98.3289 li
317.724 120.594 li
.155894 .125721 .129073 0 cmyk
f
318.317 120.838 mo
315.28 120.838 li
315.28 120.838 li
315.123 120.838 314.971 120.825 314.86 120.802 cv
314.75 120.779 314.686 120.748 314.686 120.716 cv
315.28 120.716 li
314.686 120.716 li
314.686 120.594 li
314.686 100.052 li
314.686 99.8076 li
314.686 98.2066 li
314.686 98.1744 314.75 98.1431 314.86 98.1203 cv
314.971 98.0975 315.123 98.0845 315.28 98.0845 cv
318.317 98.0845 li
318.474 98.0845 318.627 98.0975 318.737 98.1203 cv
318.848 98.1431 318.911 98.1744 318.911 98.2066 cv
318.911 102.42 li
318.317 102.42 li
318.161 102.42 318.009 102.433 317.898 102.455 cv
317.788 102.478 317.724 102.509 317.724 102.542 cv
317.724 120.716 li
318.317 120.716 li
317.724 120.716 li
317.724 120.748 317.787 120.779 317.898 120.802 cv
318.009 120.825 318.161 120.838 318.317 120.838 cv
315.873 120.594 mo
317.724 120.594 li
317.724 98.3289 li
315.873 98.3289 li
315.873 120.594 li
0 0 0 0 cmyk
f
320.762 120.594 mo
318.911 120.594 li
318.911 102.664 li
320.762 102.664 li
320.762 120.594 li
.155894 .125721 .129073 0 cmyk
f
321.355 120.838 mo
318.317 120.838 li
318.317 120.838 li
318.161 120.838 318.009 120.825 317.898 120.802 cv
317.787 120.779 317.724 120.748 317.724 120.716 cv
318.317 120.716 li
317.724 120.716 li
317.724 102.542 li
317.724 102.509 317.788 102.478 317.898 102.455 cv
318.009 102.433 318.161 102.42 318.317 102.42 cv
318.911 102.42 li
321.355 102.42 li
321.512 102.42 321.664 102.433 321.775 102.455 cv
321.885 102.478 321.948 102.509 321.948 102.542 cv
321.948 102.977 li
321.355 102.977 li
321.199 102.977 321.046 102.99 320.936 103.012 cv
320.825 103.035 320.762 103.066 320.762 103.099 cv
320.762 120.716 li
321.355 120.716 li
320.762 120.716 li
320.762 120.748 320.825 120.779 320.936 120.802 cv
321.046 120.825 321.199 120.838 321.355 120.838 cv
318.911 120.594 mo
320.762 120.594 li
320.762 102.664 li
318.911 102.664 li
318.911 120.594 li
0 0 0 0 cmyk
f
323.799 120.594 mo
321.948 120.594 li
321.948 103.221 li
323.799 103.221 li
323.799 120.594 li
.155894 .125721 .129073 0 cmyk
f
324.393 120.838 mo
321.355 120.838 li
321.355 120.838 li
321.199 120.838 321.046 120.825 320.936 120.802 cv
320.825 120.779 320.762 120.748 320.762 120.716 cv
321.355 120.716 li
320.762 120.716 li
320.762 103.099 li
320.762 103.066 320.825 103.035 320.936 103.012 cv
321.046 102.99 321.199 102.977 321.355 102.977 cv
321.948 102.977 li
324.393 102.977 li
324.549 102.977 324.702 102.99 324.813 103.012 cv
324.923 103.035 324.986 103.066 324.986 103.099 cv
324.986 103.644 li
324.393 103.644 li
324.237 103.644 324.084 103.657 323.973 103.68 cv
323.863 103.703 323.799 103.734 323.799 103.766 cv
323.799 120.716 li
324.393 120.716 li
323.799 120.716 li
323.799 120.748 323.863 120.779 323.973 120.802 cv
324.084 120.825 324.237 120.838 324.393 120.838 cv
321.948 120.594 mo
323.799 120.594 li
323.799 103.221 li
321.948 103.221 li
321.948 120.594 li
0 0 0 0 cmyk
f
326.837 120.594 mo
324.986 120.594 li
324.986 103.888 li
326.837 103.888 li
326.837 120.594 li
.155894 .125721 .129073 0 cmyk
f
327.431 120.838 mo
324.393 120.838 li
324.393 120.838 li
324.237 120.838 324.084 120.825 323.973 120.802 cv
323.863 120.779 323.799 120.748 323.799 120.716 cv
324.393 120.716 li
323.799 120.716 li
323.799 103.766 li
323.799 103.734 323.863 103.703 323.973 103.68 cv
324.084 103.657 324.237 103.644 324.393 103.644 cv
324.986 103.644 li
327.431 103.644 li
327.587 103.644 327.74 103.657 327.85 103.68 cv
327.961 103.703 328.024 103.734 328.024 103.766 cv
328.024 105.312 li
327.431 105.312 li
327.274 105.312 327.122 105.325 327.011 105.348 cv
326.901 105.37 326.837 105.402 326.837 105.434 cv
326.837 120.716 li
327.431 120.716 li
326.837 120.716 li
326.837 120.748 326.901 120.779 327.011 120.802 cv
327.122 120.825 327.274 120.838 327.431 120.838 cv
324.986 120.594 mo
326.837 120.594 li
326.837 103.888 li
324.986 103.888 li
324.986 120.594 li
0 0 0 0 cmyk
f
329.875 120.594 mo
328.024 120.594 li
328.024 105.556 li
329.875 105.556 li
329.875 108.32 li
329.875 108.321 329.875 108.322 329.875 108.323 cv
329.875 120.594 li
.155894 .125721 .129073 0 cmyk
f
330.468 120.838 mo
327.431 120.838 li
327.431 120.838 li
327.274 120.838 327.122 120.825 327.011 120.802 cv
326.901 120.779 326.837 120.748 326.837 120.716 cv
327.431 120.716 li
326.837 120.716 li
326.837 105.434 li
326.837 105.402 326.901 105.37 327.011 105.348 cv
327.122 105.325 327.274 105.312 327.431 105.312 cv
328.024 105.312 li
330.468 105.312 li
330.625 105.312 330.778 105.325 330.888 105.348 cv
330.998 105.37 331.062 105.402 331.062 105.434 cv
331.062 108.201 li
330.468 108.201 li
330.312 108.201 330.159 108.214 330.049 108.237 cv
329.942 108.259 329.879 108.289 329.875 108.32 cv
329.875 105.556 li
328.024 105.556 li
328.024 120.594 li
329.875 120.594 li
329.875 120.716 li
330.468 120.716 li
329.875 120.716 li
329.875 120.748 329.938 120.779 330.049 120.802 cv
330.159 120.825 330.312 120.838 330.468 120.838 cv
0 0 0 0 cmyk
f
332.913 120.594 mo
331.062 120.594 li
331.062 108.445 li
332.913 108.445 li
332.913 120.594 li
.155894 .125721 .129073 0 cmyk
f
333.506 120.838 mo
330.468 120.838 li
330.468 120.838 li
330.312 120.838 330.159 120.825 330.049 120.802 cv
329.938 120.779 329.875 120.748 329.875 120.716 cv
330.468 120.716 li
329.875 120.716 li
329.875 120.594 li
329.875 108.323 li
329.875 108.322 329.875 108.321 329.875 108.32 cv
329.879 108.289 329.942 108.259 330.049 108.237 cv
330.159 108.214 330.312 108.201 330.468 108.201 cv
331.062 108.201 li
333.506 108.201 li
333.662 108.201 333.815 108.214 333.926 108.237 cv
334.036 108.259 334.099 108.291 334.099 108.323 cv
334.099 108.979 li
333.506 108.979 li
333.35 108.979 333.197 108.992 333.087 109.015 cv
332.976 109.038 332.913 109.069 332.913 109.101 cv
332.913 120.716 li
333.506 120.716 li
332.913 120.716 li
332.913 120.748 332.976 120.779 333.087 120.802 cv
333.197 120.825 333.35 120.838 333.506 120.838 cv
331.062 120.594 mo
332.913 120.594 li
332.913 108.445 li
331.062 108.445 li
331.062 120.594 li
0 0 0 0 cmyk
f
335.951 120.594 mo
334.099 120.594 li
334.099 109.223 li
335.951 109.223 li
335.951 120.594 li
.155894 .125721 .129073 0 cmyk
f
336.544 120.838 mo
333.506 120.838 li
333.506 120.838 li
333.35 120.838 333.197 120.825 333.087 120.802 cv
332.976 120.779 332.913 120.748 332.913 120.716 cv
333.506 120.716 li
332.913 120.716 li
332.913 109.101 li
332.913 109.069 332.976 109.038 333.087 109.015 cv
333.197 108.992 333.35 108.979 333.506 108.979 cv
334.099 108.979 li
336.544 108.979 li
336.7 108.979 336.853 108.992 336.963 109.015 cv
337.074 109.038 337.137 109.069 337.137 109.101 cv
337.137 110.256 li
336.544 110.256 li
336.388 110.256 336.235 110.269 336.124 110.292 cv
336.014 110.314 335.951 110.346 335.951 110.378 cv
335.951 120.716 li
336.544 120.716 li
335.951 120.716 li
335.951 120.748 336.014 120.779 336.124 120.802 cv
336.235 120.825 336.388 120.838 336.544 120.838 cv
334.099 120.594 mo
335.951 120.594 li
335.951 109.223 li
334.099 109.223 li
334.099 120.594 li
0 0 0 0 cmyk
f
338.988 120.594 mo
337.137 120.594 li
337.137 110.5 li
338.988 110.5 li
338.988 120.594 li
.155894 .125721 .129073 0 cmyk
f
339.582 120.838 mo
336.544 120.838 li
336.544 120.838 li
336.388 120.838 336.235 120.825 336.124 120.802 cv
336.014 120.779 335.951 120.748 335.951 120.716 cv
336.544 120.716 li
335.951 120.716 li
335.951 110.378 li
335.951 110.346 336.014 110.314 336.124 110.292 cv
336.235 110.269 336.388 110.256 336.544 110.256 cv
337.137 110.256 li
339.582 110.256 li
339.738 110.256 339.891 110.269 340.001 110.292 cv
340.112 110.314 340.175 110.346 340.175 110.378 cv
340.175 110.868 li
339.582 110.868 li
339.425 110.868 339.272 110.881 339.162 110.904 cv
339.051 110.927 338.988 110.958 338.988 110.99 cv
338.988 120.716 li
339.582 120.716 li
338.988 120.716 li
338.988 120.748 339.051 120.779 339.162 120.802 cv
339.272 120.825 339.425 120.838 339.582 120.838 cv
337.137 120.594 mo
338.988 120.594 li
338.988 110.5 li
337.137 110.5 li
337.137 120.594 li
0 0 0 0 cmyk
f
342.026 120.594 mo
340.175 120.594 li
340.175 111.112 li
342.026 111.112 li
342.026 120.594 li
.155894 .125721 .129073 0 cmyk
f
342.619 120.838 mo
339.582 120.838 li
339.582 120.838 li
339.425 120.838 339.272 120.825 339.162 120.802 cv
339.051 120.779 338.988 120.748 338.988 120.716 cv
339.582 120.716 li
338.988 120.716 li
338.988 110.99 li
338.988 110.958 339.051 110.927 339.162 110.904 cv
339.272 110.881 339.425 110.868 339.582 110.868 cv
340.175 110.868 li
342.619 110.868 li
342.775 110.868 342.928 110.881 343.039 110.904 cv
343.149 110.927 343.212 110.958 343.212 110.99 cv
343.212 112.646 li
342.619 112.646 li
342.463 112.646 342.31 112.659 342.2 112.682 cv
342.089 112.705 342.026 112.737 342.026 112.769 cv
342.026 120.716 li
342.619 120.716 li
342.026 120.716 li
342.026 120.748 342.089 120.779 342.2 120.802 cv
342.31 120.825 342.463 120.838 342.619 120.838 cv
340.175 120.594 mo
342.026 120.594 li
342.026 111.112 li
340.175 111.112 li
340.175 120.594 li
0 0 0 0 cmyk
f
345.064 120.594 mo
343.212 120.594 li
343.212 112.891 li
345.064 112.891 li
345.064 120.594 li
.155894 .125721 .129073 0 cmyk
f
345.657 120.838 mo
342.619 120.838 li
342.619 120.838 li
342.463 120.838 342.31 120.825 342.2 120.802 cv
342.089 120.779 342.026 120.748 342.026 120.716 cv
342.619 120.716 li
342.026 120.716 li
342.026 112.769 li
342.026 112.737 342.089 112.705 342.2 112.682 cv
342.31 112.659 342.463 112.646 342.619 112.646 cv
343.212 112.646 li
345.657 112.646 li
345.813 112.646 345.966 112.659 346.076 112.682 cv
346.187 112.705 346.25 112.737 346.25 112.769 cv
346.25 113.813 li
345.657 113.813 li
345.501 113.813 345.348 113.826 345.237 113.848 cv
345.127 113.871 345.064 113.902 345.064 113.935 cv
345.064 120.716 li
345.657 120.716 li
345.064 120.716 li
345.064 120.748 345.127 120.779 345.237 120.802 cv
345.348 120.825 345.501 120.838 345.657 120.838 cv
343.212 120.594 mo
345.064 120.594 li
345.064 112.891 li
343.212 112.891 li
343.212 120.594 li
0 0 0 0 cmyk
f
348.101 120.594 mo
346.25 120.594 li
346.25 114.057 li
348.101 114.057 li
348.101 120.594 li
.155894 .125721 .129073 0 cmyk
f
348.695 120.838 mo
345.657 120.838 li
345.657 120.838 li
345.501 120.838 345.348 120.825 345.237 120.802 cv
345.127 120.779 345.064 120.748 345.064 120.716 cv
345.657 120.716 li
345.064 120.716 li
345.064 113.935 li
345.064 113.902 345.127 113.871 345.237 113.848 cv
345.348 113.826 345.501 113.813 345.657 113.813 cv
346.25 113.813 li
348.695 113.813 li
348.851 113.813 349.004 113.826 349.114 113.848 cv
349.225 113.871 349.288 113.902 349.288 113.935 cv
349.288 113.979 li
348.695 113.979 li
348.538 113.979 348.385 113.992 348.275 114.014 cv
348.165 114.037 348.101 114.069 348.101 114.101 cv
348.101 120.716 li
348.695 120.716 li
348.101 120.716 li
348.101 120.748 348.165 120.779 348.275 120.802 cv
348.385 120.825 348.538 120.838 348.695 120.838 cv
346.25 120.594 mo
348.101 120.594 li
348.101 114.057 li
346.25 114.057 li
346.25 120.594 li
0 0 0 0 cmyk
f
351.139 120.594 mo
349.288 120.594 li
349.288 114.223 li
351.139 114.223 li
351.139 120.594 li
.155894 .125721 .129073 0 cmyk
f
351.732 120.838 mo
348.695 120.838 li
348.695 120.838 li
348.538 120.838 348.385 120.825 348.275 120.802 cv
348.165 120.779 348.101 120.748 348.101 120.716 cv
348.695 120.716 li
348.101 120.716 li
348.101 114.101 li
348.101 114.069 348.165 114.037 348.275 114.014 cv
348.385 113.992 348.538 113.979 348.695 113.979 cv
349.288 113.979 li
351.732 113.979 li
351.888 113.979 352.042 113.992 352.152 114.014 cv
352.262 114.037 352.326 114.069 352.326 114.101 cv
352.326 114.314 li
351.732 114.314 li
351.576 114.314 351.423 114.327 351.313 114.35 cv
351.202 114.372 351.139 114.404 351.139 114.436 cv
351.139 120.716 li
351.732 120.716 li
351.139 120.716 li
351.139 120.748 351.202 120.779 351.313 120.802 cv
351.423 120.825 351.576 120.838 351.732 120.838 cv
349.288 120.594 mo
351.139 120.594 li
351.139 114.223 li
349.288 114.223 li
349.288 120.594 li
0 0 0 0 cmyk
f
354.177 120.594 mo
352.326 120.594 li
352.326 114.558 li
354.177 114.558 li
354.177 120.594 li
.155894 .125721 .129073 0 cmyk
f
354.77 120.838 mo
351.732 120.838 li
351.732 120.838 li
351.576 120.838 351.423 120.825 351.313 120.802 cv
351.202 120.779 351.139 120.748 351.139 120.716 cv
351.732 120.716 li
351.139 120.716 li
351.139 114.436 li
351.139 114.404 351.202 114.372 351.313 114.35 cv
351.423 114.327 351.576 114.314 351.732 114.314 cv
352.326 114.314 li
354.77 114.314 li
354.926 114.314 355.079 114.327 355.19 114.35 cv
355.3 114.372 355.363 114.404 355.363 114.436 cv
355.363 115.757 li
354.77 115.757 li
354.614 115.757 354.461 115.77 354.35 115.793 cv
354.24 115.815 354.177 115.847 354.177 115.879 cv
354.177 120.716 li
354.77 120.716 li
354.177 120.716 li
354.177 120.748 354.24 120.779 354.35 120.802 cv
354.461 120.825 354.614 120.838 354.77 120.838 cv
352.326 120.594 mo
354.177 120.594 li
354.177 114.558 li
352.326 114.558 li
352.326 120.594 li
0 0 0 0 cmyk
f
357.215 120.594 mo
355.363 120.594 li
355.363 116.001 li
357.215 116.001 li
357.215 120.594 li
.155894 .125721 .129073 0 cmyk
f
357.808 120.838 mo
354.77 120.838 li
354.77 120.838 li
354.614 120.838 354.461 120.825 354.35 120.802 cv
354.24 120.779 354.177 120.748 354.177 120.716 cv
354.77 120.716 li
354.177 120.716 li
354.177 115.879 li
354.177 115.847 354.24 115.815 354.35 115.793 cv
354.461 115.77 354.614 115.757 354.77 115.757 cv
355.363 115.757 li
357.808 115.757 li
357.964 115.757 358.117 115.77 358.227 115.793 cv
358.338 115.815 358.401 115.847 358.401 115.879 cv
358.401 116.092 li
357.808 116.092 li
357.651 116.092 357.499 116.105 357.388 116.128 cv
357.278 116.151 357.215 116.182 357.215 116.215 cv
357.215 120.716 li
357.808 120.716 li
357.215 120.716 li
357.215 120.748 357.278 120.779 357.388 120.802 cv
357.499 120.825 357.651 120.838 357.808 120.838 cv
355.363 120.594 mo
357.215 120.594 li
357.215 116.001 li
355.363 116.001 li
355.363 120.594 li
0 0 0 0 cmyk
f
360.252 120.594 mo
358.401 120.594 li
358.401 116.337 li
360.252 116.337 li
360.252 120.594 li
.155894 .125721 .129073 0 cmyk
f
360.846 120.838 mo
357.808 120.838 li
357.808 120.838 li
357.651 120.838 357.499 120.825 357.388 120.802 cv
357.278 120.779 357.215 120.748 357.215 120.716 cv
357.808 120.716 li
357.215 120.716 li
357.215 116.215 li
357.215 116.182 357.278 116.151 357.388 116.128 cv
357.499 116.105 357.651 116.092 357.808 116.092 cv
358.401 116.092 li
360.846 116.092 li
361.002 116.092 361.155 116.105 361.265 116.128 cv
361.376 116.151 361.439 116.182 361.439 116.215 cv
361.439 116.981 li
360.846 116.981 li
360.689 116.981 360.537 116.994 360.426 117.017 cv
360.316 117.04 360.252 117.071 360.252 117.104 cv
360.252 120.716 li
360.846 120.716 li
360.252 120.716 li
360.252 120.748 360.315 120.779 360.426 120.802 cv
360.537 120.825 360.689 120.838 360.846 120.838 cv
358.401 120.594 mo
360.252 120.594 li
360.252 116.337 li
358.401 116.337 li
358.401 120.594 li
0 0 0 0 cmyk
f
363.29 120.594 mo
361.439 120.594 li
361.439 117.226 li
363.29 117.226 li
363.29 117.544 li
363.29 117.545 363.29 117.546 363.29 117.547 cv
363.29 120.594 li
.155894 .125721 .129073 0 cmyk
f
363.883 120.838 mo
360.846 120.838 li
360.846 120.838 li
360.689 120.838 360.537 120.825 360.426 120.802 cv
360.315 120.779 360.252 120.748 360.252 120.716 cv
360.846 120.716 li
360.252 120.716 li
360.252 117.104 li
360.252 117.071 360.316 117.04 360.426 117.017 cv
360.537 116.994 360.689 116.981 360.846 116.981 cv
361.439 116.981 li
363.883 116.981 li
364.039 116.981 364.192 116.994 364.303 117.017 cv
364.413 117.04 364.476 117.071 364.476 117.104 cv
364.476 117.424 li
363.883 117.424 li
363.727 117.424 363.574 117.438 363.464 117.46 cv
363.357 117.482 363.294 117.512 363.29 117.544 cv
363.29 117.226 li
361.439 117.226 li
361.439 120.594 li
363.29 120.594 li
363.29 120.716 li
363.883 120.716 li
363.29 120.716 li
363.29 120.748 363.353 120.779 363.464 120.802 cv
363.574 120.825 363.727 120.838 363.883 120.838 cv
0 0 0 0 cmyk
f
366.328 120.594 mo
364.476 120.594 li
364.476 117.669 li
366.328 117.669 li
366.328 120.594 li
.155894 .125721 .129073 0 cmyk
f
366.921 120.838 mo
363.883 120.838 li
363.883 120.838 li
363.727 120.838 363.574 120.825 363.464 120.802 cv
363.353 120.779 363.29 120.748 363.29 120.716 cv
363.883 120.716 li
363.29 120.716 li
363.29 120.594 li
363.29 117.547 li
363.29 117.546 363.29 117.545 363.29 117.544 cv
363.294 117.512 363.357 117.482 363.464 117.46 cv
363.574 117.438 363.727 117.424 363.883 117.424 cv
364.476 117.424 li
366.921 117.424 li
367.077 117.424 367.23 117.438 367.341 117.46 cv
367.451 117.483 367.514 117.514 367.514 117.547 cv
367.514 117.926 li
366.921 117.926 li
366.765 117.926 366.612 117.939 366.502 117.962 cv
366.391 117.985 366.328 118.016 366.328 118.048 cv
366.328 120.716 li
366.921 120.716 li
366.328 120.716 li
366.328 120.748 366.391 120.779 366.502 120.802 cv
366.612 120.825 366.765 120.838 366.921 120.838 cv
364.476 120.594 mo
366.328 120.594 li
366.328 117.669 li
364.476 117.669 li
364.476 120.594 li
0 0 0 0 cmyk
f
369.365 120.594 mo
367.514 120.594 li
367.514 118.17 li
369.365 118.17 li
369.365 120.594 li
.155894 .125721 .129073 0 cmyk
f
369.959 120.838 mo
366.921 120.838 li
366.921 120.838 li
366.765 120.838 366.612 120.825 366.502 120.802 cv
366.391 120.779 366.328 120.748 366.328 120.716 cv
366.921 120.716 li
366.328 120.716 li
366.328 118.048 li
366.328 118.016 366.391 117.985 366.502 117.962 cv
366.612 117.939 366.765 117.926 366.921 117.926 cv
367.514 117.926 li
369.959 117.926 li
370.115 117.926 370.268 117.939 370.378 117.962 cv
370.489 117.985 370.552 118.016 370.552 118.048 cv
370.552 118.369 li
369.959 118.369 li
369.802 118.369 369.65 118.382 369.539 118.405 cv
369.429 118.427 369.365 118.459 369.365 118.491 cv
369.365 120.716 li
369.959 120.716 li
369.365 120.716 li
369.365 120.748 369.429 120.779 369.539 120.802 cv
369.65 120.825 369.802 120.838 369.959 120.838 cv
367.514 120.594 mo
369.365 120.594 li
369.365 118.17 li
367.514 118.17 li
367.514 120.594 li
0 0 0 0 cmyk
f
372.403 120.594 mo
370.552 120.594 li
370.552 118.613 li
372.403 118.613 li
372.403 120.594 li
.155894 .125721 .129073 0 cmyk
f
372.996 120.838 mo
369.959 120.838 li
369.959 120.838 li
369.802 120.838 369.65 120.825 369.539 120.802 cv
369.429 120.779 369.365 120.748 369.365 120.716 cv
369.959 120.716 li
369.365 120.716 li
369.365 118.491 li
369.365 118.459 369.429 118.427 369.539 118.405 cv
369.65 118.382 369.802 118.369 369.959 118.369 cv
370.552 118.369 li
372.996 118.369 li
373.153 118.369 373.306 118.382 373.416 118.405 cv
373.45 118.412 373.479 118.419 373.503 118.428 cv
372.996 118.428 li
372.84 118.428 372.687 118.441 372.577 118.463 cv
372.466 118.486 372.403 118.518 372.403 118.55 cv
372.403 120.716 li
372.996 120.716 li
372.403 120.716 li
372.403 120.748 372.466 120.779 372.577 120.802 cv
372.687 120.825 372.84 120.838 372.996 120.838 cv
370.552 120.594 mo
372.403 120.594 li
372.403 118.613 li
370.552 118.613 li
370.552 120.594 li
0 0 0 0 cmyk
f
375.441 120.594 mo
373.59 120.594 li
373.59 118.672 li
375.441 118.672 li
375.441 120.594 li
.155894 .125721 .129073 0 cmyk
f
376.034 120.838 mo
372.996 120.838 li
372.996 120.838 li
372.84 120.838 372.687 120.825 372.577 120.802 cv
372.466 120.779 372.403 120.748 372.403 120.716 cv
372.996 120.716 li
372.403 120.716 li
372.403 118.55 li
372.403 118.518 372.466 118.486 372.577 118.463 cv
372.687 118.441 372.84 118.428 372.996 118.428 cv
373.503 118.428 li
375.442 118.428 li
375.441 118.43 375.441 118.433 375.441 118.436 cv
375.441 120.716 li
376.034 120.716 li
375.441 120.716 li
375.441 120.748 375.504 120.779 375.615 120.802 cv
375.725 120.825 375.878 120.838 376.034 120.838 cv
373.59 120.594 mo
375.441 120.594 li
375.441 118.672 li
373.59 118.672 li
373.59 120.594 li
0 0 0 0 cmyk
f
378.478 120.594 mo
376.627 120.594 li
376.627 118.558 li
378.479 118.558 li
378.479 119.211 li
378.478 119.212 378.478 119.213 378.478 119.214 cv
378.478 120.594 li
.155894 .125721 .129073 0 cmyk
f
379.072 120.838 mo
376.034 120.838 li
376.034 120.838 li
375.878 120.838 375.725 120.825 375.615 120.802 cv
375.504 120.779 375.441 120.748 375.441 120.716 cv
376.034 120.716 li
375.441 120.716 li
375.441 118.436 li
375.441 118.433 375.441 118.43 375.442 118.428 cv
375.452 118.398 375.514 118.37 375.615 118.349 cv
375.725 118.327 375.878 118.314 376.034 118.314 cv
379.072 118.314 li
379.228 118.314 379.381 118.327 379.491 118.349 cv
379.602 118.372 379.665 118.404 379.665 118.436 cv
379.665 119.092 li
379.072 119.092 li
378.916 119.092 378.763 119.105 378.652 119.128 cv
378.545 119.15 378.483 119.18 378.479 119.211 cv
378.479 118.558 li
376.627 118.558 li
376.627 120.594 li
378.478 120.594 li
378.478 120.716 li
379.072 120.716 li
378.478 120.716 li
378.478 120.748 378.542 120.779 378.652 120.802 cv
378.763 120.825 378.916 120.838 379.072 120.838 cv
0 0 0 0 cmyk
f
381.516 120.594 mo
379.665 120.594 li
379.665 119.336 li
381.516 119.336 li
381.516 120.594 li
.155894 .125721 .129073 0 cmyk
f
382.109 120.838 mo
379.072 120.838 li
379.072 120.838 li
378.916 120.838 378.763 120.825 378.652 120.802 cv
378.542 120.779 378.478 120.748 378.478 120.716 cv
379.072 120.716 li
378.478 120.716 li
378.478 120.594 li
378.478 119.214 li
378.478 119.213 378.478 119.212 378.479 119.211 cv
378.483 119.18 378.545 119.15 378.652 119.128 cv
378.763 119.105 378.916 119.092 379.072 119.092 cv
379.665 119.092 li
381.516 119.092 li
381.516 120.716 li
382.109 120.716 li
381.516 120.716 li
381.516 120.748 381.579 120.779 381.69 120.802 cv
381.801 120.825 381.953 120.838 382.109 120.838 cv
379.665 120.594 mo
381.516 120.594 li
381.516 119.336 li
379.665 119.336 li
379.665 120.594 li
0 0 0 0 cmyk
f
384.554 120.594 mo
382.703 120.594 li
382.703 119.17 li
384.554 119.17 li
384.554 119.491 li
384.554 119.492 384.554 119.493 384.554 119.494 cv
384.554 120.594 li
.155894 .125721 .129073 0 cmyk
f
385.147 120.838 mo
382.109 120.838 li
382.109 120.838 li
381.953 120.838 381.801 120.825 381.69 120.802 cv
381.579 120.779 381.516 120.748 381.516 120.716 cv
382.109 120.716 li
381.516 120.716 li
381.516 119.092 li
381.516 119.048 li
381.516 119.016 381.58 118.984 381.69 118.962 cv
381.801 118.939 381.953 118.926 382.109 118.926 cv
385.147 118.926 li
385.304 118.926 385.456 118.939 385.567 118.962 cv
385.677 118.984 385.74 119.016 385.74 119.048 cv
385.74 119.372 li
385.147 119.372 li
384.991 119.372 384.838 119.385 384.728 119.408 cv
384.621 119.43 384.558 119.46 384.554 119.491 cv
384.554 119.17 li
382.703 119.17 li
382.703 120.594 li
384.554 120.594 li
384.554 120.716 li
385.147 120.716 li
384.554 120.716 li
384.554 120.748 384.617 120.779 384.728 120.802 cv
384.838 120.825 384.991 120.838 385.147 120.838 cv
0 0 0 0 cmyk
f
387.592 120.594 mo
385.74 120.594 li
385.74 119.616 li
387.592 119.616 li
387.592 120.594 li
.155894 .125721 .129073 0 cmyk
f
388.185 120.838 mo
385.147 120.838 li
385.147 120.838 li
384.991 120.838 384.838 120.825 384.728 120.802 cv
384.617 120.779 384.554 120.748 384.554 120.716 cv
385.147 120.716 li
384.554 120.716 li
384.554 120.594 li
384.554 119.494 li
384.554 119.493 384.554 119.492 384.554 119.491 cv
384.558 119.46 384.621 119.43 384.728 119.408 cv
384.838 119.385 384.991 119.372 385.147 119.372 cv
385.74 119.372 li
388.185 119.372 li
388.341 119.372 388.494 119.385 388.605 119.408 cv
388.634 119.414 388.659 119.42 388.682 119.427 cv
388.185 119.427 li
388.029 119.427 387.876 119.44 387.766 119.463 cv
387.655 119.486 387.592 119.517 387.592 119.55 cv
387.592 120.716 li
388.185 120.716 li
387.592 120.716 li
387.592 120.748 387.655 120.779 387.766 120.802 cv
387.876 120.825 388.029 120.838 388.185 120.838 cv
385.74 120.594 mo
387.592 120.594 li
387.592 119.616 li
385.74 119.616 li
385.74 120.594 li
0 0 0 0 cmyk
f
390.629 120.594 mo
388.778 120.594 li
388.778 119.672 li
390.629 119.672 li
390.629 120.594 li
.155894 .125721 .129073 0 cmyk
f
391.223 120.838 mo
388.185 120.838 li
388.185 120.838 li
388.029 120.838 387.876 120.825 387.766 120.802 cv
387.655 120.779 387.592 120.748 387.592 120.716 cv
388.185 120.716 li
387.592 120.716 li
387.592 119.55 li
387.592 119.517 387.655 119.486 387.766 119.463 cv
387.876 119.44 388.029 119.427 388.185 119.427 cv
388.682 119.427 li
391.223 119.427 li
391.379 119.427 391.532 119.44 391.642 119.463 cv
391.671 119.469 391.697 119.476 391.719 119.483 cv
391.223 119.483 li
391.067 119.483 390.914 119.496 390.803 119.519 cv
390.693 119.541 390.629 119.573 390.629 119.605 cv
390.629 120.716 li
391.223 120.716 li
390.629 120.716 li
390.629 120.748 390.693 120.779 390.803 120.802 cv
390.914 120.825 391.067 120.838 391.223 120.838 cv
388.778 120.594 mo
390.629 120.594 li
390.629 119.672 li
388.778 119.672 li
388.778 120.594 li
0 0 0 0 cmyk
f
393.667 120.594 mo
391.816 120.594 li
391.816 119.727 li
393.667 119.727 li
393.667 120.594 li
.155894 .125721 .129073 0 cmyk
f
394.26 120.838 mo
391.223 120.838 li
391.223 120.838 li
391.067 120.838 390.914 120.825 390.803 120.802 cv
390.693 120.779 390.629 120.748 390.629 120.716 cv
391.223 120.716 li
390.629 120.716 li
390.629 119.605 li
390.629 119.573 390.693 119.541 390.803 119.519 cv
390.914 119.496 391.067 119.483 391.223 119.483 cv
391.719 119.483 li
394.26 119.483 li
394.417 119.483 394.57 119.496 394.68 119.519 cv
394.791 119.541 394.854 119.573 394.854 119.605 cv
394.854 119.87 li
394.26 119.87 li
394.104 119.87 393.951 119.884 393.841 119.906 cv
393.73 119.929 393.667 119.96 393.667 119.993 cv
393.667 120.716 li
394.26 120.716 li
393.667 120.716 li
393.667 120.748 393.73 120.779 393.841 120.802 cv
393.951 120.825 394.104 120.838 394.26 120.838 cv
391.816 120.594 mo
393.667 120.594 li
393.667 119.727 li
391.816 119.727 li
391.816 120.594 li
0 0 0 0 cmyk
f
396.705 120.594 mo
394.854 120.594 li
394.854 120.115 li
396.705 120.115 li
396.705 120.594 li
.155894 .125721 .129073 0 cmyk
f
397.298 120.838 mo
394.26 120.838 li
394.26 120.838 li
394.104 120.838 393.951 120.825 393.841 120.802 cv
393.73 120.779 393.667 120.748 393.667 120.716 cv
394.26 120.716 li
393.667 120.716 li
393.667 119.993 li
393.667 119.96 393.73 119.929 393.841 119.906 cv
393.951 119.884 394.104 119.87 394.26 119.87 cv
394.854 119.87 li
397.298 119.87 li
397.298 119.87 li
397.142 119.87 396.989 119.884 396.879 119.906 cv
396.768 119.929 396.705 119.96 396.705 119.993 cv
396.705 120.716 li
397.298 120.716 li
396.705 120.716 li
396.705 120.748 396.768 120.779 396.879 120.802 cv
396.989 120.825 397.142 120.838 397.298 120.838 cv
394.854 120.594 mo
396.705 120.594 li
396.705 120.115 li
394.854 120.115 li
394.854 120.594 li
0 0 0 0 cmyk
f
399.742 120.594 mo
397.891 120.594 li
397.891 120.115 li
399.742 120.115 li
399.742 120.594 li
.155894 .125721 .129073 0 cmyk
f
400.336 120.838 mo
397.298 120.838 li
397.298 120.838 li
397.142 120.838 396.989 120.825 396.879 120.802 cv
396.768 120.779 396.705 120.748 396.705 120.716 cv
397.298 120.716 li
396.705 120.716 li
396.705 119.993 li
396.705 119.96 396.768 119.929 396.879 119.906 cv
396.989 119.884 397.142 119.87 397.298 119.87 cv
397.298 119.87 li
400.336 119.87 li
400.492 119.87 400.645 119.884 400.755 119.906 cv
400.866 119.929 400.929 119.96 400.929 119.993 cv
400.929 120.092 li
400.336 120.092 li
400.18 120.092 400.027 120.105 399.916 120.128 cv
399.806 120.15 399.742 120.182 399.742 120.214 cv
399.742 120.716 li
400.336 120.716 li
399.742 120.716 li
399.742 120.748 399.806 120.779 399.916 120.802 cv
400.027 120.825 400.18 120.838 400.336 120.838 cv
397.891 120.594 mo
399.742 120.594 li
399.742 120.115 li
397.891 120.115 li
397.891 120.594 li
0 0 0 0 cmyk
f
402.78 120.594 mo
400.929 120.594 li
400.929 120.336 li
402.78 120.336 li
402.78 120.594 li
.155894 .125721 .129073 0 cmyk
f
403.373 120.838 mo
400.336 120.838 li
400.336 120.838 li
400.18 120.838 400.027 120.825 399.916 120.802 cv
399.806 120.779 399.742 120.748 399.742 120.716 cv
400.336 120.716 li
399.742 120.716 li
399.742 120.214 li
399.742 120.182 399.806 120.15 399.916 120.128 cv
400.027 120.105 400.18 120.092 400.336 120.092 cv
400.929 120.092 li
403.373 120.092 li
403.53 120.092 403.683 120.105 403.793 120.128 cv
403.904 120.15 403.967 120.182 403.967 120.214 cv
403.967 120.261 li
403.373 120.261 li
403.217 120.261 403.064 120.274 402.954 120.297 cv
402.843 120.32 402.78 120.351 402.78 120.383 cv
402.78 120.716 li
403.373 120.716 li
402.78 120.716 li
402.78 120.748 402.843 120.779 402.954 120.802 cv
403.064 120.825 403.217 120.838 403.373 120.838 cv
400.929 120.594 mo
402.78 120.594 li
402.78 120.336 li
400.929 120.336 li
400.929 120.594 li
0 0 0 0 cmyk
f
405.818 120.594 mo
403.967 120.594 li
403.967 120.505 li
405.818 120.505 li
405.818 120.594 li
.155894 .125721 .129073 0 cmyk
f
406.411 120.838 mo
403.373 120.838 li
403.373 120.838 li
403.217 120.838 403.064 120.825 402.954 120.802 cv
402.843 120.779 402.78 120.748 402.78 120.716 cv
403.373 120.716 li
402.78 120.716 li
402.78 120.383 li
402.78 120.351 402.843 120.32 402.954 120.297 cv
403.064 120.274 403.217 120.261 403.373 120.261 cv
403.967 120.261 li
405.818 120.261 li
405.818 120.716 li
406.411 120.716 li
405.818 120.716 li
405.818 120.748 405.881 120.779 405.992 120.802 cv
406.102 120.825 406.255 120.838 406.411 120.838 cv
403.967 120.594 mo
405.818 120.594 li
405.818 120.505 li
403.967 120.505 li
403.967 120.594 li
0 0 0 0 cmyk
f
408.856 120.594 mo
407.005 120.594 li
407.005 120.336 li
408.856 120.336 li
408.856 120.594 li
.155894 .125721 .129073 0 cmyk
f
409.449 120.838 mo
406.411 120.838 li
406.411 120.838 li
406.255 120.838 406.102 120.825 405.992 120.802 cv
405.881 120.779 405.818 120.748 405.818 120.716 cv
406.411 120.716 li
405.818 120.716 li
405.818 120.261 li
405.818 120.214 li
405.818 120.182 405.881 120.15 405.992 120.128 cv
406.102 120.105 406.255 120.092 406.411 120.092 cv
409.449 120.092 li
409.605 120.092 409.758 120.105 409.868 120.128 cv
409.897 120.134 409.923 120.14 409.945 120.147 cv
409.449 120.147 li
409.293 120.147 409.14 120.16 409.029 120.183 cv
408.919 120.206 408.856 120.237 408.856 120.269 cv
408.856 120.716 li
409.449 120.716 li
408.856 120.716 li
408.856 120.748 408.919 120.779 409.029 120.802 cv
409.14 120.825 409.293 120.838 409.449 120.838 cv
407.005 120.594 mo
408.856 120.594 li
408.856 120.336 li
407.005 120.336 li
407.005 120.594 li
0 0 0 0 cmyk
f
411.893 120.594 mo
410.042 120.594 li
410.042 120.392 li
411.893 120.392 li
411.893 120.594 li
.155894 .125721 .129073 0 cmyk
f
412.487 120.838 mo
409.449 120.838 li
409.449 120.838 li
409.293 120.838 409.14 120.825 409.029 120.802 cv
408.919 120.779 408.856 120.748 408.856 120.716 cv
409.449 120.716 li
408.856 120.716 li
408.856 120.269 li
408.856 120.237 408.919 120.206 409.029 120.183 cv
409.14 120.16 409.293 120.147 409.449 120.147 cv
409.945 120.147 li
412.487 120.147 li
412.643 120.147 412.796 120.16 412.906 120.183 cv
412.94 120.19 412.969 120.198 412.994 120.206 cv
412.487 120.206 li
412.33 120.206 412.178 120.219 412.067 120.242 cv
411.957 120.264 411.893 120.296 411.893 120.328 cv
411.893 120.716 li
412.487 120.716 li
411.893 120.716 li
411.893 120.748 411.957 120.779 412.067 120.802 cv
412.178 120.825 412.33 120.838 412.487 120.838 cv
410.042 120.594 mo
411.893 120.594 li
411.893 120.392 li
410.042 120.392 li
410.042 120.594 li
0 0 0 0 cmyk
f
414.931 120.594 mo
413.08 120.594 li
413.08 120.45 li
414.931 120.45 li
414.931 120.594 li
.155894 .125721 .129073 0 cmyk
f
415.525 120.838 mo
412.487 120.838 li
412.487 120.838 li
412.33 120.838 412.178 120.825 412.067 120.802 cv
411.957 120.779 411.893 120.748 411.893 120.716 cv
412.487 120.716 li
411.893 120.716 li
411.893 120.328 li
411.893 120.296 411.957 120.264 412.067 120.242 cv
412.178 120.219 412.33 120.206 412.487 120.206 cv
412.994 120.206 li
415.525 120.206 li
415.681 120.206 415.834 120.219 415.944 120.242 cv
416.055 120.264 416.118 120.296 416.118 120.328 cv
416.118 120.372 li
415.525 120.372 li
415.368 120.372 415.216 120.385 415.105 120.408 cv
414.995 120.431 414.931 120.462 414.931 120.494 cv
414.931 120.716 li
415.525 120.716 li
414.931 120.716 li
414.931 120.748 414.994 120.779 415.105 120.802 cv
415.216 120.825 415.368 120.838 415.525 120.838 cv
413.08 120.594 mo
414.931 120.594 li
414.931 120.45 li
413.08 120.45 li
413.08 120.594 li
0 0 0 0 cmyk
f
418.562 120.838 mo
415.525 120.838 li
415.525 120.838 li
415.368 120.838 415.216 120.825 415.105 120.802 cv
414.994 120.779 414.931 120.748 414.931 120.716 cv
415.525 120.716 li
414.931 120.716 li
414.931 120.494 li
414.931 120.462 414.995 120.431 415.105 120.408 cv
415.216 120.385 415.368 120.372 415.525 120.372 cv
416.118 120.372 li
417.969 120.372 li
417.969 120.716 li
418.562 120.716 li
417.969 120.716 li
417.969 120.748 418.032 120.779 418.143 120.802 cv
418.253 120.825 418.406 120.838 418.562 120.838 cv
f
421.007 120.594 mo
419.155 120.594 li
419.155 120.392 li
421.007 120.392 li
421.007 120.594 li
.155894 .125721 .129073 0 cmyk
f
421.6 120.838 mo
418.562 120.838 li
418.562 120.838 li
418.406 120.838 418.253 120.825 418.143 120.802 cv
418.032 120.779 417.969 120.748 417.969 120.716 cv
418.562 120.716 li
417.969 120.716 li
417.969 120.372 li
417.969 120.269 li
417.969 120.237 418.032 120.206 418.143 120.183 cv
418.253 120.16 418.406 120.147 418.562 120.147 cv
421.6 120.147 li
421.756 120.147 421.909 120.16 422.019 120.183 cv
422.121 120.204 422.182 120.232 422.192 120.261 cv
421.6 120.261 li
421.444 120.261 421.291 120.274 421.18 120.297 cv
421.07 120.32 421.007 120.351 421.007 120.383 cv
421.007 120.716 li
421.6 120.716 li
421.007 120.716 li
421.007 120.748 421.07 120.779 421.18 120.802 cv
421.291 120.825 421.444 120.838 421.6 120.838 cv
419.155 120.594 mo
421.007 120.594 li
421.007 120.392 li
419.155 120.392 li
419.155 120.594 li
0 0 0 0 cmyk
f
424.044 120.594 mo
422.193 120.594 li
422.193 120.505 li
424.044 120.505 li
424.044 120.594 li
.155894 .125721 .129073 0 cmyk
f
424.638 120.838 mo
421.6 120.838 li
421.6 120.838 li
421.444 120.838 421.291 120.825 421.18 120.802 cv
421.07 120.779 421.007 120.748 421.007 120.716 cv
421.6 120.716 li
421.007 120.716 li
421.007 120.383 li
421.007 120.351 421.07 120.32 421.18 120.297 cv
421.291 120.274 421.444 120.261 421.6 120.261 cv
422.192 120.261 li
424.638 120.261 li
424.794 120.261 424.947 120.274 425.057 120.297 cv
425.167 120.32 425.231 120.351 425.231 120.383 cv
425.231 120.427 li
424.638 120.427 li
424.481 120.427 424.328 120.44 424.218 120.463 cv
424.107 120.486 424.044 120.517 424.044 120.55 cv
424.044 120.716 li
424.638 120.716 li
424.044 120.716 li
424.044 120.748 424.107 120.779 424.218 120.802 cv
424.328 120.825 424.481 120.838 424.638 120.838 cv
422.193 120.594 mo
424.044 120.594 li
424.044 120.505 li
422.193 120.505 li
422.193 120.594 li
0 0 0 0 cmyk
f
427.675 120.838 mo
424.638 120.838 li
424.638 120.838 li
424.481 120.838 424.328 120.825 424.218 120.802 cv
424.107 120.779 424.044 120.748 424.044 120.716 cv
424.638 120.716 li
424.044 120.716 li
424.044 120.55 li
424.044 120.517 424.107 120.486 424.218 120.463 cv
424.328 120.44 424.481 120.427 424.638 120.427 cv
425.231 120.427 li
427.675 120.427 li
427.675 120.427 li
427.675 120.427 li
427.519 120.427 427.366 120.44 427.256 120.463 cv
427.145 120.486 427.082 120.517 427.082 120.55 cv
427.082 120.716 li
427.675 120.716 li
427.082 120.716 li
427.082 120.748 427.145 120.779 427.256 120.802 cv
427.366 120.825 427.519 120.838 427.675 120.838 cv
f
430.713 120.838 mo
427.675 120.838 li
427.675 120.838 li
427.519 120.838 427.366 120.825 427.256 120.802 cv
427.145 120.779 427.082 120.748 427.082 120.716 cv
427.675 120.716 li
427.082 120.716 li
427.082 120.55 li
427.082 120.517 427.145 120.486 427.256 120.463 cv
427.366 120.44 427.519 120.427 427.675 120.427 cv
427.675 120.427 li
430.713 120.427 li
430.869 120.427 431.022 120.44 431.133 120.463 cv
431.162 120.469 431.187 120.476 431.209 120.483 cv
430.713 120.483 li
430.557 120.483 430.404 120.496 430.294 120.518 cv
430.183 120.541 430.12 120.573 430.12 120.605 cv
430.12 120.716 li
430.713 120.716 li
430.12 120.716 li
430.12 120.748 430.183 120.779 430.294 120.802 cv
430.404 120.825 430.557 120.838 430.713 120.838 cv
f
433.751 120.838 mo
430.713 120.838 li
430.713 120.838 li
430.557 120.838 430.404 120.825 430.294 120.802 cv
430.183 120.779 430.12 120.748 430.12 120.716 cv
430.713 120.716 li
430.12 120.716 li
430.12 120.605 li
430.12 120.573 430.183 120.541 430.294 120.518 cv
430.404 120.496 430.557 120.483 430.713 120.483 cv
431.209 120.483 li
433.254 120.483 li
433.192 120.502 433.157 120.526 433.157 120.55 cv
433.157 120.716 li
433.751 120.716 li
433.157 120.716 li
433.157 120.748 433.221 120.779 433.331 120.802 cv
433.442 120.825 433.594 120.838 433.751 120.838 cv
f
436.788 120.838 mo
433.751 120.838 li
433.751 120.838 li
433.594 120.838 433.442 120.825 433.331 120.802 cv
433.221 120.779 433.157 120.748 433.157 120.716 cv
433.751 120.716 li
433.157 120.716 li
433.157 120.55 li
433.157 120.526 433.192 120.502 433.254 120.483 cv
433.276 120.476 433.302 120.469 433.331 120.463 cv
433.442 120.44 433.594 120.427 433.751 120.427 cv
436.292 120.427 li
436.23 120.447 436.195 120.47 436.195 120.494 cv
436.195 120.716 li
436.788 120.716 li
436.195 120.716 li
436.195 120.748 436.258 120.779 436.369 120.802 cv
436.479 120.825 436.632 120.838 436.788 120.838 cv
f
439.826 120.838 mo
436.788 120.838 li
436.788 120.838 li
436.632 120.838 436.479 120.825 436.369 120.802 cv
436.258 120.779 436.195 120.748 436.195 120.716 cv
436.788 120.716 li
436.195 120.716 li
436.195 120.494 li
436.195 120.47 436.23 120.447 436.292 120.427 cv
436.314 120.42 436.34 120.414 436.369 120.408 cv
436.479 120.385 436.632 120.372 436.788 120.372 cv
439.826 120.372 li
439.982 120.372 440.135 120.385 440.246 120.408 cv
440.356 120.431 440.419 120.462 440.419 120.494 cv
440.419 120.594 li
439.826 120.594 li
439.67 120.594 439.517 120.607 439.407 120.629 cv
439.296 120.652 439.233 120.683 439.233 120.716 cv
439.233 120.716 li
439.233 120.716 li
439.233 120.748 439.296 120.779 439.407 120.802 cv
439.517 120.825 439.67 120.838 439.826 120.838 cv
f
442.864 120.838 mo
439.826 120.838 li
439.826 120.838 li
439.67 120.838 439.517 120.825 439.407 120.802 cv
439.296 120.779 439.233 120.748 439.233 120.716 cv
439.233 120.716 li
439.233 120.716 li
439.233 120.683 439.296 120.652 439.407 120.629 cv
439.517 120.607 439.67 120.594 439.826 120.594 cv
439.826 120.594 li
440.419 120.594 li
442.864 120.594 li
442.864 120.594 li
442.708 120.594 442.555 120.607 442.444 120.629 cv
442.334 120.652 442.27 120.683 442.27 120.716 cv
442.27 120.716 li
442.27 120.716 li
442.27 120.748 442.334 120.779 442.444 120.802 cv
442.555 120.825 442.708 120.838 442.864 120.838 cv
f
445.901 120.838 mo
442.864 120.838 li
442.864 120.838 li
442.708 120.838 442.555 120.825 442.444 120.802 cv
442.334 120.779 442.27 120.748 442.27 120.716 cv
442.27 120.716 li
442.27 120.716 li
442.27 120.683 442.334 120.652 442.444 120.629 cv
442.555 120.607 442.708 120.594 442.864 120.594 cv
442.864 120.594 li
445.405 120.594 li
445.343 120.613 445.308 120.637 445.308 120.66 cv
445.308 120.716 li
445.901 120.716 li
445.308 120.716 li
445.308 120.748 445.372 120.779 445.482 120.802 cv
445.592 120.825 445.745 120.838 445.901 120.838 cv
f
448.939 120.838 mo
445.901 120.838 li
445.901 120.838 li
445.745 120.838 445.592 120.825 445.482 120.802 cv
445.372 120.779 445.308 120.748 445.308 120.716 cv
445.901 120.716 li
445.308 120.716 li
445.308 120.66 li
445.308 120.637 445.343 120.613 445.405 120.594 cv
445.427 120.586 445.453 120.58 445.482 120.574 cv
445.592 120.551 445.745 120.538 445.901 120.538 cv
448.939 120.538 li
449.095 120.538 449.248 120.551 449.359 120.574 cv
449.388 120.58 449.414 120.586 449.436 120.594 cv
448.939 120.594 li
448.783 120.594 448.63 120.607 448.52 120.629 cv
448.409 120.652 448.346 120.683 448.346 120.716 cv
448.346 120.716 li
448.346 120.716 li
448.346 120.748 448.409 120.779 448.52 120.802 cv
448.63 120.825 448.783 120.838 448.939 120.838 cv
f
451.977 120.838 mo
448.939 120.838 li
448.939 120.838 li
448.783 120.838 448.63 120.825 448.52 120.802 cv
448.409 120.779 448.346 120.748 448.346 120.716 cv
448.346 120.716 li
448.346 120.716 li
448.346 120.683 448.409 120.652 448.52 120.629 cv
448.63 120.607 448.783 120.594 448.939 120.594 cv
448.939 120.594 li
449.436 120.594 li
451.977 120.594 li
451.977 120.594 li
451.821 120.594 451.668 120.607 451.558 120.629 cv
451.447 120.652 451.384 120.683 451.384 120.716 cv
451.384 120.716 li
451.384 120.716 li
451.384 120.748 451.447 120.779 451.558 120.802 cv
451.668 120.825 451.821 120.838 451.977 120.838 cv
f
455.015 120.838 mo
451.977 120.838 li
451.977 120.838 li
451.821 120.838 451.668 120.825 451.558 120.802 cv
451.447 120.779 451.384 120.748 451.384 120.716 cv
451.384 120.716 li
451.384 120.716 li
451.384 120.683 451.447 120.652 451.558 120.629 cv
451.668 120.607 451.821 120.594 451.977 120.594 cv
451.977 120.594 li
454.518 120.594 li
454.456 120.613 454.421 120.637 454.421 120.66 cv
454.421 120.716 li
455.015 120.716 li
454.421 120.716 li
454.421 120.748 454.485 120.779 454.595 120.802 cv
454.706 120.825 454.858 120.838 455.015 120.838 cv
f
458.052 120.838 mo
455.015 120.838 li
455.015 120.838 li
454.858 120.838 454.706 120.825 454.595 120.802 cv
454.485 120.779 454.421 120.748 454.421 120.716 cv
455.015 120.716 li
454.421 120.716 li
454.421 120.66 li
454.421 120.637 454.456 120.613 454.518 120.594 cv
454.54 120.586 454.566 120.58 454.595 120.574 cv
454.706 120.551 454.858 120.538 455.015 120.538 cv
458.052 120.538 li
458.209 120.538 458.362 120.551 458.472 120.574 cv
458.501 120.58 458.527 120.586 458.549 120.594 cv
458.052 120.594 li
457.896 120.594 457.743 120.607 457.633 120.629 cv
457.522 120.652 457.459 120.683 457.459 120.716 cv
457.459 120.716 li
457.459 120.716 li
457.459 120.748 457.522 120.779 457.633 120.802 cv
457.743 120.825 457.896 120.838 458.052 120.838 cv
f
461.09 120.838 mo
458.052 120.838 li
458.052 120.838 li
457.896 120.838 457.743 120.825 457.633 120.802 cv
457.522 120.779 457.459 120.748 457.459 120.716 cv
457.459 120.716 li
457.459 120.716 li
457.459 120.683 457.522 120.652 457.633 120.629 cv
457.743 120.607 457.896 120.594 458.052 120.594 cv
458.052 120.594 li
458.549 120.594 li
460.594 120.594 li
460.531 120.613 460.497 120.637 460.497 120.66 cv
460.497 120.716 li
461.09 120.716 li
460.497 120.716 li
460.497 120.748 460.56 120.779 460.671 120.802 cv
460.781 120.825 460.934 120.838 461.09 120.838 cv
f
464.128 120.838 mo
461.09 120.838 li
461.09 120.838 li
460.934 120.838 460.781 120.825 460.671 120.802 cv
460.56 120.779 460.497 120.748 460.497 120.716 cv
461.09 120.716 li
460.497 120.716 li
460.497 120.66 li
460.497 120.637 460.531 120.613 460.594 120.594 cv
460.616 120.586 460.642 120.58 460.671 120.574 cv
460.781 120.551 460.934 120.538 461.09 120.538 cv
464.128 120.538 li
464.284 120.538 464.437 120.551 464.547 120.574 cv
464.576 120.58 464.602 120.586 464.625 120.594 cv
464.128 120.594 li
463.972 120.594 463.819 120.607 463.708 120.629 cv
463.598 120.652 463.534 120.683 463.534 120.716 cv
463.534 120.716 li
463.534 120.716 li
463.534 120.748 463.598 120.779 463.708 120.802 cv
463.819 120.825 463.972 120.838 464.128 120.838 cv
f
467.166 120.838 mo
464.128 120.838 li
464.128 120.838 li
463.972 120.838 463.819 120.825 463.708 120.802 cv
463.598 120.779 463.534 120.748 463.534 120.716 cv
463.534 120.716 li
463.534 120.716 li
463.534 120.683 463.598 120.652 463.708 120.629 cv
463.819 120.607 463.972 120.594 464.128 120.594 cv
464.128 120.594 li
464.625 120.594 li
466.669 120.594 li
466.607 120.613 466.572 120.637 466.572 120.66 cv
466.572 120.716 li
467.166 120.716 li
466.572 120.716 li
466.572 120.748 466.636 120.779 466.746 120.802 cv
466.857 120.825 467.009 120.838 467.166 120.838 cv
f
470.203 120.838 mo
467.166 120.838 li
467.166 120.838 li
467.009 120.838 466.857 120.825 466.746 120.802 cv
466.636 120.779 466.572 120.748 466.572 120.716 cv
467.166 120.716 li
466.572 120.716 li
466.572 120.66 li
466.572 120.637 466.607 120.613 466.669 120.594 cv
466.691 120.586 466.717 120.58 466.746 120.574 cv
466.857 120.551 467.009 120.538 467.166 120.538 cv
470.203 120.538 li
470.359 120.538 470.512 120.551 470.623 120.574 cv
470.652 120.58 470.678 120.586 470.7 120.594 cv
470.203 120.594 li
470.047 120.594 469.894 120.607 469.784 120.629 cv
469.673 120.652 469.61 120.683 469.61 120.716 cv
469.61 120.716 li
469.61 120.716 li
469.61 120.748 469.673 120.779 469.784 120.802 cv
469.894 120.825 470.047 120.838 470.203 120.838 cv
f
473.241 120.838 mo
470.203 120.838 li
470.203 120.838 li
470.047 120.838 469.894 120.825 469.784 120.802 cv
469.673 120.779 469.61 120.748 469.61 120.716 cv
469.61 120.716 li
469.61 120.716 li
469.61 120.683 469.673 120.652 469.784 120.629 cv
469.894 120.607 470.047 120.594 470.203 120.594 cv
470.203 120.594 li
470.7 120.594 li
473.241 120.594 li
473.241 120.594 li
473.085 120.594 472.932 120.607 472.821 120.629 cv
472.711 120.652 472.648 120.683 472.648 120.716 cv
472.648 120.716 li
472.648 120.716 li
472.648 120.748 472.711 120.779 472.821 120.802 cv
472.932 120.825 473.085 120.838 473.241 120.838 cv
f
476.279 120.838 mo
473.241 120.838 li
473.241 120.838 li
473.085 120.838 472.932 120.825 472.821 120.802 cv
472.711 120.779 472.648 120.748 472.648 120.716 cv
472.648 120.716 li
472.648 120.716 li
472.648 120.683 472.711 120.652 472.821 120.629 cv
472.932 120.607 473.085 120.594 473.241 120.594 cv
473.241 120.594 li
476.279 120.594 li
476.279 120.594 li
476.122 120.594 475.97 120.607 475.859 120.629 cv
475.749 120.652 475.686 120.683 475.686 120.716 cv
475.686 120.716 li
475.686 120.716 li
475.686 120.748 475.749 120.779 475.859 120.802 cv
475.97 120.825 476.122 120.838 476.279 120.838 cv
f
479.316 120.838 mo
476.279 120.838 li
476.279 120.838 li
476.122 120.838 475.97 120.825 475.859 120.802 cv
475.749 120.779 475.686 120.748 475.686 120.716 cv
475.686 120.716 li
475.686 120.716 li
475.686 120.683 475.749 120.652 475.859 120.629 cv
475.97 120.607 476.122 120.594 476.279 120.594 cv
476.279 120.594 li
479.316 120.594 li
479.316 120.594 li
479.16 120.594 479.007 120.607 478.897 120.629 cv
478.786 120.652 478.723 120.683 478.723 120.716 cv
478.723 120.716 li
478.723 120.716 li
478.723 120.748 478.786 120.779 478.897 120.802 cv
479.007 120.825 479.16 120.838 479.316 120.838 cv
f
482.354 120.838 mo
479.316 120.838 li
479.316 120.838 li
479.16 120.838 479.007 120.825 478.897 120.802 cv
478.786 120.779 478.723 120.748 478.723 120.716 cv
478.723 120.716 li
478.723 120.716 li
478.723 120.683 478.786 120.652 478.897 120.629 cv
479.007 120.607 479.16 120.594 479.316 120.594 cv
479.316 120.594 li
482.354 120.594 li
482.354 120.594 li
482.354 120.594 li
482.198 120.594 482.045 120.607 481.935 120.629 cv
481.824 120.652 481.761 120.683 481.761 120.716 cv
481.761 120.716 li
481.761 120.716 li
481.761 120.748 481.824 120.779 481.935 120.802 cv
482.045 120.825 482.198 120.838 482.354 120.838 cv
f
485.392 120.838 mo
482.354 120.838 li
482.354 120.838 li
482.198 120.838 482.045 120.825 481.935 120.802 cv
481.824 120.779 481.761 120.748 481.761 120.716 cv
481.761 120.716 li
481.761 120.716 li
481.761 120.683 481.824 120.652 481.935 120.629 cv
482.045 120.607 482.198 120.594 482.354 120.594 cv
482.354 120.594 li
482.354 120.594 li
485.392 120.594 li
485.392 120.594 li
485.236 120.594 485.083 120.607 484.973 120.629 cv
484.862 120.652 484.799 120.683 484.799 120.716 cv
484.799 120.716 li
484.799 120.716 li
484.799 120.748 484.862 120.779 484.973 120.802 cv
485.083 120.825 485.236 120.838 485.392 120.838 cv
f
488.43 120.838 mo
485.392 120.838 li
485.392 120.838 li
485.236 120.838 485.083 120.825 484.973 120.802 cv
484.862 120.779 484.799 120.748 484.799 120.716 cv
484.799 120.716 li
484.799 120.716 li
484.799 120.683 484.862 120.652 484.973 120.629 cv
485.083 120.607 485.236 120.594 485.392 120.594 cv
485.392 120.594 li
488.43 120.594 li
488.43 120.594 li
488.43 120.594 li
488.273 120.594 488.12 120.607 488.01 120.629 cv
487.9 120.652 487.836 120.683 487.836 120.716 cv
487.836 120.716 li
487.836 120.716 li
487.836 120.748 487.9 120.779 488.01 120.802 cv
488.12 120.825 488.273 120.838 488.43 120.838 cv
f
491.467 120.838 mo
488.43 120.838 li
488.43 120.838 li
488.273 120.838 488.12 120.825 488.01 120.802 cv
487.9 120.779 487.836 120.748 487.836 120.716 cv
487.836 120.716 li
487.836 120.716 li
487.836 120.683 487.9 120.652 488.01 120.629 cv
488.12 120.607 488.273 120.594 488.43 120.594 cv
488.43 120.594 li
488.43 120.594 li
491.467 120.594 li
491.467 120.594 li
491.311 120.594 491.158 120.607 491.048 120.629 cv
490.937 120.652 490.874 120.683 490.874 120.716 cv
490.874 120.716 li
490.874 120.716 li
490.874 120.748 490.937 120.779 491.048 120.802 cv
491.158 120.825 491.311 120.838 491.467 120.838 cv
f
494.505 120.838 mo
491.467 120.838 li
491.467 120.838 li
491.311 120.838 491.158 120.825 491.048 120.802 cv
490.937 120.779 490.874 120.748 490.874 120.716 cv
490.874 120.716 li
490.874 120.716 li
490.874 120.683 490.937 120.652 491.048 120.629 cv
491.158 120.607 491.311 120.594 491.467 120.594 cv
491.467 120.594 li
494.505 120.594 li
494.505 120.594 li
494.505 120.594 li
494.349 120.594 494.196 120.607 494.085 120.629 cv
493.975 120.652 493.912 120.683 493.912 120.716 cv
493.912 120.716 li
493.912 120.716 li
493.912 120.748 493.975 120.779 494.085 120.802 cv
494.196 120.825 494.349 120.838 494.505 120.838 cv
f
497.543 120.838 mo
494.505 120.838 li
494.505 120.838 li
494.349 120.838 494.196 120.825 494.085 120.802 cv
493.975 120.779 493.912 120.748 493.912 120.716 cv
493.912 120.716 li
493.912 120.716 li
493.912 120.683 493.975 120.652 494.085 120.629 cv
494.196 120.607 494.349 120.594 494.505 120.594 cv
494.505 120.594 li
494.505 120.594 li
497.543 120.594 li
497.543 120.594 li
497.386 120.594 497.234 120.607 497.123 120.629 cv
497.013 120.652 496.949 120.683 496.949 120.716 cv
496.949 120.716 li
496.949 120.716 li
496.949 120.748 497.013 120.779 497.123 120.802 cv
497.234 120.825 497.386 120.838 497.543 120.838 cv
f
500.581 120.838 mo
497.543 120.838 li
497.543 120.838 li
497.386 120.838 497.234 120.825 497.123 120.802 cv
497.013 120.779 496.949 120.748 496.949 120.716 cv
496.949 120.716 li
496.949 120.716 li
496.949 120.683 497.013 120.652 497.123 120.629 cv
497.234 120.607 497.386 120.594 497.543 120.594 cv
497.543 120.594 li
500.581 120.594 li
500.581 120.594 li
500.424 120.594 500.272 120.607 500.161 120.629 cv
500.051 120.652 499.987 120.683 499.987 120.716 cv
499.987 120.716 li
499.987 120.716 li
499.987 120.748 500.05 120.779 500.161 120.802 cv
500.272 120.825 500.424 120.838 500.581 120.838 cv
f
503.618 120.838 mo
500.581 120.838 li
500.581 120.838 li
500.424 120.838 500.272 120.825 500.161 120.802 cv
500.05 120.779 499.987 120.748 499.987 120.716 cv
499.987 120.716 li
499.987 120.716 li
499.987 120.683 500.051 120.652 500.161 120.629 cv
500.272 120.607 500.424 120.594 500.581 120.594 cv
500.581 120.594 li
503.618 120.594 li
503.618 120.594 li
503.618 120.594 li
503.462 120.594 503.309 120.607 503.199 120.629 cv
503.088 120.652 503.025 120.683 503.025 120.716 cv
503.025 120.716 li
503.025 120.716 li
503.025 120.748 503.088 120.779 503.199 120.802 cv
503.309 120.825 503.462 120.838 503.618 120.838 cv
f
506.656 120.838 mo
503.618 120.838 li
503.618 120.838 li
503.462 120.838 503.309 120.825 503.199 120.802 cv
503.088 120.779 503.025 120.748 503.025 120.716 cv
503.025 120.716 li
503.025 120.716 li
503.025 120.683 503.088 120.652 503.199 120.629 cv
503.309 120.607 503.462 120.594 503.618 120.594 cv
503.618 120.594 li
503.618 120.594 li
506.656 120.594 li
506.656 120.594 li
506.5 120.594 506.347 120.607 506.236 120.629 cv
506.126 120.652 506.063 120.683 506.063 120.716 cv
506.063 120.716 li
506.063 120.716 li
506.063 120.748 506.126 120.779 506.236 120.802 cv
506.347 120.825 506.5 120.838 506.656 120.838 cv
f
509.694 120.838 mo
506.656 120.838 li
506.656 120.838 li
506.5 120.838 506.347 120.825 506.236 120.802 cv
506.126 120.779 506.063 120.748 506.063 120.716 cv
506.063 120.716 li
506.063 120.716 li
506.063 120.683 506.126 120.652 506.236 120.629 cv
506.347 120.607 506.5 120.594 506.656 120.594 cv
506.656 120.594 li
509.694 120.594 li
509.85 120.594 510.003 120.607 510.113 120.629 cv
510.224 120.652 510.287 120.683 510.287 120.716 cv
510.287 120.716 li
510.287 120.716 li
510.287 120.748 510.224 120.779 510.113 120.802 cv
510.003 120.825 509.85 120.838 509.694 120.838 cv
f
grestore
grestore
gsave
-67.4993 -18 mo
449.804 -18 li
449.804 149.105 li
-67.4993 149.105 li
-67.4993 -18 li
clp
8.86454 120.194 mo
9.52143 120.154 li
10.1783 120.114 li
10.8352 120.074 li
11.4921 120.031 li
12.149 119.988 li
12.8059 119.945 li
13.4628 119.899 li
14.1197 119.852 li
14.7766 119.802 li
15.4335 119.753 li
16.0904 119.703 li
16.7473 119.653 li
17.4042 119.597 li
18.061 119.544 li
18.7179 119.487 li
19.3748 119.431 li
20.0317 119.371 li
20.6886 119.312 li
21.3455 119.249 li
22.0024 119.186 li
22.6593 119.123 li
23.3162 119.056 li
23.9731 118.987 li
24.63 118.917 li
25.2869 118.847 li
25.9438 118.771 li
26.6007 118.698 li
27.2576 118.622 li
27.9144 118.542 li
28.5713 118.463 li
29.2282 118.38 li
29.8851 118.297 li
30.542 118.211 li
31.1989 118.121 li
31.8558 118.032 li
32.5127 117.939 li
33.1696 117.843 li
33.8265 117.747 li
34.4834 117.651 li
35.1403 117.548 li
35.7972 117.445 li
36.4541 117.339 li
37.111 117.233 li
37.7679 117.12 li
38.4248 117.007 li
39.0816 116.895 li
39.7385 116.775 li
40.3954 116.656 li
41.0523 116.533 li
41.7092 116.407 li
42.3661 116.278 li
43.023 116.149 li
43.6799 116.016 li
44.3368 115.88 li
44.9937 115.741 li
45.6506 115.598 li
46.3075 115.452 li
46.9644 115.306 li
47.6213 115.154 li
48.2781 115.001 li
48.935 114.842 li
49.592 114.683 li
50.2488 114.521 li
50.9057 114.355 li
51.5626 114.182 li
52.2195 114.01 li
52.8764 113.834 li
53.5333 113.655 li
54.1902 113.473 li
54.8471 113.284 li
55.504 113.095 li
56.1609 112.903 li
56.8178 112.704 li
57.4746 112.505 li
58.1316 112.299 li
58.7884 112.09 li
59.4453 111.878 li
60.1022 111.663 li
60.7591 111.444 li
61.416 111.218 li
62.0729 110.993 li
62.7298 110.761 li
63.3867 110.525 li
64.0436 110.283 li
64.7005 110.041 li
65.3574 109.793 li
66.0143 109.541 li
66.6712 109.285 li
67.328 109.023 li
67.985 108.758 li
68.6418 108.49 li
69.2987 108.218 li
69.9556 107.939 li
70.6125 107.654 li
71.2694 107.369 li
71.9263 107.077 li
72.5832 106.782 li
73.2401 106.48 li
73.897 106.175 li
74.5538 105.867 li
75.2108 105.552 li
75.8676 105.23 li
76.5246 104.909 li
77.1815 104.581 li
77.8384 104.246 li
78.4953 103.907 li
79.1521 103.563 li
79.8091 103.214 li
80.4659 102.863 li
81.1228 102.505 li
81.7797 102.144 li
82.4366 101.776 li
83.0935 101.401 li
83.7504 101.023 li
84.4073 100.642 li
85.0642 100.254 li
85.7211 99.8591 li
86.378 99.4612 li
87.0349 99.0567 li
87.6917 98.6489 li
88.3486 98.2378 li
89.0055 97.8167 li
89.6624 97.3956 li
90.3193 96.9646 li
90.9762 96.5303 li
91.6331 96.0926 li
92.29 95.6483 li
92.9469 95.1974 li
93.6038 94.7432 li
94.2607 94.2856 li
94.9176 93.8181 li
95.5745 93.3506 li
96.2314 92.8732 li
96.8883 92.3957 li
97.5452 91.9083 li
98.2021 91.4176 li
98.8589 90.9236 li
99.5158 90.423 li
100.173 89.919 li
100.83 89.4084 li
101.487 88.8912 li
102.143 88.3706 li
102.8 87.8467 li
103.457 87.3162 li
104.114 86.7791 li
104.771 86.2387 li
105.428 85.6949 li
106.085 85.1445 li
106.742 84.5908 li
107.399 84.0305 li
108.055 83.4669 li
108.712 82.8966 li
109.369 82.323 li
110.026 81.7461 li
110.683 81.1658 li
111.34 80.579 li
111.997 79.9855 li
112.654 79.392 li
113.311 78.7919 li
113.967 78.1884 li
114.624 77.5784 li
115.281 76.9683 li
115.938 76.3516 li
116.595 75.7316 li
117.252 75.1083 li
117.909 74.4783 li
118.566 73.8483 li
119.223 73.2117 li
119.88 72.5718 li
120.536 71.9319 li
121.193 71.2854 li
121.85 70.6355 li
122.507 69.9824 li
123.164 69.3292 li
123.821 68.6694 li
124.478 68.0096 li
125.135 67.3431 li
125.792 66.6767 li
126.448 66.007 li
127.105 65.3339 li
127.762 64.6608 li
128.419 63.9812 li
129.076 63.3015 li
129.733 62.6218 li
130.39 61.9354 li
131.047 61.2524 li
131.704 60.5628 li
132.361 59.8765 li
133.017 59.1835 li
133.674 58.4905 li
134.331 57.7976 li
134.988 57.1046 li
135.645 56.4084 li
136.302 55.7121 li
136.959 55.0125 li
137.616 54.3162 li
138.273 53.6166 li
138.929 52.917 li
139.586 52.2175 li
140.243 51.5179 li
140.9 50.8183 li
141.557 50.1187 li
142.214 49.4224 li
142.871 48.7229 li
143.528 48.0232 li
144.185 47.327 li
144.841 46.6307 li
145.498 45.9344 li
146.155 45.2415 li
146.812 44.5485 li
147.469 43.8555 li
148.126 43.1659 li
148.783 42.4763 li
149.44 41.7899 li
150.097 41.1069 li
150.754 40.4239 li
151.41 39.7442 li
152.067 39.0678 li
152.724 38.3948 li
153.381 37.7217 li
154.038 37.0553 li
154.695 36.3888 li
155.352 35.7257 li
156.009 35.0692 li
156.666 34.4128 li
157.322 33.7629 li
157.979 33.1164 li
158.636 32.4731 li
159.293 31.8332 li
159.95 31.2 li
160.607 30.57 li
161.264 29.9467 li
161.921 29.3267 li
162.578 28.7099 li
163.234 28.0999 li
163.891 27.4964 li
164.548 26.8996 li
165.205 26.3062 li
165.862 25.7193 li
166.519 25.1357 li
167.176 24.5621 li
167.833 23.9919 li
168.49 23.4316 li
169.147 22.8745 li
169.803 22.3274 li
170.46 21.7837 li
171.117 21.2499 li
171.774 20.7227 li
172.431 20.2021 li
173.088 19.6916 li
173.745 19.1843 li
174.402 18.6869 li
175.059 18.1996 li
175.715 17.7155 li
176.372 17.2446 li
177.029 16.7772 li
177.686 16.323 li
178.343 15.8753 li
179 15.4343 li
179.657 15.0066 li
180.314 14.5822 li
180.971 14.1711 li
181.628 13.7666 li
182.284 13.3754 li
182.941 12.9908 li
183.598 12.6161 li
184.255 12.248 li
184.912 11.8933 li
185.569 11.5485 li
186.226 11.2136 li
186.883 10.8853 li
187.54 10.5704 li
188.196 10.2653 li
188.853 9.97023 li
189.51 9.6851 li
190.167 9.41327 li
190.824 9.14799 li
191.481 8.896 li
192.138 8.65398 li
192.795 8.42188 li
193.452 8.19977 li
194.108 7.99084 li
194.765 7.79192 li
195.422 7.60292 li
196.079 7.4272 li
196.736 7.26141 li
197.393 7.1089 li
198.05 6.96632 li
198.707 6.83371 li
199.364 6.71101 li
200.021 6.60493 li
200.677 6.50546 li
201.334 6.41928 li
201.991 6.3463 li
202.648 6.28001 li
203.305 6.23027 li
203.962 6.19051 li
204.619 6.16064 li
205.276 6.14407 li
205.933 6.13744 li
206.589 6.14407 li
207.246 6.16064 li
207.903 6.19051 li
208.56 6.23027 li
209.217 6.28001 li
209.874 6.3463 li
210.531 6.41928 li
211.188 6.50546 li
211.845 6.60493 li
212.501 6.71101 li
213.158 6.83371 li
213.815 6.96632 li
214.472 7.1089 li
215.129 7.26141 li
215.786 7.4272 li
216.443 7.60292 li
217.1 7.79192 li
217.757 7.99084 li
218.414 8.19977 li
219.07 8.42188 li
219.727 8.65398 li
220.384 8.896 li
221.041 9.14799 li
221.698 9.41327 li
222.355 9.6851 li
223.012 9.97023 li
223.669 10.2653 li
224.326 10.5704 li
224.982 10.8853 li
225.639 11.2136 li
226.296 11.5485 li
226.953 11.8933 li
227.61 12.248 li
228.267 12.6161 li
228.924 12.9908 li
229.581 13.3754 li
230.238 13.7666 li
230.895 14.1711 li
231.551 14.5822 li
232.208 15.0066 li
232.865 15.4343 li
233.522 15.8753 li
234.179 16.323 li
234.836 16.7772 li
235.493 17.2446 li
236.15 17.7155 li
236.807 18.1996 li
237.463 18.6869 li
238.12 19.1843 li
238.777 19.6916 li
239.434 20.2021 li
240.091 20.7227 li
240.748 21.2499 li
241.405 21.7837 li
242.062 22.3274 li
242.719 22.8745 li
243.375 23.4316 li
244.032 23.9919 li
244.689 24.5621 li
245.346 25.1357 li
246.003 25.7193 li
246.66 26.3062 li
247.317 26.8996 li
247.974 27.4964 li
248.631 28.0999 li
249.288 28.7099 li
249.944 29.3267 li
250.601 29.9467 li
251.258 30.57 li
251.915 31.2 li
252.572 31.8332 li
253.229 32.4731 li
253.886 33.1164 li
254.543 33.7629 li
255.2 34.4128 li
255.856 35.0692 li
256.513 35.7257 li
257.17 36.3888 li
257.827 37.0553 li
258.484 37.7217 li
259.141 38.3948 li
259.798 39.0678 li
260.455 39.7442 li
261.112 40.4239 li
261.768 41.1069 li
262.425 41.7899 li
263.082 42.4763 li
263.739 43.1659 li
264.396 43.8555 li
265.053 44.5485 li
265.71 45.2415 li
266.367 45.9344 li
267.024 46.6307 li
267.681 47.327 li
268.337 48.0232 li
268.994 48.7229 li
269.651 49.4224 li
270.308 50.1187 li
270.965 50.8183 li
271.622 51.5179 li
272.279 52.2175 li
272.936 52.917 li
273.593 53.6166 li
274.249 54.3162 li
274.906 55.0125 li
275.563 55.7121 li
276.22 56.4084 li
276.877 57.1046 li
277.534 57.7976 li
278.191 58.4905 li
278.848 59.1835 li
279.505 59.8765 li
280.162 60.5628 li
280.818 61.2524 li
281.475 61.9354 li
282.132 62.6218 li
282.789 63.3015 li
283.446 63.9812 li
284.103 64.6608 li
284.76 65.3339 li
285.417 66.007 li
286.074 66.6767 li
286.73 67.3431 li
287.387 68.0096 li
288.044 68.6694 li
288.701 69.3292 li
289.358 69.9824 li
290.015 70.6355 li
290.672 71.2854 li
291.329 71.9319 li
291.986 72.5718 li
292.642 73.2117 li
293.299 73.8483 li
293.956 74.4783 li
294.613 75.1083 li
295.27 75.7316 li
295.927 76.3516 li
296.584 76.9683 li
297.241 77.5784 li
297.898 78.1884 li
298.555 78.7919 li
299.211 79.392 li
299.868 79.9855 li
300.525 80.579 li
301.182 81.1658 li
301.839 81.7461 li
302.496 82.323 li
303.153 82.8966 li
303.81 83.4669 li
304.467 84.0305 li
305.123 84.5908 li
305.78 85.1445 li
306.437 85.6949 li
307.094 86.2387 li
307.751 86.7791 li
308.408 87.3162 li
309.065 87.8467 li
309.722 88.3706 li
310.379 88.8912 li
311.035 89.4084 li
311.692 89.919 li
312.349 90.423 li
313.006 90.9236 li
313.663 91.4176 li
314.32 91.9083 li
314.977 92.3957 li
315.634 92.8732 li
316.291 93.3506 li
316.948 93.8181 li
317.604 94.2856 li
318.261 94.7432 li
318.918 95.1974 li
319.575 95.6483 li
320.232 96.0926 li
320.889 96.5303 li
321.546 96.9646 li
322.203 97.3956 li
322.86 97.8167 li
323.516 98.2378 li
324.173 98.6489 li
324.83 99.0567 li
325.487 99.4612 li
326.144 99.8591 li
326.801 100.254 li
327.458 100.642 li
328.115 101.023 li
328.772 101.401 li
329.429 101.776 li
330.085 102.144 li
330.742 102.505 li
331.399 102.863 li
332.056 103.214 li
332.713 103.563 li
333.37 103.907 li
334.027 104.246 li
334.684 104.581 li
335.34 104.909 li
335.997 105.23 li
336.654 105.552 li
337.311 105.867 li
337.968 106.175 li
338.625 106.48 li
339.282 106.782 li
339.939 107.077 li
340.596 107.369 li
341.253 107.654 li
341.909 107.939 li
342.566 108.218 li
343.223 108.49 li
343.88 108.758 li
344.537 109.023 li
345.194 109.285 li
345.851 109.541 li
346.508 109.793 li
347.165 110.041 li
347.822 110.283 li
348.478 110.525 li
349.135 110.761 li
349.792 110.993 li
350.449 111.218 li
351.106 111.444 li
351.763 111.663 li
352.42 111.878 li
353.077 112.09 li
353.734 112.299 li
354.39 112.505 li
355.047 112.704 li
355.704 112.903 li
356.361 113.095 li
357.018 113.284 li
357.675 113.473 li
358.332 113.655 li
358.989 113.834 li
359.646 114.01 li
360.302 114.182 li
360.959 114.355 li
361.616 114.521 li
362.273 114.683 li
362.93 114.842 li
363.587 115.001 li
364.244 115.154 li
364.901 115.306 li
365.558 115.452 li
366.215 115.598 li
366.871 115.741 li
367.528 115.88 li
368.185 116.016 li
368.842 116.149 li
369.499 116.278 li
370.156 116.407 li
370.813 116.533 li
371.47 116.656 li
372.127 116.775 li
372.783 116.895 li
373.44 117.007 li
374.097 117.12 li
374.754 117.233 li
375.411 117.339 li
376.068 117.445 li
376.725 117.548 li
377.382 117.651 li
378.039 117.747 li
378.695 117.843 li
379.352 117.939 li
380.009 118.032 li
380.666 118.121 li
381.323 118.211 li
381.98 118.297 li
382.637 118.38 li
383.294 118.463 li
383.951 118.542 li
384.608 118.622 li
385.264 118.698 li
385.921 118.771 li
386.578 118.847 li
387.235 118.917 li
387.892 118.987 li
388.549 119.056 li
389.206 119.123 li
389.863 119.186 li
390.52 119.249 li
391.176 119.312 li
391.833 119.371 li
392.49 119.431 li
393.147 119.487 li
393.804 119.544 li
394.461 119.597 li
395.118 119.653 li
395.775 119.703 li
396.432 119.753 li
397.089 119.802 li
397.745 119.852 li
398.402 119.899 li
399.059 119.945 li
399.716 119.988 li
400.373 120.031 li
401.03 120.074 li
401.687 120.114 li
402.344 120.154 li
403.001 120.194 li
.197421 1 1 .155886 cmyk
3 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
gsave
[1.0264 0 0 -.331559 -67.4993 149.106 ]ct
@
grestore newpath
grestore
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: WIPAAA+Helvetica-Bold Initial
ct_T42Dict begin
-1.016 -0.48 1.434 1.156
 256 array 0 1 255 {1 index exch /.notdef put} for  /WIPAAA+Helvetica-Bold
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000003886670
676d000000000000044400000b97676c79660000000000001474000004b4
686561640000000000000fdc000000366868656100000000000010140000
0024686d74780000000000001038000000146c6f6361000000000000104c
0000000c6d6178700000000000001058000000206e616d65000000000000
1078000000287072657000000000000010a0000003d36764697200000000
000000000000000005c0001105c2002d0597001d0442001d0000ffda0000
ffdb0000ffdafe53ffef05d0000afffdffed03340000012200000122dffb
011400af000700b7007e000400d200aa0109002300ed013200d9011d012a
00d800fe00db00e2001a008b00a0001a004500e801f6000900e901280132
00360082009e009fff700070003f003f00e801050015003800e9ff7bffc8
fff90042008a00c401070113011dffb9002f00870087009a009c010c0262
ffb10018004c00770080008200c900daffb2ffea001a003600e50111012f
043bffdd00020005001a0039008900aa00b701210123012a015bffe50002
00180023005c00aaff4dff76ffb2ffef001a002f004e007b008a00e1011f
0126012b019a01de03edff80ff8e0007001c004e005500630063006d0081
0098009c00ad011f01260162041c051500390044004b0063008e00cc00e8
00f2010001290142017802d503ea03f0043b049affc400050055005c0060
009f0103011d012401550164017001ad01b401c301f602370261033903d5
047004a100020055008800a100bd00c700d300dd00eb00ed00fa00fd0104
012b013e014f017b019d01ad01e20233025d027d028c02da02ef033103de
0407048b058505bbff04ffd5fffa0007001e002a003b0047005100580065
00650066006e0075007f00840107009700b100c300cc00df00df010a0110
012f013101470154015b016b0179009101a401ba01dc01e401e601e901f6
0213021f0223022f0276027d0282028902ad02b202b902ed03110374037d
03c003de03f60415045d04c004c004df052d0574061c064b0751fe94fedf
ff2dff90ff9affea0016001600240029002d003e0104006d006d00840087
0089008e009c00a400ab00ae00b200b2fffb013900c400d100df00e100ef
00f70121011c011c012101320138015001510154016c016d017f019801a4
01aa01b601ba01bb01bb00d701d701fb01fb01fe00190209022d025b0261
02790279029a009802d302da02ef030c03210328032d034b0353fff103ad
03b103f20425045a0471047b048a0498049f051c053d0557055a05700595
05b605cb05d605ef05f4061d068706a406b406d307080734079807fe0122
01320120012500b400be0082009603700132012400430184011d015600cc
010500ed00c500fb00f900c000a7011d00fe035500880026ffa100b8ff88
00dd00bd00b5037c003c00910293024aff3f03a803090132fff700820030
002a002a002a002a002a002a402a292827262524232221201f1e1d1c1b1a
191817161514131211100f0e0d0c0b0a090807060504030201002c452346
6020b02660b004262348482d2c452346236120b02661b004262348482d2c
45234660b0206120b04660b004262348482d2c4523462361b0206020b026
61b02061b004262348482d2c45234660b0406120b06660b004262348482d
2c4523462361b0406020b02661b04061b004262348482d2c0110203c003c
2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320
b04d44235920b09051582320b00d44235921212d2c20204518684420b001
602045b04676688a4560442d2c01b9400000000a2d2c00b9000040000b2d
2c2045b00043617d6818b0004360442d2c45b01a234445b01923442d2c20
45b00325456164b050515845441b2121592d2cb00143632362b0002342b0
0f2b2d2c2045b0004360442d2c20b0032552582359212d2c69b04061b000
8b0c6423648bb8400062600c642364615c58b0036159b002602d2c45b011
2bb0172344b0177ae5182d2c45b0112bb01723442d2c45b0112bb017458c
b0172344b0177ae5182d2cb002254661658a46b040608b482d2cb0022546
608a46b040618c482d2c4b53205c58b002855958b00185592d2c20b00325
45b019234445b01a23444565234520b00325606a20b009234223688a6a60
6120b0005058b21a401a4523604459b0005258b219401945236044592d2c
b9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7830b
2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d2c01
20b003252349b04060b0206320b000525823b002253823b002256538008a
63381b212121212159012d2c456920b00943b0022660b00325b005254961
b0805358b21940194523616844b21a401a4523606a44b209191a45652345
604259b00943608a103a2d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20
b001600110203c003c2d2c20b001610110203c003c2d2c764520b0032545
23616818236860442d2c7645b00325452361682318456860442d2c7645b0
032545616823452361442db8002a2c4bb800095058b101018e59b801ff85
b800441db9000900035f5e2db8002b2c2020456944b001602db8002c2cb8
002b2a212db8002d2c2046b003254652582359208a208a49648a20462068
6164b004254620686164525823658a592f20b00053586920b000545821b0
40591b6920b000545821b0406559593a2db8002e2c2046b0042546525823
8a592046206a6164b0042546206a61645258238a592ffd2db8002f2c4b20
b0032650585158b080441bb04044591b21212045b0c05058b0c0441b2159
592db800302c2020456944b001602020457d691844b001602db800312cb8
00302a2db800322c4b20b003265358b0801bb040598a8a20b00326535823
21b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b00326
53582321b801408a8a1b8a235920b80003265358b0032545b80180505823
21b8018023211bb003254523212321591b2159442db800332c4b53584544
1b2121592db800342c4bb800095058b101018e59b801ff85b800441db900
0900035f5e2db800352c2020456944b001602db800362cb800352a212db8
00372c2046b003254652582359208a208a49648a204620686164b0042546
20686164525823658a592f20b00053586920b000545821b040591b6920b0
00545821b0406559593a2db800382c2046b00425465258238a592046206a
6164b0042546206a61645258238a592ffd2db800392c4b20b00326505851
58b080441bb04044591b21212045b0c05058b0c0441b2159592db8003a2c
2020456944b001602020457d691844b001602db8003b2cb8003a2a2db800
3c2c4b20b003265358b0801bb040598a8a20b0032653582321b0c08a8a1b
8a235920b0032653582321b801008a8a1b8a235920b0032653582321b801
408a8a1b8a235920b80003265358b0032545b8018050582321b801802321
1bb003254523212321591b2159442db8003d2c4b535845441b2121592db8
003e2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2d
b8003f2c2020456944b001602db800402cb8003f2a212db800412c2046b0
03254652582359208a208a49648a204620686164b0042546206861645258
23658a592f20b00053586920b000545821b040591b6920b000545821b040
6559593a2db800422c2046b00425465258238a592046206a6164b0042546
206a61645258238a592ffd2db800432c4b20b0032650585158b080441bb0
4044591b21212045b0c05058b0c0441b2159592db800442c2020456944b0
01602020457d691844b001602db800452cb800442a2db800462c4b20b003
265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b003
2653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a23
5920b80003265358b0032545b8018050582321b8018023211bb003254523
212321591b2159442db800472c4b535845441b2121592db800482c4bb800
095058b101018e59b801ff85b800441db9000900035f5e2db800492c2020
456944b001602db8004a2cb800492a212db8004b2c2046b0032546525823
59208a208a49648a204620686164b004254620686164525823658a592f20
b00053586920b000545821b040591b6920b000545821b0406559593a2db8
004c2c2046b00425465258238a592046206a6164b0042546206a61645258
238a592ffd2db8004d2c4b20b0032650585158b080441bb04044591b2121
2045b0c05058b0c0441b2159592db8004e2c2020456944b001602020457d
691844b001602db8004f2cb8004e2a2db800502c4b20b003265358b0801b
b040598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321b8
01008a8a1b8a235920b0032653582321b801408a8a1b8a235920b8000326
5358b0032545b8018050582321b8018023211bb003254523212321591b21
59442db800512c4b535845441b2121592db800522c4bb800095058b10101
8e59b801ff85b800441db9000900035f5e2db800532c2020456944b00160
2db800542cb800532a212db800552c2046b003254652582359208a208a49
648a204620686164b004254620686164525823658a592f20b00053586920
b000545821b040591b6920b000545821b0406559593a2db800562c2046b0
0425465258238a592046206a6164b0042546206a61645258238a592ffd2d
b800572c4b20b0032650585158b080441bb04044591b21212045b0c05058
b0c0441b2159592db800582c2020456944b001602020457d691844b00160
2db800592cb800582a2db8005a2c4b20b003265358b0401bb000598a8a20
b0032653582321b0808a8a1b8a235920b0032653582321b800c08a8a1b8a
235920b0032653582321b801008a8a1b8a235920b0032653582321b80140
8a8a1b8a235920b80003265358b0032545b8018050582321b8018023211b
b003254523212321591b2159442db8005b2c4b535845441b2121592db800
5c2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db8
005d2c2020456944b001602db8005e2cb8005d2a212db8005f2c2046b003
254652582359208a208a49648a204620686164b004254620686164525823
658a592f20b00053586920b000545821b040591b6920b000545821b04065
59593a2db800602c2046b00425465258238a592046206a6164b004254620
6a61645258238a592ffd2db800612c4b20b0032650585158b080441bb040
44591b21212045b0c05058b0c0441b2159592db800622c2020456944b001
602020457d691844b001602db800632cb800622a2db800642c4b20b00326
5358b0401bb000598a8a20b0032653582321b0808a8a1b8a235920b00326
53582321b800c08a8a1b8a235920b0032653582321b801008a8a1b8a2359
20b0032653582321b801408a8a1b8a235920b80003265358b0032545b801
8050582321b8018023211bb003254523212321591b2159442db800652c4b
535845441b2121592d00000100000001000081f500645f0f3cf500110800
00000000a2272e8000000000cff2eef7f7dcfc270b7e0946000100090001
000000000000000100000629fe2900000c01f7dcfcdb0b7e000100000000
00000000000000000000000505c7009a05c7003405c700a106aa00970556
00550000003400c2013401ba025a000100000005007a0009006c00080002
001000100066000007e80b97000400010000000100120001000000000006
00150000454f50464e492b48656c7665746963612d426f6c6400b8005c2b
b800522bb800482bb8003e2bb800342bb8002a2bb10840ba019000145df4
4009011f04000b1fd819eebe012e000d00e6012e000d00b0012e400c0d00
0963833c1f63838348294109014b00370401001f014500240401001f0144
b224ab1fb8013eb224231fb8013db224231fb80102b2371d1fb801004009
37241ffd37621ffc37b80801401b1ff824931ff724931ff6243f1ff52431
1fd1371d1fd037471fcd41b80801b21fcb2ab80201b21fca24b80401400f
1fc824811fb537291fb4373b1fb227b80401b21fb141b80401b61fa43781
1fa384b80401b21fa22ab80401b21fa124b8019ab21fa024b8019ab61f9f
243f1f9683b80401b21f9527b80401b21f8227b80401b21f7084b80801b2
1f6fb3b80801b21f6eb3b802abb61f6d24261f6224b80101400b1f5d246c
1f5c24391f5441b80125b21f4d27b80401b61f4c27cd1f4b41b80401b21f
4024b8019ab21f3683b80401b21f3524b80201b21f3224b8019ab61f2c24
bb1f2884b80801b21f2241b8040140131f20244c1f1d24261f2ca0961f2c
245e1f412ab801a8b748282a2448279636b801f4b21f4d27b801f4b21f95
27b801f4b21f6e27b801f4b21f6327bd01a700470029015a00250199b348
296fb3b80190b21f83b3b8019ab348283725b803e840121fb32748278427
4827362748272527482755b80154402c0797076407550733072b07290726
0721071e071b071408120810080e080c080a080808060804080208000814
b8ffe0402b00000100140610000001000604000001000410000001001002
000001000200000001000002010802004a00b806008516763f183f123e11
3946443e113946443e113946443e113946443e11394660443e1139466044
2b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b18011db0964b53
58b0aa1d59b0324b5358b0ff1d592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b
4b5279b35279eb56456523456023456560234560b08b766818b080622020
b1eb794565234520b003266062636820b003266165b079236544b0eb2344
20b152564565234520b003266062636820b003266165b056236544b05223
44b10056455458b156406544b25240524523614459b35045484e45652345
6023456560234560b089766818b080622020b148454565234520b0032660
62636820b003266165b045236544b048234420b1504e4565234520b00326
6062636820b003266165b04e236544b0502344b1004e455458b14e406544
b250405045236144592b2b456953420000>
[1205 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 104 1 <00030034000005a805c20002000a000b00dc406b6802012705280a380637
094806680a780a880488069a0395049806aa03a504a806b801b80ac801c8
0ad803d80a150107060602000809090200080a01070502140a0a25120909
02140505251206060207082a010000020a0b04030206090a0305080b0d17
171a0b0a040605b80114b2090302b80114b60a190c657572182b764e10f4
184dfd3939fd39391139194e456544e6182f003f173c4d3f3c3c1239392f
3cfd3c05872e2b7d104b5158b004c01bb004c459872e182b7d104b5158b0
03c01bb003c4591112393912393987103c3c07103c3c3130015d005d0121
0b012101210321032101022f0176b8ab015c020afeb25ffde166febe02ba
022d02440151fa3e012ffed105c2>WIPAAA+Helvetica-Bold AddT42Char 
1 388 2 <000300a10000056105c20009001400290059402ca904a707a71203771687
16021c0a2a010127002a28020b2a27081c100536184f10371f1a2b000b25
27192a2bbc011e00210052012a00182b2b4ef44dfd3c4e10f64dedf4ed12
39003fed3ffd12392ffd393130015d005d01112132363534272623011121
323736353427262700171615140706071e0115140706070e012321112101
c7016a617950456bfebc016a6136625f35600146714444264a7173422a3f
47c171fd6402cc04c2febb495d672117fdc7fe771a3088732b1801033599
5e8387522e2629b27f8368452f362805c200>WIPAAA+Helvetica-Bold AddT42Char 
1 616 3 <000100970000062805c2001200c040900900070808090511160819092900
27082b0924112a12370735083c0938126a00651179007511890086119a00
9611a800a611c700f708f8091c05080a09160818090407121a071a0a1712
220023112f123d073f0a3f127a12b909b612c7120e0f070f0a020a0f1211
090800050e070203120a07030e1100020e0803081417171a020403270212
0f0d0e270f19135279182b4e10f44dfd3c1910dcdc18fd3c104e456544e6
003f3c3c3f3c121739011112391217391139313000715d01715d01211121
113436350121011416151121112101046d01bbfee102fee9fed5feeb02fe
e101c0010c05c2fa3e03e52b9b2afb2b04d52a9b2bfc1b05c2fb7900>WIPAAA+Helvetica-Bold AddT42Char 
1 884 4 <00020055ffda050e05ef002e002f00a3406a080f07210726190b190f1721
1726660c650d6922e52d0b29102915281a26273a15381ab915ca15dc15d2
2ceb13eb16f913fa16f92d0f0e00110b22181f25170825220e0b04182ed4
2b18d41c412f140304412b092f18962f11174f0896281a311f3611570036
2e193031b8011eb321ad56182b2b4ef44dedf4ed4e10f64dedf41139ed2f
003fed3f3ceded10ed11173901111239111239391112393130015d005d01
16171633323736353427262f012627263534002132041721262726232206
151417161f011617161514002120003501017b0e294bb66d44814040899c
e6589501200117e9014908fed8086c486b778e462d93fea75584fecbfee6
fee0feb6025101c765325b182e7d4928271e23343d66d9c60106f7eb8538
2560564f271a233d284368c5cafef50107e60428>WIPAAA+Helvetica-Bold AddT42Char 
1 0 0 <0002009a0000053d05c200030007003e402105061d02010004071d03000a
05041d0303021a0906071d0100190809aa216c3c182b2b4ef43c4dfd3c4e
10f63c4d10fd3c003f3cfd3c3f3cfd3c313033112111271121119a04a3b8
fccd05c2fa3eb80452fbae000000>WIPAAA+Helvetica-Bold AddT42Char 
WIPAAA+Helvetica-Bold /CharStrings get begin
/A 1 def
/B 2 def
/M 3 def
/S 4 def
end
WIPAAA+Helvetica-Bold /Encoding get
dup 65 /A put
dup 66 /B put
dup 77 /M put
dup 83 /S put
pop
end
%ADOEndSubsetFont
/WIGQCG+Helvetica-Bold /WIPAAA+Helvetica-Bold findfont ct_VMDictPut/WIGQCG+Helvetica-Bold*1 [65{/.notdef}rp /A /B 10{/.notdef}rp /M 5{/.notdef}rp /S 172{/.notdef}rp]WIGQCG+Helvetica-Bold nfWIGQCG+Helvetica-Bold*1 [80 0 0 -80 0 0 ]msf126.11 120.557 mo(MASAMB)[66.6394 57.776 53.3606 57.776 66.6394 0 ]xsh.155489 1 1 .12134 cmyk
%ADOBeginSubsetFont: WOFQMX+Helvetica-Light Initial
ct_T42Dict begin
-0.449 -0.352 1.344 1.203
 256 array 0 1 255 {1 index exch /.notdef put} for  /WOFQMX+Helvetica-Light
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000000426670
676d000000000000010000000459676c7966000000000000077400000790
68656164000000000000055c000000366868656100000000000005940000
0024686d747800000000000005b8000000306c6f636100000000000005e8
0000001a6d6178700000000000000604000000206e616d65000000000000
06240000002870726570000000000000064c000001276764697200000000
000000000000000000140032003a003c004400000013ff3400080206000e
02ba000702d0001300140014003a002d0032003600660044003c00490000
0013ff3400080206000e02d000130000b800002c4bb800095058b101018e
59b801ff85b800441db9000900035f5e2db800012c2020456944b001602d
b800022cb800012a212db800032c2046b003254652582359208a208a4964
8a204620686164b004254620686164525823658a592f20b00053586920b0
00545821b040591b6920b000545821b0406559593a2db800042c2046b004
25465258238a592046206a6164b0042546206a61645258238a592ffd2db8
00052c4b20b0032650585158b080441bb04044591b21212045b0c05058b0
c0441b2159592db800062c2020456944b001602020457d691844b001602d
b800072cb800062a2db800082c4b20b003265358b0401bb000598a8a20b0
032653582321b0808a8a1b8a235920b0032653582321b800c08a8a1b8a23
5920b0032653582321b801008a8a1b8a235920b0032653582321b801408a
8a1b8a235920b80003265358b0032545b8018050582321b8018023211bb0
03254523212321591b2159442db800092c4b535845441b2121592db8000a
2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db800
0b2c2020456944b001602db8000c2cb8000b2a212db8000d2c2046b00325
4652582359208a208a49648a204620686164b00425462068616452582365
8a592f20b00053586920b000545821b040591b6920b000545821b0406559
593a2db8000e2c2046b00425465258238a592046206a6164b0042546206a
61645258238a592ffd2db8000f2c4b20b0032650585158b080441bb04044
591b21212045b0c05058b0c0441b2159592db800102c2020456944b00160
2020457d691844b001602db800112cb800102a2db800122c4b20b0032653
58b0401bb000598a8a20b0032653582321b0808a8a1b8a235920b0032653
582321b800c08a8a1b8a235920b0032653582321b801008a8a1b8a235920
b0032653582321b801408a8a1b8a235920b80003265358b0032545b80180
50582321b8018023211bb003254523212321591b2159442db800132c4b53
5845441b2121592db8000a2c4bb800095058b101018e59b801ff85b80044
1db9000900035f5e2db8000b2c2020456944b001602db8000c2cb8000b2a
212db8000d2c2046b003254652582359208a208a49648a204620686164b0
04254620686164525823658a592f20b00053586920b000545821b040591b
6920b000545821b0406559593a2db8000e2c2046b00425465258238a5920
46206a6164b0042546206a61645258238a592ffd2db8000f2c4b20b00326
50585158b080441bb04044591b21212045b0c05058b0c0441b2159592db8
00102c2020456944b001602020457d691844b001602db800112cb800102a
2db800122c4b20b003265358b0401bb000598a8a20b0032653582321b080
8a8a1b8a235920b0032653582321b800c08a8a1b8a235920b00326535823
21b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b800
03265358b0032545b8018050582321b8018023211bb00325452321232159
1b2159442db800132c4b535845441b2121592d000000000100000001076d
c22c29225f0f3cf5001903e800000000b923eec300000000cff2eef7fe3b
fe9d054104b6000000090002000000000000000100000302ff1a000005a5
fe3bfec2054100010000000000000000000000000000000c01f400000116
000001160066022c0027022c0078022c0030022c003b02630012022c002e
022c002d00de004e022c0048000000560056007e00ea011c018e01c601f4
02a2031c036003c8000000010000000c00a4000900750005000100000000
001400000200045900030001000000010012000100000000000600160000
4f484a5552552b48656c7665746963612d4c69676874b8000a2b01ba0006
0013000c2b01bf00160051004100350028001c000000122bbf0017005c00
5200350028001c000000122bbf0018004c0041003500280012000000122b
00bf0011005f005200410028001c000000122bbf0012007b0064004e0033
001c000000122bbf0013006e005200410033001c000000122bbf00140066
005200410033001c000000122bbf00150036002d00230019001200000012
2b00ba0019000400112bb8001020457d691844b8000a2bb800002b00ba00
01000200022b01ba0003000200022b01bf0003005c004900390029001a00
0000082bbf00040051004900390029001a000000082b00bf0001006e005a
00460032001a000000082bbf0002005f004900390029001a000000082b00
ba0005000500072bb8000020457d6918440000>
[1937 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd

1 0 1 <> WOFQMX+Helvetica-Light AddT42Char 
1 172 2 <00010066ff7700af0058000b0024bb00000003000700042b00b800004558
b800082f1bb9000800053e59b9000a0002f4303117140607353e013d0123
3533af29200c1622491e2c350a25081c1e225800>WOFQMX+Helvetica-Light AddT42Char 
1 252 3 <00020027fff2020402c100130029005db8002a2fb800002fb8002a10b800
25d0b800252fb9000a0003f4b8000010b9001b0003f400b800004558b800
142f1bb90014000b3e59b800004558b800202f1bb9002000053e59b80014
10b900050001f4b8002010b9000f0001f4303101342e0223220e0215141e
0233323e0203321e0415140e0223222e0235343e0201c40d264538354326
0f112843333945240cae344c3521120614355c49495d351412335e015b39
6d56343558703a446f4e2b38586e019b1f36485156294680623a3a638349
4380653e0000>WOFQMX+Helvetica-Light AddT42Char 
1 468 4 <000100780000016e02c1000a0039bb00080003000000042b00b800004558
b800072f1bb90007000b3e59b800004558b800092f1bb9000900053e59bb
00020001000100042b30310123353e0337331123012eb628413121083340
020c2a030a1c352dfd3f>WOFQMX+Helvetica-Light AddT42Char 
1 568 5 <000100300000020302c1002d005fbb00160004001900042bbb002d000400
0000042bbb000a0004002300042bb8000a10b80017d0b800172f00b80000
4558b800052f1bb90005000b3e59b800004558b800182f1bb9001800053e
59b900160001f4b8000510b900280001f4303113343e0233321e0215140e
04070e03072115213e01373e0535342e0223220e021745203c5534355137
1c1f334144421a11201a10010189fe33011422254f4c44341e182a382123
3929160201da34553d211f3448282f48382c2724140d1d22291936335227
2a3c2f272e3a2a223626131d304024000000>WOFQMX+Helvetica-Light AddT42Char 
1 796 6 <0001003b000001fc02ba000e0039bb00070004000800042b00b800004558
b800002f1bb90000000b3e59b800004558b800072f1bb9000700053e59b8
000010b9000d0002f430311321150e0307233e0337213b01c14c6a442103
4605334c6033fe8c02ba3c56b5ab94344caba89d3e00>WOFQMX+Helvetica-Light AddT42Char 
1 908 7 <000100120000025102d00006003600b800004558b800002f1bb90000000d
3e59b800004558b800032f1bb90003000d3e59b800004558b800052f1bb9
000500053e59303113331b013303231247d9d847fa4b02d0fd800280fd30
0000>WOFQMX+Helvetica-Light AddT42Char 
1 1000 8 <0002002efff20216021400100043009cb800442fb800172fb80000d0b800
4410b80041d0b800412fb900060003f4b8001710b9002a0003f4b8001710
b80039d0b800392f00b800004558b800252f1bb9002500093e59b8000045
58b8002f2f1bb9002f00053e59b800004558b800322f1bb9003200053e59
b800004558b800342f1bb9003400053e59b800004558b8003c2f1bb9003c
00053e59b9000b0001f4b8002510b9001a0001f43031010e01070e011514
1e0233323e0235273e01373e0135342623220e0207233e0333321e021511
141637150e012322272e03350e0123222e02353437019b264e27454d131f
29152444352065112f0f0f073b461f342719043d0324394b2a2745331d19
26071b0d0e0d0f120b04266239223f301cb50110100a030534351823170b
122539276f02080707210e2e3b0b1b2d222e41291311253e2dfee623130e
2f020803020f15190e2a2c12263726841800>WOFQMX+Helvetica-Light AddT42Char 
1 1348 9 <0002002dfff202000214000a0026007fb800272fb800002fb8002710b800
1ed0b8001e2fb9000b0003f4b8000ad0b8000010b80013d0b800132fb800
0010b900260003f4b80014d0b800142f00b800004558b800232f1bb90023
00093e59b800004558b800192f1bb9001900053e59bb000a0001000b0004
2bb8002310b900050001f4b8001910b900100001f4303101342e0223220e
020715141e0233323637330e0323222e0235343e023332160701bf15293e
28283d2b1a04162b422b3b540e430b24364a313e5a3a1c213d58386b7a01
01272643311d1e324225322a4b37213e39253f2f1a2a49633939644b2b93
8c000000>WOFQMX+Helvetica-Light AddT42Char 
1 1592 10 <0002004e0000009002d0000300070062bb00070004000400042bb8000410
b80000d0b800002fb8000710b80002d0b800022f00b800004558b800012f
1bb9000100093e59b800004558b800052f1bb90005000d3e59b800004558
b800002f1bb9000000053e59b8000510b900040002f43031331133110335
3315513c3f420206fdfa027759590000>WOFQMX+Helvetica-Light AddT42Char 
1 1728 11 <00010048000001e30214001b0079b8001c2fb8000f2fb8001c10b80001d0
b800012fb900000003f4b80003d0b8000f10b9000e0003f400b800004558
b800022f1bb9000200093e59b800004558b800072f1bb9000700093e59b8
00004558b800002f1bb9000000053e59b800004558b8000e2f1bb9000e00
053e59b8000710b900130001f4303133231133153e01333216171e011511
2311342623220e02070e0115843c3c244d3630521c13073c3e481c2e251a
070904020648263021291c3b20fead01524646111c2414192e1b0000>WOFQMX+Helvetica-Light AddT42Char 
1 0 0 <00050000000001f402bc000300060009000c000f0061b800102fb800072f
b8001010b80000d0b800002fb8000710b900020003f4b8000010b9000f00
03f400b800004558b800002f1bb90000000b3e59b800004558b800022f1b
b9000200053e59b8000010b900040001f4b8000210b9000a0001f4303111
21112101211713110713270727372701f4fe0c01a4feacaac8aa8caaaa1e
aaaa02bcfd44028afffed401fefffed4ffff2dffff00>WOFQMX+Helvetica-Light AddT42Char 
WOFQMX+Helvetica-Light /CharStrings get begin
/space 1 def
/comma 2 def
/zero 3 def
/one 4 def
/two 5 def
/seven 6 def
/V 7 def
/a 8 def
/e 9 def
/i 10 def
/n 11 def
end
WOFQMX+Helvetica-Light /Encoding get
dup 32 /space put
dup 44 /comma put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 55 /seven put
dup 86 /V put
dup 97 /a put
dup 101 /e put
dup 105 /i put
dup 110 /n put
pop
end
%ADOEndSubsetFont
/WIGQCH+Helvetica-Light /WOFQMX+Helvetica-Light findfont ct_VMDictPut/WIGQCH+Helvetica-Light*1 [32{/.notdef}rp /space 11{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two 4{/.notdef}rp /seven 30{/.notdef}rp /V 10{/.notdef}rp /a 3{/.notdef}rp /e 3{/.notdef}rp /i 4{/.notdef}rp /n 145{/.notdef}rp]WIGQCH+Helvetica-Light nfWIGQCH+Helvetica-Light*1 [20 0 0 -20 0 0 ]msf132.174 149.498 mo(Vienna, 2017)[12.2198 4.44 11.12 11.12 11.12 11.12 5.56 5.56 11.12 11.12 11.12 0 ]xsh%ADOBeginSubsetFont: VYPBAA+Helvetica-Light Initial
ct_T42Dict begin
-0.449 -0.352 1.344 1.203
 256 array 0 1 255 {1 index exch /.notdef put} for  /VYPBAA+Helvetica-Light
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000000426670
676d000000000000010000000459676c79660000000000000738000000ac
68656164000000000000055c000000366868656100000000000005940000
0024686d747800000000000005b8000000086c6f636100000000000005c0
000000066d61787000000000000005c8000000206e616d65000000000000
05e800000028707265700000000000000610000001276764697200000000
000000000000000000140032003a003c004400000013ff3400080206000e
02ba000702d0001300140014003a002d0032003600660044003c00490000
0013ff3400080206000e02d000130000b800002c4bb800095058b101018e
59b801ff85b800441db9000900035f5e2db800012c2020456944b001602d
b800022cb800012a212db800032c2046b003254652582359208a208a4964
8a204620686164b004254620686164525823658a592f20b00053586920b0
00545821b040591b6920b000545821b0406559593a2db800042c2046b004
25465258238a592046206a6164b0042546206a61645258238a592ffd2db8
00052c4b20b0032650585158b080441bb04044591b21212045b0c05058b0
c0441b2159592db800062c2020456944b001602020457d691844b001602d
b800072cb800062a2db800082c4b20b003265358b0401bb000598a8a20b0
032653582321b0808a8a1b8a235920b0032653582321b800c08a8a1b8a23
5920b0032653582321b801008a8a1b8a235920b0032653582321b801408a
8a1b8a235920b80003265358b0032545b8018050582321b8018023211bb0
03254523212321591b2159442db800092c4b535845441b2121592db8000a
2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db800
0b2c2020456944b001602db8000c2cb8000b2a212db8000d2c2046b00325
4652582359208a208a49648a204620686164b00425462068616452582365
8a592f20b00053586920b000545821b040591b6920b000545821b0406559
593a2db8000e2c2046b00425465258238a592046206a6164b0042546206a
61645258238a592ffd2db8000f2c4b20b0032650585158b080441bb04044
591b21212045b0c05058b0c0441b2159592db800102c2020456944b00160
2020457d691844b001602db800112cb800102a2db800122c4b20b0032653
58b0401bb000598a8a20b0032653582321b0808a8a1b8a235920b0032653
582321b800c08a8a1b8a235920b0032653582321b801008a8a1b8a235920
b0032653582321b801408a8a1b8a235920b80003265358b0032545b80180
50582321b8018023211bb003254523212321591b2159442db800132c4b53
5845441b2121592db8000a2c4bb800095058b101018e59b801ff85b80044
1db9000900035f5e2db8000b2c2020456944b001602db8000c2cb8000b2a
212db8000d2c2046b003254652582359208a208a49648a204620686164b0
04254620686164525823658a592f20b00053586920b000545821b040591b
6920b000545821b0406559593a2db8000e2c2046b00425465258238a5920
46206a6164b0042546206a61645258238a592ffd2db8000f2c4b20b00326
50585158b080441bb04044591b21212045b0c05058b0c0441b2159592db8
00102c2020456944b001602020457d691844b001602db800112cb800102a
2db800122c4b20b003265358b0401bb000598a8a20b0032653582321b080
8a8a1b8a235920b0032653582321b800c08a8a1b8a235920b00326535823
21b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b800
03265358b0032545b8018050582321b8018023211bb00325452321232159
1b2159442db800132c4b535845441b2121592d000000000100000001076d
c22c29225f0f3cf5001903e800000000b923eec300000000cff2eef7fe3b
fe9d054104b6000000090002000000000000000100000302ff1a000005a5
fe3bfec2054100010000000000000000000000000000000201f400000000
0000000000560056000000010000000200a4000900750005000100000000
001400000200045900030001000000010012000100000000000600160000
4a464f564b572b48656c7665746963612d4c69676874b8000a2b01ba0006
0013000c2b01bf00160051004100350028001c000000122bbf0017005c00
5200350028001c000000122bbf0018004c0041003500280012000000122b
00bf0011005f005200410028001c000000122bbf0012007b0064004e0033
001c000000122bbf0013006e005200410033001c000000122bbf00140066
005200410033001c000000122bbf00150036002d00230019001200000012
2b00ba0019000400112bb8001020457d691844b8000a2bb800002b00ba00
01000200022b01ba0003000200022b01bf0003005c004900390029001a00
0000082bbf00040051004900390029001a000000082b00bf0001006e005a
00460032001a000000082bbf0002005f004900390029001a000000082b00
ba0005000500072bb8000020457d6918440000>
[173 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd

1 0 1 <> VYPBAA+Helvetica-Light AddT42Char 
1 0 0 <00050000000001f402bc000300060009000c000f0061b800102fb800072f
b8001010b80000d0b800002fb8000710b900020003f4b8000010b9000f00
03f400b800004558b800002f1bb90000000b3e59b800004558b800022f1b
b9000200053e59b8000010b900040001f4b8000210b9000a0001f4303111
21112101211713110713270727372701f4fe0c01a4feacaac8aa8caaaa1e
aaaa02bcfd44028afffed401fefffed4ffff2dffff00>VYPBAA+Helvetica-Light AddT42Char 
VYPBAA+Helvetica-Light /CharStrings get begin
/NULL 1 def
end
VYPBAA+Helvetica-Light /Encoding get
dup 33 /NULL put
pop
end
%ADOEndSubsetFont
/WIGQCI+Helvetica-Light /VYPBAA+Helvetica-Light findfont ct_VMDictPut/WIGQCI+Helvetica-Light*1 [33{/.notdef}rp /NULL 222{/.notdef}rp]WIGQCI+Helvetica-Light nfWIGQCI+Helvetica-Light*1 [20 0 0 -20 0 0 ]msf248.914 149.498 mo(!)sh292.75 134.076 mo
292.75 129.934 296.108 126.576 300.25 126.576 cv
304.392 126.576 307.75 129.934 307.75 134.076 cv
307.75 138.218 304.392 141.576 300.25 141.576 cv
296.108 141.576 292.75 138.218 292.75 134.076 cv
cp
.232242 1 1 .261173 cmyk
ef
328.501 158.08 mo
328.501 153.938 331.859 150.58 336.001 150.58 cv
340.143 150.58 343.501 153.938 343.501 158.08 cv
343.501 162.223 340.143 165.58 336.001 165.58 cv
331.859 165.58 328.501 162.223 328.501 158.08 cv
cp
ef
365.25 170.952 mo
365.25 166.81 368.608 163.452 372.75 163.452 cv
376.892 163.452 380.25 166.81 380.25 170.952 cv
380.25 175.094 376.892 178.452 372.75 178.452 cv
368.608 178.452 365.25 175.094 365.25 170.952 cv
cp
ef
404.109 163.452 mo
404.109 159.31 407.467 155.952 411.609 155.952 cv
415.752 155.952 419.109 159.31 419.109 163.452 cv
419.109 167.594 415.752 170.952 411.609 170.952 cv
407.467 170.952 404.109 167.594 404.109 163.452 cv
cp
ef
439.324 144 mo
439.324 139.858 442.682 136.5 446.824 136.5 cv
450.966 136.5 454.324 139.858 454.324 144 cv
454.324 148.142 450.966 151.5 446.824 151.5 cv
442.682 151.5 439.324 148.142 439.324 144 cv
cp
ef
482.607 108.037 mo
482.607 103.895 485.965 100.537 490.107 100.537 cv
494.25 100.537 497.607 103.895 497.607 108.037 cv
497.607 112.179 494.25 115.537 490.107 115.537 cv
485.965 115.537 482.607 112.179 482.607 108.037 cv
cp
ef
504.515 90.9959 mo
504.515 86.8538 507.873 83.4959 512.015 83.4959 cv
516.157 83.4959 519.515 86.8538 519.515 90.9959 cv
519.515 95.138 516.157 98.4959 512.015 98.4959 cv
507.873 98.4959 504.515 95.138 504.515 90.9959 cv
cp
ef
531.515 83.4959 mo
531.515 79.3538 534.873 75.9959 539.015 75.9959 cv
543.157 75.9959 546.515 79.3538 546.515 83.4959 cv
546.515 87.638 543.157 90.9959 539.015 90.9959 cv
534.873 90.9959 531.515 87.638 531.515 83.4959 cv
cp
ef
466.927 128.617 mo
466.927 124.474 470.285 121.117 474.427 121.117 cv
478.569 121.117 481.927 124.474 481.927 128.617 cv
481.927 132.759 478.569 136.117 474.427 136.117 cv
470.285 136.117 466.927 132.759 466.927 128.617 cv
cp
ef
459.489 156.537 mo
459.489 152.395 462.847 149.037 466.989 149.037 cv
471.131 149.037 474.489 152.395 474.489 156.537 cv
474.489 160.679 471.131 164.037 466.989 164.037 cv
462.847 164.037 459.489 160.679 459.489 156.537 cv
cp
ef
489.515 176.037 mo
489.515 171.895 492.873 168.537 497.015 168.537 cv
501.157 168.537 504.515 171.895 504.515 176.037 cv
504.515 180.179 501.157 183.537 497.015 183.537 cv
492.873 183.537 489.515 180.179 489.515 176.037 cv
cp
ef
521.693 188.037 mo
521.693 183.895 525.051 180.537 529.193 180.537 cv
533.335 180.537 536.693 183.895 536.693 188.037 cv
536.693 192.179 533.335 195.537 529.193 195.537 cv
525.051 195.537 521.693 192.179 521.693 188.037 cv
cp
ef
502.449 119.076 mo
510.902 160.52 li
ef
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
502.449 119.076 mo
510.902 160.52 li
.181888 .539086 .353674 .0021973 cmyk
@
519.434 108.105 mo
531.703 168.255 li
.232242 1 1 .261173 cmyk
ef
519.434 108.105 mo
531.703 168.255 li
.181888 .539086 .353674 .0021973 cmyk
@
487.558 133.254 mo
492.622 158.08 li
.232242 1 1 .261173 cmyk
ef
487.558 133.254 mo
492.622 158.08 li
.181888 .539086 .353674 .0021973 cmyk
@
478.112 165.668 mo
478.112 163.413 479.94 161.585 482.194 161.585 cv
484.449 161.585 486.277 163.413 486.277 165.668 cv
486.277 167.923 484.449 169.75 482.194 169.75 cv
479.94 169.75 478.112 167.923 478.112 165.668 cv
cp
.232242 1 1 .261173 cmyk
ef
508.817 180.545 mo
508.817 178.291 510.645 176.463 512.9 176.463 cv
515.155 176.463 516.982 178.291 516.982 180.545 cv
516.982 182.8 515.155 184.628 512.9 184.628 cv
510.645 184.628 508.817 182.8 508.817 180.545 cv
cp
ef
423.655 153.12 mo
423.655 150.865 425.483 149.037 427.737 149.037 cv
429.992 149.037 431.82 150.865 431.82 153.12 cv
431.82 155.374 429.992 157.202 427.737 157.202 cv
425.483 157.202 423.655 155.374 423.655 153.12 cv
cp
ef
386.427 168.537 mo
386.427 166.282 388.255 164.454 390.509 164.454 cv
392.764 164.454 394.592 166.282 394.592 168.537 cv
394.592 170.792 392.764 172.62 390.509 172.62 cv
388.255 172.62 386.427 170.792 386.427 168.537 cv
cp
ef
348.452 165.992 mo
348.452 163.738 350.28 161.91 352.534 161.91 cv
354.789 161.91 356.617 163.738 356.617 165.992 cv
356.617 168.247 354.789 170.075 352.534 170.075 cv
350.28 170.075 348.452 168.247 348.452 165.992 cv
cp
ef
308.913 145.37 mo
308.913 143.115 310.74 141.287 312.995 141.287 cv
315.25 141.287 317.078 143.115 317.078 145.37 cv
317.078 147.625 315.25 149.453 312.995 149.453 cv
310.74 149.453 308.913 147.625 308.913 145.37 cv
cp
ef
496.35 98.4959 mo
496.35 96.2412 498.178 94.4134 500.433 94.4134 cv
502.688 94.4134 504.515 96.2412 504.515 98.4959 cv
504.515 100.751 502.688 102.578 500.433 102.578 cv
498.178 102.578 496.35 100.751 496.35 98.4959 cv
cp
ef
520.291 87.5784 mo
520.291 85.3237 522.118 83.4959 524.373 83.4959 cv
526.628 83.4959 528.456 85.3237 528.456 87.5784 cv
528.456 89.8331 526.628 91.6609 524.373 91.6609 cv
522.118 91.6609 520.291 89.8331 520.291 87.5784 cv
cp
ef
550.12 80.0784 mo
550.12 77.8237 551.948 75.9959 554.202 75.9959 cv
556.457 75.9959 558.285 77.8237 558.285 80.0784 cv
558.285 82.3331 556.457 84.1609 554.202 84.1609 cv
551.948 84.1609 550.12 82.3331 550.12 80.0784 cv
cp
ef
540.455 195.537 mo
540.455 193.282 542.283 191.454 544.538 191.454 cv
546.793 191.454 548.62 193.282 548.62 195.537 cv
548.62 197.792 546.793 199.62 544.538 199.62 cv
542.283 199.62 540.455 197.792 540.455 195.537 cv
cp
ef
431.572 131.525 mo
431.572 129.271 433.4 127.443 435.655 127.443 cv
437.909 127.443 439.737 129.271 439.737 131.525 cv
439.737 133.78 437.909 135.608 435.655 135.608 cv
433.4 135.608 431.572 133.78 431.572 131.525 cv
cp
ef
281.18 139.69 mo
281.18 137.436 283.008 135.608 285.263 135.608 cv
287.518 135.608 289.345 137.436 289.345 139.69 cv
289.345 141.945 287.518 143.773 285.263 143.773 cv
283.008 143.773 281.18 141.945 281.18 139.69 cv
cp
ef
269.061 146.498 mo
269.061 144.243 270.888 142.415 273.143 142.415 cv
275.398 142.415 277.226 144.243 277.226 146.498 cv
277.226 148.753 275.398 150.58 273.143 150.58 cv
270.888 150.58 269.061 148.753 269.061 146.498 cv
cp
ef
2.25 lw
5.97218 124.5 mo
266.785 124.5 li
.750271 .679713 .654902 .901945 cmyk
@
262.285 124.5 mo
257.785 118.875 li
269.035 124.5 li
257.785 130.125 li
cp
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/WIGQCI+Helvetica-Light*1 uf/WIGQCI+Helvetica-Light uf/VYPBAA+Helvetica-Light uf/WIGQCH+Helvetica-Light*1 uf/WIGQCH+Helvetica-Light uf/WOFQMX+Helvetica-Light uf/WIGQCG+Helvetica-Bold*1 uf/WIGQCG+Helvetica-Bold uf/WIPAAA+Helvetica-Bold ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
